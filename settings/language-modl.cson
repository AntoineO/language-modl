'.source.modl':
  'editor':
    'tabLength': 4
    'commentStart': '// '
    'foldEndPattern': '(?<!\\*)\\*\\*/|^\\s*\\}'
    'increaseIndentPattern': '(?x)
       ^ .* \\{ [^}"\']* $
      |^ .* \\( [^\\)"\']* $
      |^ \\s* (public|private|protected): \\s* $
      |^ \\s* @(public|private|protected) \\s* $
      |^ \\s* \\{ \\} $
      '
    'decreaseIndentPattern': '(?x)
       ^ \\s* (\\s* /[*] .* [*]/ \\s*)* \\}
      |^ \\s* (\\s* /[*] .* [*]/ \\s*)* \\)
      |^ \\s* (public|private|protected): \\s* $
      |^ \\s* @(public|private|protected) \\s* $
      '
  autocomplete:
    symbols:
      function:
        selector: ".function.name"
        typePriority: 3
      variable:
        selector: ".variable"
        typePriority: 2
      '': # the catch-all
        selector: '.source'
        typePriority: 1
      builtins:
        suggestions: [
          {
          	type: "function"
          	displayText: "Ceil"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Ceil(${1:@real x})${2:;}$0"
          	description: "Nearest integral real with a value greater than or equal to x. For example: Ceil(1.3) returns 2.0, and Ceil(-1.3) returns -1.0."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Erf"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Erf(${1:@real x})${2:;}$0"
          	description: "Returns the erf value of the variable x. Erf is the Error function, which is a special case of the incomplete gamma function. See Numerical recipes in C."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Exp"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Exp(${1:@real x})${2:;}$0"
          	description: "e x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FFT"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "FFT(${1:@real array[n][2]}, ${2:@integer inverse})${3:;}$0"
          	description: "Replaces the array with the real and imaginary parts of the fast Fourier transform (see below)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FixDecimal"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "FixDecimal(${1:@real value}, ${2:@integer fixFigs})${3:;}$0"
          	description: "Sets the number of figures after the decimal point to fixFigs and returns the result."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Floor"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Floor(${1:@real x})${2:;}$0"
          	description: "Nearest integral real with a value less than or equal to x. For example: Floor(1.3) returns 1, and floor(-1.3) returns -2."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GammaFunction"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GammaFunction(${1:@real x})${2:;}$0"
          	description: "Gamma function for x. Do not confuse this with the Gamma distribution function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Int"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "Int(${1:@real x})${2:;}$0"
          	description: "Nearest integer after rounding toward 0. For example: Int(1.3) returns 1, and Int(-1.3) returns -1."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Integerabs"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "Integerabs(${1:@integer i})${2:;}$0"
          	description: "Non-negative integer containing the absolute value of the integer i."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Log"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Log(${1:@real x})${2:;}$0"
          	description: "Natural (base e) log of x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Log10"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Log10(${1:@real x})${2:;}$0"
          	description: "Base 10 log of x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Log2"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Log2(${1:@real x})${2:;}$0"
          	description: "Returns the log base 2 value of the variable x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Max2"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Max2(${1:@real x}, ${2:@real y})${3:;}$0"
          	description: "Maximum of the two arguments."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Min2"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Min2(${1:@real x}, ${2:@real y})${3:;}$0"
          	description: "Minimum of the two arguments."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NearlyEqual"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "NearlyEqual(${1:@real x}, ${2:@real y}, ${3:@integer precision})${4:;}$0"
          	description: "Returns true if the x and y arguments are close enough to equal each other. The precision argument specifies the number of significant figures to compare the two numbers."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NearlyGreaterThan"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "NearlyGreaterThan(${1:@real x}, ${2:@real y}, ${3:@integer precision}, ${4:@integer equal})${5:;}$0"
          	description: "Returns true if x is greater than y. If equal is TRUE, NearlyEqual() is used, with the precision argument, to give an equal or greater result. If equal is FALSE, x has to be greater than y by the precision number of significant figures. See the NearlyEqual() function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NearlyLessThan"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "NearlyLessThan(${1:@real x}, ${2:@real y}, ${3:@integer precision}, ${4:@integer equal})${5:;}$0"
          	description: "Returns true if x is less than y. If equal is TRUE, NearlyEqual() is used, with the precision argument, to give an equal or less than result. If equal is FALSE, x has to be less than y by the precision number of significant figures. See the NearlyEqual() function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NoValue"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "NoValue(${1:@real x})${2:;}$0"
          	description: "1 (True) if x has no value (is blank) or 0 (False) if a value has been assigned to x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Pow"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Pow(${1:@real x}, ${2:@real y})${3:;}$0"
          	description: "x y . The same results may be achieved with the ^ operator, as in x^y. Note that Pow(0,0) is undefined."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Realabs"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Realabs(${1:@real x})${2:;}$0"
          	description: "Non-negative real number containing the absolute value of x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Realmod"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Realmod(${1:@real x}, ${2:@real y})${3:;}$0"
          	description: "x modulo y (that is, the remainder of x divided by y)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Round"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Round(${1:@real x}, ${2:@integer sigFigs})${3:;}$0"
          	description: "Rounds x to the significant figures specified in the sigFigs argument."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Sqrt"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Sqrt(${1:@real x})${2:;}$0"
          	description: "Square root of x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Acos"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Acos(${1:@real x})${2:;}$0"
          	description: "Arccosine of x, where x is any real number between -1 and +1 inclusive."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Asin"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Asin(${1:@real x})${2:;}$0"
          	description: "Arcsine of x, where x is any real number between -1 and +1 inclusive."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Atan"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Atan(${1:@real x})${2:;}$0"
          	description: "Arctangent of x, where x is a real number. The value returned is between -/2 and /2 radians."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Atan2"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Atan2(${1:@real y}, ${2:@real x})${3:;}$0"
          	description: "Arctangent of y/x, where x is non-zero. The value returned is between - and  radians."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Cos"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Cos(${1:@real x})${2:;}$0"
          	description: "Cosine of angle x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Cosh"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Cosh(${1:@real x})${2:;}$0"
          	description: "Hyperbolic cosine of angle x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Sin"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Sin(${1:@real x})${2:;}$0"
          	description: "Sine of angle x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Sinh"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Sinh(${1:@real x})${2:;}$0"
          	description: "Hyperbolic sine of angle x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Tan"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Tan(${1:@real x})${2:;}$0"
          	description: "Tangent of angle x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Tanh"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Tanh(${1:@real x})${2:;}$0"
          	description: "Hyperbolic tangent of angle x."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AddC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AddC(${1:@real result[2]}, ${2:@real U[2]}, ${3:@real Z[2]})${4:;}$0"
          	description: "result = U+Z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DivC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DivC(${1:@real result[2]}, ${2:@real U[2]}, ${3:@real Z[2]})${4:;}$0"
          	description: "result = U/Z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MultC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MultC(${1:@real result[2]}, ${2:@real U[2]}, ${3:@real Z[2]})${4:;}$0"
          	description: "result = U*Z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SubC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SubC(${1:@real result[2]}, ${2:@real U[2]}, ${3:@real Z[2]})${4:;}$0"
          	description: "result = U-Z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBinomial"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBinomial(${1:@real prob}, ${2:@integer nTrials})${3:;}$0"
          	description: "Number of successes out of nTrials, each with a probability of success of prob."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DExponential"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DExponential(${1:@real rate})${2:;}$0"
          	description: "Interval between events. rate is the expected (mean) number of events per period."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DGamma"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DGamma(${1:@integer kthEvent})${2:;}$0"
          	description: "Waiting time to the kthEvent in a Poisson process of mean equal to 1."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLogNormal"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DLogNormal(${1:@real mean}, ${2:@real stdDev})${3:;}$0"
          	description: "Positively skewed distribution."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DPascal"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DPascal(${1:@real prob}, ${2:@integer kthSuccess})${3:;}$0"
          	description: "Geometric distribution if kthSuccess equals 1. This returns the number of trials needed for the kthSuccess of an event with probability of prob."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DPoisson"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DPoisson(${1:@real rate})${2:;}$0"
          	description: "Number of times an event occurs within a given period. rate is the expected (mean) number of events per period."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Gaussian"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Gaussian(${1:@real mean}, ${2:@real stdDev})${3:;}$0"
          	description: "Real random member of a Gaussian (normal) distribution with the specified mean and standard deviation."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Mean"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Mean(${1:@real array[]}, ${2:@integer i})${3:;}$0"
          	description: "Arithmetic mean of the first i members of the single-dimensional array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Random"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "Random(${1:@real i})${2:;}$0"
          	description: "Uniform pseudo-random integer in the range 0 to i-1 using the random seed specified in the Simulation Setup dialog. For example, Random(6) returns an integer in the range 0 through 5, inclusive. Random(i) assumes that i is an integer. For the Integer (uniform) function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RandomCalculate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "RandomCalculate(${1:@integer distribution}, ${2:@real arg1}, ${3:@real arg2}, ${4:@real arg3})${5:;}$0"
          	description: "Returns a random number given a distribution and up to three arguments.  If a given distribution does not use all three arguments, a zero should be entered for the unused argument(s). The following numbers are used to define the distribution: Beta  1, Binomial  2, Erlang  3, Exponential  4, Gamma  5, Geometric  6, Hyperexponential  7, Integer Uniform  8, Loglogistic 9, Lognormal Negative Binomial 11, Normal  12, Pearsonv  13, Pearsonvi 14, Poisson 15, Real Uniform  16, Triangular 17, Weibull 18, ExtremeValue1A 20, ExtremeValue1B 21, JohnsonSB 22, JohnsonSU 23, Laplace 24, Rayleigh 25, InverseWeibull 26, Logarithmic 27, Hypergeometric 28, Chisquared 29, PowerFunction 30, Cauchy 31, Logistic 32, InverseGaussian 33, Pareto 34."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RandomCheckParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "RandomCheckParam(${1:@integer distribution}, ${2:@real arg1}, ${3:@real arg2}, ${4:@real arg3}, ${5:@integer reportError})${6:;}$0"
          	description: "Checks that the arguments passed in are valid for the given distribution. The distribution argument is defined using the numbers above. Displays an error message if reportError is TRUE and the arguments are not valid.  If reportError is FALSE, the function returns the following: 0 Successful, -1 Mean must be greater than 0, -2 Probability must be between 0 and 1, -3 Argument must be between 0 and 1, -4 Shape must be greater than 0, -5 Shape2 must be greater than 0, -6 Most likely value must be between Max and Min values, -7 Min must be less than Max, -8 Arg1 is negative or less than 1.0e-15, -9 Arg2 is negative or less than 1.0e-15, -10 Arg3 is negative or less than 1.0e-15, -11 Arg1 >= Arg2, -12 Arg1 > 1.0, -13 Arg2 > 1.0, -14 Arg3 > 1.0."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RandomGetModelSeedUsed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "RandomGetModelSeedUsed()${1:;}$0"
          	description: "The actual seed used for the model. If the Simulation Setup dialog had 0 entered for the seed, this will return the actual randomized seed used, not 0. If a non-zero number was entered, this will return that number. This is different than reading the RANDOMSEED global variable, which just shows the actual number entered in the Simulation Setup dialog, including 0, and doesn’t show the actual randomized seed used for running the model."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RandomGetSeed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "RandomGetSeed()${1:;}$0"
          	description: "Current seed value or current state of the random number generator. Used for saving and restoring the random state when using different seeds. See RandomSetSeed() below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RandomReal"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "RandomReal()${1:;}$0"
          	description: "Uniform pseudo-random real number x, in the range {0.0 <= x <1.0} using the random seed specified in the Simulation Setup dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RandomSetSeed"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "RandomSetSeed(${1:@integer i})${2:;}$0"
          	description: "Sets the seed value or saved state of the random number generator. Used for saving and restoring the random state when using different seeds. See RandomGetSeed() above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SeedListClear"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SeedListClear()${1:;}$0"
          	description: "Clears the list of the seed values."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SeedListRegister"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "SeedListRegister(${1:@real blockNumber}, ${2:@integer seed})${3:;}$0"
          	description: "Keeps a list of the seed values. Returns a BLANK for success, meaning the item was entered in the list, or returns the blockNumber of the block that already posted the seed value. Note: Block number is a real so we can register DB cells that generate random numbers using a DB attribute. DB attributes will appear as negative numbers."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StdDevPop"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "StdDevPop(${1:@real array[]}, ${2:@integer i})${3:;}$0"
          	description: "Population standard deviation of the first i members of the singledimensional array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StdDevSample"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "StdDevSample(${1:@real array}, ${2:@integer i})${3:;}$0"
          	description: "Sample standard deviation of the first i members of the singledimensional array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "TStatisticValue"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "TStatisticValue(${1:@real probability}, ${2:@integer degreesOfFreedom})${3:;}$0"
          	description: "Returns an accurate approximation of the point on the students tdistribution for a given single tail probability and number of degreesOfFreedom."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "UseRandomizedSeed"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "UseRandomizedSeed()${1:;}$0"
          	description: "Forces a randomized seed for the current simulation run, overriding any fixed seed entered into the Simulation Setup dialog. Must be called in CHECKDATA message handler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CalcFV"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "CalcFV(${1:@real ratePer}, ${2:@integer nPer}, ${3:@real pmt}, ${4:@real pv}, ${5:@integer payAtBegin})${6:;}$0"
          	description: "Future value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CalcNPER"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "CalcNPER(${1:@real ratePer}, ${2:@real pmt}, ${3:@real pv}, ${4:@real fv}, ${5:@integer payAtBegin})${6:;}$0"
          	description: "Number of periods."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CalcPMT"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "CalcPMT(${1:@real ratePer}, ${2:@integer nPer}, ${3:@real pv}, ${4:@real fv}, ${5:@integer payAtBegin})${6:;}$0"
          	description: "Payment."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CalcPV"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "CalcPV(${1:@real ratePer}, ${2:@integer nPer}, ${3:@real pmt}, ${4:@real fv}, ${5:@integer payAtBegin})${6:;}$0"
          	description: "Present value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CalcRate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "CalcRate(${1:@integer nPer}, ${2:@real pmt}, ${3:@real pv}, ${4:@real fv}, ${5:@integer payAtBegin})${6:;}$0"
          	description: "Interest rate. If the rate cannot be calculated using the values of the arguments, the function returns a noValue (BLANK) result."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IntegrateEuler"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "IntegrateEuler(${1:@real array[4]}, ${2:@real inputValue}, ${3:@real deltaTime})${4:;}$0"
          	description: "Value of a Euler integration in progress. The array must be initialized with the IntegrateInit function. The algorithm is a backward Euler: out = out + inputValue * DeltaTime."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IntegrateInit"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "IntegrateInit(${1:@real array[4]}, ${2:@real initConditions})${3:;}$0"
          	description: "Initializes the array for integration. Call this function in the InitSim message handler if you are going to use the integration functions during a simulation. initConditions specifies the starting real value for the integration."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IntegrateTrap"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "IntegrateTrap(${1:@real array[4]}, ${2:@real inputValue}, ${3:@real deltaTime})${4:;}$0"
          	description: "Value of a Trapezoidal integration in progress. The array must be initialized with the IntegrateInit function. The algorithm is a firstorder trapezoid: out = out + DeltaTime * (previousInputValue + inputValue) / 2."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConjugateC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConjugateC(${1:@real matrixRC}, ${2:@real matrixAC}, ${3:@integer m}, ${4:@integer n})${5:;}$0"
          	description: "Returns the conjugate values of matrixAC in matrixRC. Both matrixAC and matrixRC are m by n by 2 (complex) matrices."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Determinant"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Determinant(${1:@real matrixA}, ${2:@integer m})${3:;}$0"
          	description: "Value of the determinant of matrixA, which is an m by m matrix. If the matrix is singular, the function returns a NoValue."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DeterminantC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DeterminantC(${1:@real resultC}, ${2:@real matrixAC}, ${3:@integer m})${4:;}$0"
          	description: "Complex version of Determinant which returns its complex result in resultC. If the matrix is singular, the function returns a NoValue in resultC."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EigenValues"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EigenValues(${1:@real ValuesC}, ${2:@real matrixA}, ${3:@integer m})${4:;}$0"
          	description: "Eigenvalues of matrixA (m by m) are placed into the complex array ValuesC. ValuesC is of length m by 2 (complex). matrixA may be nonsymmetric. (This routine is based on the EISPACK method of creating a Hessenberg matrix and iterating that matrix into a diagonal matrix through similarity transformations). If the matrix is singular, the function returns TRUE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Identity"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "Identity(${1:@real matrixR}, ${2:@integer m})${3:;}$0"
          	description: "Creates an m by m matrixR with 1s along the diagonal and 0s above and below the matrix diagonal."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IdentityC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "IdentityC(${1:@real matrixRC}, ${2:@integer m})${3:;}$0"
          	description: "Complex version of Identity."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Inner"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Inner(${1:@real vectorA}, ${2:@real vectorB}, ${3:@integer m})${4:;}$0"
          	description: "Value of the inner or dot product of vectorA and vectorB of length m."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "InnerC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "InnerC(${1:@real resultC}, ${2:@real vectorAC}, ${3:@real vectorBC}, ${4:@integer m})${5:;}$0"
          	description: "Complex version of Inner which returns its complex result in resultC."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LUdecomp"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LUdecomp(${1:@real matrixR}, ${2:@real matrixA}, ${3:@integer m})${4:;}$0"
          	description: "Returns the LU decomposition of input matrixA in matrixR. If the matrix is singular, the function returns TRUE. Since LU factorization in LUdecomp permutes rows to obtain the best pivots, the LU matrix returned is only directly applicable to diagonally dominant matrices. The result of LUdecomp can be used in general once the permutation is accounted for."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LUdecompC"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LUdecompC(${1:@real matrixRC}, ${2:@real matrixAC}, ${3:@integer m})${4:;}$0"
          	description: "Complex version of LUdecomp. If the matrix is singular, the function returns TRUE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatAdd"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatAdd(${1:@real matrixR}, ${2:@real matrixA}, ${3:@real matrixB}, ${4:@integer m}, ${5:@integer n})${6:;}$0"
          	description: "Returns in matrixR the addition of matrixA to matrixB. m is the number of rows, n is the number of columns."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatAddC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatAddC(${1:@real matrixRC}, ${2:@real matrixAC}, ${3:@real matrixBC}, ${4:@integer m}, ${5:@integer n})${6:;}$0"
          	description: "Complex version of MatAdd."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatCopy"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatCopy(${1:@real matrixR}, ${2:@real matrixA}, ${3:@integer m}, ${4:@integer n})${5:;}$0"
          	description: "Copies matrixA (of dimension m by n) into matrixR."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatCopyC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatCopyC(${1:@real matrixRC}, ${2:@real matrixAC}, ${3:@integer m}, ${4:@integer n})${5:;}$0"
          	description: "Complex version of MatCopy."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatInvert"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MatInvert(${1:@real matrixR}, ${2:@real matrixA}, ${3:@integer m})${4:;}$0"
          	description: "MatrixR is the inverse of matrixA, which is an m by m square matrix. If the matrix is singular, the function returns TRUE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatInvertC"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MatInvertC(${1:@real matrixRC}, ${2:@real matrixAC}, ${3:@integer m})${4:;}$0"
          	description: "Complex version of MatInvert. If the matrix is singular, the function returns TRUE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatMatProd"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatMatProd(${1:@real matrixR}, ${2:@real matrixA}, ${3:@integer mA}, ${4:@integer nA}, ${5:@real matrixB}, ${6:@integer mB}, ${7:@integer nB})${8:;}$0"
          	description: "MatrixR (mA by nB) is created from the product of matrixA (mA by nA) and matrixB (mB by nB). Note that nA must equal mB."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatMatProdC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatMatProdC(${1:@real matrixRC}, ${2:@real matrixAC}, ${3:@integer mA}, ${4:@integer nA}, ${5:@real matrixBC}, ${6:@integer mB}, ${7:@integer nB})${8:;}$0"
          	description: "Complex version of MatMatProd."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatScalarProd"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatScalarProd(${1:@real matrixR}, ${2:@real matrixA}, ${3:@integer m}, ${4:@integer n})${5:;}$0"
          	description: "This matrix scalar product creates matrixR by multiplying matrixA by B. MatrixA is m by n, and B is a scalar (single number)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatScalarProdC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatScalarProdC(${1:@real matrixRC}, ${2:@real matrixAC}, ${3:@integer m}, ${4:@integer n}, ${5:@real BC})${6:;}$0"
          	description: "Complex version of MatScalarProd."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatSub"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatSub(${1:@real matrixR}, ${2:@real matrixA}, ${3:@real matrixB}, ${4:@integer m}, ${5:@integer n})${6:;}$0"
          	description: "Returns in matrixR the difference of matrixB from matrixA. m is the number of rows, n is the number of columns."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatSubC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatSubC(${1:@real matrixRC}, ${2:@real matrixAC}, ${3:@real matrixBC}, ${4:@integer m}, ${5:@integer n})${6:;}$0"
          	description: "Complex version of MatSub."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatVectorProd"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatVectorProd(${1:@real vectorR}, ${2:@real matrixA}, ${3:@integer m}, ${4:@integer n}, ${5:@real vectorB})${6:;}$0"
          	description: "Creates an m length vector (vectorR) by multiplying matrixA (m by n) by vectorB (n)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MatVectorProdC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MatVectorProdC(${1:@real vectorRC}, ${2:@real matrixAC}, ${3:@integer m}, ${4:@integer n}, ${5:@real vectorBC})${6:;}$0"
          	description: "Complex version of MatVectorProd."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Outer"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "Outer(${1:@real matrixR}, ${2:@real vectorA}, ${3:@integer m}, ${4:@real vectorB}, ${5:@integer n})${6:;}$0"
          	description: "Creates an m by n matrix (matrixR) from the product of vectorA and vectorB. vectorA is of length m and vectorB is of length n."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OuterC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OuterC(${1:@real matrixRC}, ${2:@real vectorAC}, ${3:@integer m}, ${4:@real vectorBC}, ${5:@integer n})${6:;}$0"
          	description: "Complex version of Outer."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Roots"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "Roots(${1:@real values[][2]}, ${2:@real p[]}, ${3:@integer n})${4:;}$0"
          	description: "Calculates the roots of polynomial p of order n. These roots are returned in the complex array values. The coefficients of the polynomial p are in an array beginning with the coefficient of the second highest power. The coefficient of the highest power is assumed to be 1. For example:p[] -> x^n + p[0]*x^(n-1)+ p[1]*x^(n-2) ...+p[n-1] Note that both values and p can be length n or greater. If the matrix of the polynomial is singular, the function returns TRUE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Transpose"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "Transpose(${1:@real matrixR}, ${2:@real matrixA}, ${3:@integer m}, ${4:@integer n})${5:;}$0"
          	description: "Creates the transpose of matrixA in matrixR. The input matrix is m by n and the result matrix is n by m."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "TransposeC"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "TransposeC(${1:@real matrixRC}, ${2:@real matrixAC}, ${3:@integer m}, ${4:@integer n})${5:;}$0"
          	description: "Complex version of Transpose."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BitAnd"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BitAnd(${1:@integer i}, ${2:@integer j})${3:;}$0"
          	description: "Bitwise AND of the two integers."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BitClr"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BitClr(${1:@integer i}, ${2:@integer bitNum})${3:;}$0"
          	description: "Sets the bit numbered bitNum in i to 0 and returns the result."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BitNot"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BitNot(${1:@integer i})${2:;}$0"
          	description: "Bitwise NOT of the integer."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BitOr"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BitOr(${1:@integer i}, ${2:@integer j})${3:;}$0"
          	description: "Bitwise OR of the two integers."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BitSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BitSet(${1:@integer i}, ${2:@integer bitNum})${3:;}$0"
          	description: "Sets the bit numbered bitNum in i to 1 and returns the result."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BitShift"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BitShift(${1:@integer i}, ${2:@integer Count})${3:;}$0"
          	description: "Shifts i by Count bits. If Count is positive, this shifts to the left (multiply i by 2^Count); if Count is negative, it shifts to the right (divide i by 2^Count). 0s are shifted in."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BitTst"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BitTst(${1:@integer i}, ${2:@integer bitNum})${3:;}$0"
          	description: "TRUE if the bit numbered bitNum is set to 1, FALSE if bitNum is 0."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BitXor"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BitXor(${1:@integer i}, ${2:@integer j})${3:;}$0"
          	description: "Bitwise Exclusive OR of the two integers."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationCalculate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EquationCalculate(${1:@real input1}, ${2:@real input2}, ${3:@real input3}, ${4:@real input4}, ${5:@real input5}, ${6:@real input6}, ${7:@real input7}, ${8:@real input8}, ${9:@real input9}, ${10:@real input10}, ${11:@integer dynArrayName[]})${12:;}$0"
          	description: "Calculates an equation compiled by the EquationCompile function. The arguments can be integer or real values (such as input connectors). This function returns the real value assigned to the output variable. This function should be called whenever you need a new value from the equation, and is usually placed in the Simulate message handler. Also see “Dynamic text items” on page 1158 for larger equations than 255 characters. If you need unlimited input and output variables, see EquationCalculateDynamicVariables, below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationCalculate20"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EquationCalculate20(${1:@real input1}, ${2:@real input2}, ${3:@real input3}, ${4:@real input4}, ${5:@real input5}, ${6:@real input6}, ${7:@real input7}, ${8:@real input8}, ${9:@real input9}, ${10:@real input10}, ${11:@real input11}, ${12:@real input12}, ${13:@real input13}, ${14:@real input14}, ${15:@real input15}, ${16:@real input16}, ${17:@real input17}, ${18:@real input18}, ${19:@real input19}, ${20:@real input20}, ${21:@integer dynArrayName[]})${22:;}$0"
          	description: "This works the same as the EquationCalculate function, except it allows 20 inputs. Also see “Dynamic text items” on page 1158 for equations larger than 255 characters. If you need unlimited input and output variables, see EquationCalculateDynamicVariables, below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationCalculateDynamic"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EquationCalculateDynamic(${1:@real arrayValues[]}, ${2:@integer equationArray[]})${3:;}$0"
          	description: "Calculates a dynamic text equation using the input arguments from the array arrayValues. Up to 20 input arguments are allowed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationCalculateDynamicVariables"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EquationCalculateDynamicVariables(${1:@real inputDynArray}, ${2:@real outputDynArray}, ${3:@integer codeDynArray})${4:;}$0"
          	description: "This function allows unlimited input and output variables. InputDynArray values and outputDynArray real array are used in the equation like this example: outputsName[i] = inputsName[i]; Make sure that you have enough elements allocated in the input and output dynamic arrays. See the Equation block in the Values library to see how to use this function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationCompile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EquationCompile(${1:@string inputVarName1}, ${2:@string inputVarName2}, ${3:@string inputVarName3}, ${4:@string inputVarName4}, ${5:@string inputVarName5}, ${6:@string inputVarName6}, ${7:@string inputVarName7}, ${8:@string inputVarName8}, ${9:@string inputVarName9}, ${10:@string inputVarName10}, ${11:@string outputVarName}, ${12:@string equation}, ${13:@integer tabOrder}, ${14:@integer dynArrayName[]})${15:;}$0"
          	description: "Compiles an equation that is typed into an editable text item or string variable in a dialog. The variables inputVarName1 through inputVarName10, outputVarName, and equation are all strings; tabOrder is an integer and dynArrayName is an integer dynamic array. The user’s equation can use any valid ModL function or statement, including defining new variables. The compiler outputs error messages and puts the insertion point at the error in the dialog item identified by tabOrder if it is a dialog editable text item. The compiler stores the machine code for the compiled equation in dynArrayName. This function should be called only when the equation or variable names are changed. Returns TRUE if there was an error in the equation. Also see “Dynamic text items” on page 1158 for larger equations than 255 characters. If you need unlimited input and output variables, see EquationCompileDynamicVariables, below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationCompile20"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EquationCompile20(${1:@string inputVarName1}, ${2:@string inputVarName2}, ${3:@string inputVarName3}, ${4:@string inputVarName4}, ${5:@string inputVarName5}, ${6:@string inputVarName6}, ${7:@string inputVarName7}, ${8:@string inputVarName8}, ${9:@string inputVarName9}, ${10:@string inputVarName10}, ${11:@string inputVarName11}, ${12:@string inputVarName12}, ${13:@string inputVarName13}, ${14:@string inputVarName14}, ${15:@string inputVarName15}, ${16:@string inputVarName16}, ${17:@string inputVarName17}, ${18:@string inputVarName18}, ${19:@string inputVarName19}, ${20:@string inputVarName20}, ${21:@string outputVarName}, ${22:@string equation}, ${23:@string equation2}, ${24:@integer tabOrder}, ${25:@integer tabOrder2}, ${26:@integer dynArrayName[]})${27:;}$0"
          	description: "This works the same as the EquationCompile function, except it allows 20 inputs and two equation strings. Also see “Dynamic text items” on page 1158 for larger equations than 255 characters. If you need unlimited input and output variables, see EquationCompileDynamicVariables, below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationCompileDynamic"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EquationCompileDynamic(${1:@str31 varNames[]}, ${2:@string dynamicTextArray}, ${3:@integer outputEquation[]}, ${4:@string labelOutput}, ${5:@integer tabOrder})${6:;}$0"
          	description: "Compiles a dynamic text equation. See EquationCompile20(), as this is similar except that the input variable names are supplied in the array VarNames. VarNames can be up to 20 arguments."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationCompileDynamicVariables"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EquationCompileDynamicVariables(${1:@string inputsName}, ${2:@string outputsName}, ${3:@string equationDynArray}, ${4:@integer codeDynArray}, ${5:@integer tabOrder})${6:;}$0"
          	description: "This function allows unlimited input and output variables. InputsName and outputsName are used in the equation like this example: outputsName[i] = inputsName[i]; where i will be the index of that input or output variable. TabOrder is used to select the correct text item when there is an error in the equation. You can do a string substitution in the user’s raw equation to put it in this indexed form. See the Equation block in the Values library to see how to use this function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationCompileSetStaticArray"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "EquationCompileSetStaticArray(${1:@integer dynArray})${2:;}$0"
          	description: "See the Equation block for use. The dynArray argument can be any type as the equation compile functions set up the array to hold any declared static variables."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationDebugCalculate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EquationDebugCalculate(${1:@integer debugEquationIndex}, ${2:@real inputVarValuesArray[]}, ${3:@real outputVarValuesArray[]})${4:;}$0"
          	description: "Calculates the equation using specified input values. The output values for the result will be put into outputVarValuesArray. Returns a TRUE value if an error occurs."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationDebugCompile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EquationDebugCompile(${1:@integer debugEquationIndex}, ${2:@string equationCodeArray[]}, ${3:@string varsInputArray[]}, ${4:@string varsOutputArray[]}, ${5:@integer tabOrder})${6:;}$0"
          	description: "Converts the equation code and variable names into block form so it can be debugged. DebugEquationIndex is the previously returned value from a previous call to this function for this equation, or -1 (minus one) when this function is called for the first time with this equation. Returns a debug equation index to be used in the other equation debugging functions. TabOrder is the tab order of the text item with the equation. See the equation-based blocks for how to use this function. NOTE: DebugEquationIndex should be set to -1 if EquationDebugDispose() (below) is called for that index OR this function is called for the first time for this block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationDebugDispose"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "EquationDebugDispose(${1:@integer debugEquationIndex})${2:;}$0"
          	description: "Disposes and releases the memory used by the hidden block specified by debugEquationIndex used to debug a particular equation. This does not affect the visible equation block. NOTE: The variable used for DebugEquationIndex should be set to -1 (minus one) after this function is called so it works correctly if EquationDebugCompile(), above, is called after this call."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationDebugSetBreakpoints"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EquationDebugSetBreakpoints(${1:@integer debugEquationIndex})${2:;}$0"
          	description: "Opens a “Set Breakpoints” window so the user can click to create debugger breakpoints. Returns a True value if an error occurs."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationGetStatic"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EquationGetStatic(${1:@integer index})${2:;}$0"
          	description: "Used in an Equation type block to allow static values to be 'remembered' and used in the equation. Need to define: Real EquationStaticValues[100]; as a static variable at the top of the ModL script for the Equation block (Value library). A shorter name for this function is EqGet(). The user calls this function with an index from 0 to 99 to get the correct static value from this array to use in their equation. Used with EquationSetStatic(), below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationIncludeSet"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "EquationIncludeSet(${1:@string theIncludeName})${2:;}$0"
          	description: "Called right before one of the equationCompile functions, this puts the contents of the specified include file into the compiled equation. Call this for each include desired."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EquationSetStatic"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "EquationSetStatic(${1:@integer index}, ${2:@real value})${3:;}$0"
          	description: "Used in an Equation type block to allow static values to be 'remembered' and used in the equation. Need to define:Real EquationStaticValues[100]; as a static variable at the top of the ModL script for this Equation block. A shorter name for this function is EqSet().The user calls this function with an index from 0 to 99 to set the value in the static array. Then the user can call EquationGetStatic(index), above, to use that value in their equation."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IncludeFileEditor"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IncludeFileEditor(${1:@string includeFileName}, ${2:@integer blockNumber})${3:;}$0"
          	description: "Tags the specified include file to do the following: If you click the close box, it will not close, but instead will send a message to the block specified by blockNumber. Equation-based blocks use this for their external code editor functionality; see the equation blocks for examples. Returns 0 for success or a negative value to indicate failure."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ShowFunctionHelp"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ShowFunctionHelp(${1:@integer alpha})${2:;}$0"
          	description: "Brings up ExtendSim’s Help with a list of the functions and arguments available for the equation functions. If alpha is TRUE, brings up the alphabetical list of functions. If alpha is FALSE, brings up the “Functions by type” list."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Export"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "Export(${1:@string pathName}, ${2:@string userPrompt}, ${3:@string colDelim}, ${4:@real array[][]}, ${5:@integer rows}, ${6:@integer columns})${7:;}$0"
          	description: "Writes the contents of a one- or two-dimensional real array or data  table to the file. Rows and columns specify the portion of the array to  be written and are integers. The function assumes that columns are  delimited by the colDelim string character. Single dimension arrays  must be read as one column by n rows. The function returns the  number of rows written to the file, or 0 if there is an error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ExportText"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ExportText(${1:@string pathName}, ${2:@string userPrompt}, ${3:@string colDelim}, ${4:@string array[][]}, ${5:@integer rows}, ${6:@integer columns})${7:;}$0"
          	description: "Writes the contents of a one- or two-dimensional string array or text  table to the file. Rows and columns specify the portion of the array to  be written and are integers. The function assumes that columns are  delimited by the colDelim string character. Single dimension arrays  are treated as one column by n rows. The function returns the number of rows written to the file or 0 if there is an error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Import"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "Import(${1:@string pathName}, ${2:@string userPrompt}, ${3:@string colDelim}, ${4:@real array[][]})${5:;}$0"
          	description: "Reads the numerical data from the file into a one- or two-dimensional real array or data table, then returns the number of rows read (if an error occurs, it returns 0). The function assumes that columns  are delimited by the colDelim string character. Single dimension  arrays are read as one column by n rows. Note that you should initialize the array before using this function. Otherwise, any values  beyond what was read from the file will have the old values of the  array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ImportText"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ImportText(${1:@string pathName}, ${2:@string userPrompt}, ${3:@string colDelim}, ${4:@string array[][]})${5:;}$0"
          	description: "Reads the string data from the file into a one- or two-dimensional  string array or text table, then returns the number of rows read (if an  error occurs, it returns 0). The function assumes that columns are  delimited by the colDelim string character. Single dimension arrays  are treated as one column by n rows. Note that you should initialize  the array before using this function to prevent any values beyond  what was read from the file from having the old values of the array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CreateFolder"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CreateFolder(${1:@string pathName})${2:;}$0"
          	description: "Creates a new folder from the pathName. For Windows, he pathName must use backslashes (\) to separate folder names,  “myDrive:\ExtendSim7\myNewFolder”. For Mac OS, colons (:)  should be used, “myDrive:ExtendSim7:myNewFolder”. Returns  FALSE if successful, TRUE if there was an error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DirPathFromPathName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DirPathFromPathName(${1:@string pathName})${2:;}$0"
          	description: "Returns the folder pathname part of a complete pathname. Also see  FileNameFromPathName(), below. For example: “C:\myfolder\”."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileChoose"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "FileChoose(${1:@string defaultFilename}, ${2:@string Prompt})${3:;}$0"
          	description: "Pops up the standard file selection dialog, with the prompt and the  default file name specified, and returns the file name of the file the  user selects. This differs from the fileOpen function, which it otherwise resembles, in that it just returns the file name/path name of the  selected file without opening it. This allows the developer to use that  name however she chooses."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileClose"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "FileClose(${1:@integer fileNumber})${2:;}$0"
          	description: "Closes the file when you are finished writing or reading data to or  from the file. Files must be closed before they can be used as data in  other applications. Call FileClose in the EndSim message handler to  close files when the simulation is finished."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileDelete"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "FileDelete(${1:@string pathname})${2:;}$0"
          	description: "Deletes the file. Use this with caution because deleted files are not  recoverable."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileEndOfFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FileEndOfFile(${1:@integer fileNumber})${2:;}$0"
          	description: "TRUE if the end of file has been reached during the most recent  FileRead."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileExists"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FileExists(${1:@string pathname})${2:;}$0"
          	description: "Returns TRUE if the file exists."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileGetDelimiter"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FileGetDelimiter(${1:@integer fileNumber})${2:;}$0"
          	description: "Type of delimiter found after the most recent FileRead. Returns  FALSE if a column delimiter (such as a tab character) was found  after the data, or TRUE if a CRLF (Windows) or CR (Mac OS) row  delimiter was found. Call this immediately after FileRead to find out  whether a column delimiter, CRLF, or CR followed the data."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileGetPathName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "FileGetPathName(${1:@integer fileNumber})${2:;}$0"
          	description: "Returns the file’s path name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileInfo"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "FileInfo(${1:@string filePathName}, ${2:@integer which})${3:;}$0"
          	description: "Returns information about the file specified in the filePathName  argument. The which argument specifies what information will be  returned: 1: created date 2: modified date Dates are returned as ExtendSim date values."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileIsOpen"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FileIsOpen(${1:@string pathName})${2:;}$0"
          	description: "Returns TRUE if the file described by the pathName is open."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileNameFromPathName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "FileNameFromPathName(${1:@string pathName})${2:;}$0"
          	description: "Returns the filename part of a complete pathname.Also see DirPathFromPathName(), above, to get the path name part of a complete  path name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileNew"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FileNew(${1:@string pathname}, ${2:@string userPrompt})${3:;}$0"
          	description: "Opens a new or existing text (.txt) or HTML (.htm) file for writing  and returns a fileNumber. If the pathName is an empty string (““),  ExtendSim prompts for a file name, displaying the userPrompt string.  If the pathname cannot be found, or the Cancel button has been  clicked, FileNew returns FALSE (0). If the file is already open, it  returns the file’s fileNumber. Note that the FileNew function erases  all information from an existing file. To append data to an existing  file, use FileOpen. Call FileNew in the InitSim message handler to  create files at the beginning of a simulation."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileOpen"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FileOpen(${1:@string pathname}, ${2:@string userPrompt})${3:;}$0"
          	description: "Opens an existing text (.txt) or HTML (.htm) file for reading or  writing, and returns a fileNumber for reference. If the pathname cannot be found, or the file is unreadable, or the Cancel button has  been clicked, FileOpen returns FALSE. If the file is already open, it  returns the file’s fileNumber. If the file is written to after using  FileOpen, the new data is appended to the end of the file. Call  FileOpen in the InitSim message handler to open files at the beginning of a simulation. NOTES: If you call this function with the following strings (e.g.  *.TXT) as the pathname, it will change the types of files that the  Standard File Dialog will be looking for: *.TXT - text files, *.DAT - data files, *.ATF - Proof trace file, *.LAY -  Proof layout file.  Note that if pathname is an empty string (““), the user will be  prompted for a filename at run time."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileRead"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "FileRead(${1:@integer fileNumber}, ${2:@string colDelim})${3:;}$0"
          	description: "Reads and returns a string read from the file, up to colDelim (a column delimiter character) or to a CRLF (Windows) or CR (Mac OS)  delimiter. To ignore the column delimiter, set colDelim to an unused  character (i.e. “@”). Reading past the end of file causes an error message. You should test with FileEndOfFile before calling FileRead. See  FileGetDelimiter(), above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileRewind"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "FileRewind(${1:@integer fileNumber})${2:;}$0"
          	description: "Resets the file to its beginning so that it can be reread."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FileWrite"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "FileWrite(${1:@integer fileNumber}, ${2:@string s}, ${3:@string colDelim}, ${4:@integer tabCR})${5:;}$0"
          	description: "Writes the string or value into the file. If a number is used for s,  ModL will automatically convert the number to a string. If tabCR is  FALSE, a column delimiter character is written to the file after s; if  TRUE, a CRLF (Windows) or CR (Mac OS) delimiter is written  after s. If the column delimiter is a plus sign (“+”), no delimiter is  written between the strings."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDirectoryContents"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDirectoryContents(${1:@string path}, ${2:@stringArray stringdata}, ${3:@longarray longdata})${4:;}$0"
          	description: "This function takes two dynamic arrays as arguments, calls MakeArray() for them, and fills them with the names of all the files and subdirectories in the specified folder. The first array will contain the  names of all the files/directories, and the second will contain an integer value that will be zero for a file, and one for a folder. It returns  the number of row entries in the array. The pathname separator on a  mac is a ':', on windows a '/'."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetFileReadMachineType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetFileReadMachineType()${1:;}$0"
          	description: "Returns the type of machine the currently active model was saved  on. (This is only useful if models have been moved from one platform to another. Otherwise, it will be the same as the machine the  model is running on.) Type 2 is Windows, 1 is models built on 68k  Macs, and 4 is models built on PPC Macs."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StripLFs"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "StripLFs(${1:@integer strip})${2:;}$0"
          	description: "Sets a flag in ExtendSim that determines if the fileread functions will  strip LF characters. This flag defaults to TRUE, so you should call  StripLFs(FALSE) if you find that meaningful LF characters are missing from your data."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StripPathIfLocal"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "StripPathIfLocal(${1:@string pathName})${2:;}$0"
          	description: "Strips off the pathname if the file is in the same folder as the current  model. For example, this can remove non-portable path names from  a filename returned from FileOpen() function. If the file is in the  same folder as the model, no pathname is needed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetCloseHandle"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "INetCloseHandle(${1:@Integer inetHandle})${2:;}$0"
          	description: "Closes an InetHandle. This function will close a handle created by  InetOpenSession(), InetFTPFileFirstFile(), or InetConnect()."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetConnect"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetConnect(${1:@integer sessionHandle}, ${2:@string serverName}, ${3:@string userName}, ${4:@string passWord}, ${5:@integer connectionType})${6:;}$0"
          	description: "Creates an internet connection type. ConnectionType can be  1:FTP 2:HTTP 3:Secure http Currently FTP connections are the most useful, as we have implemented a suite of FTP Inet functions. Returns a connection handle  that needs to be closed with INetClosehandle when the connection  is complete."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFileImportText"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFileImportText(${1:@integer hFile}, ${2:@string format}, ${3:@stringArray array})${4:;}$0"
          	description: "Given an INet handle, (Most likely created by INetOpenURL,  above,) this function will import data from the file represented by  that handle into the specified array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFindNextFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFindNextFile(${1:@integer searchHandle})${2:;}$0"
          	description: "Continues an internet file search by moving the searchHandle on to  the next file. Returns a searchHandle."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPCreateDirectory"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPCreateDirectory(${1:@integer FTPHandle}, ${2:@string targetName})${3:;}$0"
          	description: "Creates a folder named targetName in the current folder."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPDeleteFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPDeleteFile(${1:@integer FTPHandle}, ${2:@string targetName})${3:;}$0"
          	description: "Deletes the path\file targetName if it is found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPExport"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPExport(${1:@integer FTPHandle}, ${2:@string fileName}, ${3:@string delim}, ${4:@real array[][]}, ${5:@integer rows}, ${6:@integer cols})${7:;}$0"
          	description: "This operates much like the Export function with the exception that  it writes to a path\file accessed via FTP."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPExportGA"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPExportGA(${1:@integer FTPHandle}, ${2:@string fileName}, ${3:@string delim}, ${4:@integer GAIndex}, ${5:@integer rows}, ${6:@integer cols})${7:;}$0"
          	description: "Writes out the contents of a Global Array to the FTP path\file."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPExportText"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPExportText(${1:@integer FTPHandle}, ${2:@string fileName}, ${3:@string delim}, ${4:@string array[][]}, ${5:@integer rows}, ${6:@integer cols})${7:;}$0"
          	description: "This operates much like the ExportText function with the exception  that it writes to a path\file accessed via FTP."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPFindFirstFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPFindFirstFile(${1:@integer FTPHandle}, ${2:@string searchFile}, ${3:@integer flags})${4:;}$0"
          	description: "Starts a search for files in the default folder. An empty string will find  the first file in the current folder with any filename. Returns a search  handle that needs to be closed with closehandle when the search is  complete. Currently, flags should be set to zero."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPGetCurrentDirectory"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "INetFTPGetCurrentDirectory(${1:@integer FTPHandle})${2:;}$0"
          	description: "Returns the path to the current FTP directory as a string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPGetFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPGetFile(${1:@integer FTPHandle}, ${2:@string targetName}, ${3:@string fileName}, ${4:@integer failIfExists}, ${5:@integer fileAttributes}, ${6:@integer flags})${7:;}$0"
          	description: "Copies a file from the remote site to the local machine. The path\targetname specifies the name of the file to be retrieved. The path\filename specifies the local name where the file should be put.  FailIfExists determines what happens if the local file already exists.  Currently, flags and file attributes should be set to zero."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPImport"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPImport(${1:@integer FTPHandle}, ${2:@string fileName}, ${3:@string delim}, ${4:@real array[][]})${5:;}$0"
          	description: "This operates much like the Import function with the exception that  it reads a path\file accessed via FTP."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPImportGA"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPImportGA(${1:@integer FTPHandle}, ${2:@string targetName}, ${3:@integer format}, ${4:@integer GAIndex})${5:;}$0"
          	description: "Reads the contents of an FTP path\file into the Global Array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPImportText"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPImportText(${1:@integer FTPHandle}, ${2:@string fileName}, ${3:@string delim}, ${4:@string array[][]})${5:;}$0"
          	description: "This operates much like the ImportText function with the exception  that it reads a path\file accessed via FTP."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPPutFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPPutFile(${1:@integer FTPHandle}, ${2:@string fileName}, ${3:@string targetName}, ${4:@integer flags})${5:;}$0"
          	description: "Copies a local file to the internet. Path\fileName specifies the name  of the local file. Path\targetName specifies the desired name of the  file on the internet. Currently, flags should be set to zero."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPRemoveDirectory"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPRemoveDirectory(${1:@integer FTPHandle}, ${2:@string targetName})${3:;}$0"
          	description: "Deletes the specified directory path\targetName from the site."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPRenameFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPRenameFile(${1:@integer FTPHandle}, ${2:@string targetName}, ${3:@string newName})${4:;}$0"
          	description: "Renames the file path\targetName to newName."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetFTPSetCurrentDirectory"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetFTPSetCurrentDirectory(${1:@integer FTPHandle}, ${2:@string targetName})${3:;}$0"
          	description: "Sets the current directory to path\targetName."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetGetFindFileInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetGetFindFileInfo(${1:@integer which})${2:;}$0"
          	description: "Returns info about the current file in the search. Currently, which:1  is the only allowed input and returns TRUE if a directory, false if a  file."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetGetFindFileName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "INetGetFindFileName()${1:;}$0"
          	description: "Returns the name of the current file in the search."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetOpenSession"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetOpenSession()${1:;}$0"
          	description: "Starts an Internet session. Returns a session handle that needs to be  closed with closehandle when the session is complete."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "INetOpenURL"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "INetOpenURL(${1:@integer session}, ${2:@string url})${3:;}$0"
          	description: "Given a session handle, (created by the INetOpenSession function,)  and a URL, this function will open a connection to the site corresponding to that URL."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCAdvise"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCAdvise(${1:@integer conversation}, ${2:@string item}, ${3:@integer blockNumber}, ${4:@string dialogItem}, ${5:@integer rowStart}, ${6:@integer colStart}, ${7:@integer rowEnd}, ${8:@integer colEnd})${9:;}$0"
          	description: "(Windows only) Starts a DDE Advise loop with the application that  is the other side of the specified conversation. This function will  return an advise loop id, which needs to be used in the IPCStopAdvise Function when the advise loop is to be terminated."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCCheckConversation"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCCheckConversation(${1:@integer conversation})${2:;}$0"
          	description: "Checks the validity of an IPC conversation on Windows. (It always  returns TRUE on the Mac.)  A TRUE value is returned if the conversation is valid."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCConnect"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCConnect(${1:@string serverName}, ${2:@string topic})${3:;}$0"
          	description: "Initiates an IPC conversation between ExtendSim and a server. The  serverName argument is the DDE or AppleEvents name of the server  you are trying to connect to. (This name needs to be in the format  that is appropriate for the platform. For example, Excel on Windows  expects “Excel”, on the Mac OS it expects “XCEL”.) The topic argument is typically the keyword “SYSTEM.” You can also use the  name of the document you want to communicate with, if you want  the conversation to target a specific model. If successfully connected,  this function returns an integer value that is used in the other IPC  functions as the conversation identifier. If unsuccessful, it returns a  zero. Note: the IPCDisconnect function must be used with IPCConnect so that communication is terminated as soon as it is no longer  required."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCDisconnect"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCDisconnect(${1:@integer conversation})${2:;}$0"
          	description: "Disconnects the specified conversation. This function is necessary  when using IPCConnect, and should be called immediately when  communication is no longer required. Returns a zero if the disconnection was successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCExecute"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCExecute(${1:@integer conversation}, ${2:@string executeData}, ${3:@string item})${4:;}$0"
          	description: "Sends a command to be executed by the server in the specified conversation. The executeData argument is the command to be sent. The  item argument is currently not used and should be set to a blank  string (“”). This function returns a zero if successful, a -1 for a general error, a -2 for a time-out error, a -3 for an invalid connection,  and a -4 for an event not handled by the server."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCGetDocName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "IPCGetDocName()${1:;}$0"
          	description: "Returns a string that contains the name of the last file opened with  the IPCOpenfile() function. This is mostly used to return the name  of a file that the user selected when an empty string (“”) was passed  into the IPCOpenfile function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCLaunch"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCLaunch(${1:@string appName}, ${2:@integer minimized})${3:;}$0"
          	description: "Launches the application appName and minimizes it if minimized is  TRUE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCOpenFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCOpenFile(${1:@string fileName})${2:;}$0"
          	description: "Opens the file (for example, a spreadsheet) in the Finder using DDE (Windows) or AppleEvents (Mac OS). This function is equivalent to  the user double-clicking a file’s icon: it causes both the file and the  file’s application to open. The single argument is a string which is  the file name. Note that this function tells the System to open the  file (that is, to launch the named application or document) and is  not at all related to ExtendSim’s FileOpen function. This function  will accept a blank string (“”) in the fileName argument which will  cause a File Open dialog to appear. The user is then prompted to  select the file which is to be opened. The function returns zero if  successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCPoke"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCPoke(${1:@integer conversation}, ${2:@string pokeData}, ${3:@string item})${4:;}$0"
          	description: "Sends data to the server in the specified conversation. The pokeData  argument is the data to be sent. The item argument indicates where  the data is to be put. For example, in Excel the item argument could  be “R1C1” indicating that the data is to be sent to the cell at row 1  column 1. Note that the syntax of the item argument is dependent  on the server. This function returns a zero if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCPokeArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCPokeArray(${1:@integer conversation}, ${2:@string item}, ${3:@string delim}, ${4:@string arraydata})${5:;}$0"
          	description: "(Windows only) Pokes an array of data. The data from the dynamic  array data will be poked to the target application. The return value  will be zero for success, and nonzero for failure."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCRequest"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "IPCRequest(${1:@integer conversation}, ${2:@string item})${3:;}$0"
          	description: "Returns data from the server in the specified conversation. The item  argument indicates where the data is to be taken from. For example,  in Excel the item argument could be “R1C1” indicating that the  data is to be retrieved from the cell at row 1 column 1. Note that the  syntax of the item argument is dependent on the server."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCRequestArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCRequestArray(${1:@integer conversation}, ${2:@string item}, ${3:@string delim}, ${4:@string arraydata})${5:;}$0"
          	description: "(Windows only) Requests an array of data. The dynamic array data  will be filled with the results from the request. The return value will  be the number of rows of data that were returned."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCSendCalcReceive"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "IPCSendCalcReceive(${1:@integer product}, ${2:@real sendValue}, ${3:@integer sendRow}, ${4:@integer sendCol}, ${5:@string funcName}, ${6:@integer receiveRow}, ${7:@integer receiveCol})${8:;}$0"
          	description: "Sends sendValue to the sendRow, sendCol of a spreadsheet file that is  already open. It then executes the macro called funcName, or just  recalculates if funcName is an empty string. The function returns the  value at receiveRow, receiveCol. Product specifies the spreadsheet you  are communicating with: use 1 for Microsoft Excel or 2 for Lotus  123. See also the function IPCSpreadSheetName."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCSetTimeOut"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "IPCSetTimeOut(${1:@integer timeOut})${2:;}$0"
          	description: "Sets the Timeout value for the various IPC functions. This determines how long ExtendSim will wait for the other application to  respond to IPC requests. Values are in milliseconds. The default  value is 10000. Putting a –1 into this parameter will request Async  behavior."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCServerAsync"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "IPCServerAsync(${1:@integer async})${2:;}$0"
          	description: "If async is TRUE, sets a flag in ExtendSim so that ExtendSim will  return from further Execute messages immediately instead of waiting for the Execute messages to complete. Useful when used in an  Execute message from another application so that the other application can continue to do other tasks while ExtendSim calculates."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCSpreadSheetName"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "IPCSpreadSheetName(${1:@string spreadSheetName})${2:;}$0"
          	description: "Used to establish a default spreadSheetName, and is only used in conjunction with the IPCSendCalcReceive function. The IPCSendCalcReceive function does not take a spreadsheet name as an argument,  and Lotus 1-2-3 requires a specific spreadsheet name for DDE communication on Windows."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IPCStopAdvise"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IPCStopAdvise(${1:@integer conversation}, ${2:@integer adviseLoopID}, ${3:@integer block})${4:;}$0"
          	description: "(Windows only) Stops the specified advise loop within the specified  block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "UpdatePublishers"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "UpdatePublishers()${1:;}$0"
          	description: "(Mac OS only) Forces an update of publisher information, for all  publishers in the model. Note that this departs from Apple’s standard interface, where publishers are only updated when the model is  saved."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetHelpContext"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGetHelpContext(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer dispID})${4:;}$0"
          	description: "Returns the Help context value of the specified dispID."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEActivate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEActivate(${1:@integer blockNumber}, ${2:@string dialogItem})${3:;}$0"
          	description: "Activates the specified embedded object. DialogItem is the dialog  variable name in quotes. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEAddRef"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEAddRef(${1:@integer interfacePtr})${2:;}$0"
          	description: "Addrefs the interface specified. Returns the refcount."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEArrayParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEArrayParam(${1:@array data}, ${2:@integer variants})${3:;}$0"
          	description: "Puts the data in the array 'data' into a safeArray, packaged as a  parameter for an Invoke call. The variants argument determines  whether each data element will be packaged in a separate variant or  not."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEArrayParamVariableColumns"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEArrayParamVariableColumns(${1:@short hNum}, ${2:@array datatableName}, ${3:@integer numCols}, ${4:@integer variants})${5:;}$0"
          	description: "Specifies that the datatable array passed in will be used as an argument for the next OLEInvoke call.  The numCols argument will  define how many columns the function defines the data as containing."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEArrayResult"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEArrayResult(${1:@array data})${2:;}$0"
          	description: "Retrieves the SafeArrray result data from an Invoke call, putting the  data into the array 'data'."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEArrayResultVariableColumns"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEArrayResultVariableColumns(${1:@array datatableName}, ${2:@integer numCols})${3:;}$0"
          	description: "Specifies that the datatable array passed in will be filled with the  result of the last OLEInvoke call.  The numCols argument will  define how many columns the function defines the data as containing."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLECreateObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLECreateObject(${1:@string objectReference})${2:;}$0"
          	description: "This function is the starting point for OLE Automation. It will create an OLE object, or provide an interface to an application if it is  already running, and return an Idispatch interface to that object that  can be used with the OLEDispatch calls listed below to allow the  user to control other applications via OLE Automation. The object  reference string is the registry key associated with the object you  wish to embed. (As an example, Excel would be excel.application.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDBParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDBParam(${1:@integer DBIndex}, ${2:@integer tableIndex}, ${3:@integer variants})${4:;}$0"
          	description: "Passes the contents of the specified DB table as a safe array parameter."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDBResult"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDBResult(${1:@integer DBIndex}, ${2:@integer tableIndex})${3:;}$0"
          	description: "Fills the specified database table with the results of an Invoke or  ParameterGet call that was just made."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDeactivate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDeactivate(${1:@integer blockNumber}, ${2:@string dialogItem})${3:;}$0"
          	description: "Deactivates the specified embedded object. DialogItem is the dialog  variable name in quotes. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchGetCLSID"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchGetCLSID(${1:@integer dispHandle}, ${2:@integer progID})${3:;}$0"
          	description: "Returns the CLSID as a string. ProgID is FALSE to return the  CLSID, or TRUE to return the program ID."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchGetDispatchName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchGetDispatchName(${1:@integer dispHandle}, ${2:@integer which})${3:;}$0"
          	description: "Same as the function OLEGetDispatchName below, except it takes a  dispatchHandle instead of a blocknumber and a dialog item name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchGetDispID"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchGetDispID(${1:@integer dispHandle}, ${2:@string theName})${3:;}$0"
          	description: "Given a function/variable name, returns the DispID. Same as the  function OLEGetDispID below, except it is expecting a dispatchHandle instead of a block number and dialog item name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchGetDoc"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchGetDoc(${1:@integer IDispatchHandle}, ${2:@string returnDoc[]}, ${3:@integer dispID}, ${4:@integer which})${5:;}$0"
          	description: "This function is a Dispatch handle version of the OLEGetDoc()  function. For a description of the IDispatchHandle argument, see  the OLEDispatchGetHelpContext() function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchGetFuncIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchGetFuncIndex(${1:@integer dispHandle}, ${2:@integer dispID})${3:;}$0"
          	description: "Same as the function OLEGetFuncIndex, except it takes a dispatchHandle instead of a blocknumber and a dialog item name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchGetFuncInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchGetFuncInfo(${1:@integer dispHandle}, ${2:@integer funcIndex}, ${3:@integer which})${4:;}$0"
          	description: "Same as the function OLEGetFuncInfo, except it takes a dispatchHandle instead of a blocknumber and a dialog item name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchGetHelpContext"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchGetHelpContext(${1:@integer IDispatchHandle}, ${2:@integer dispID})${3:;}$0"
          	description: "This uses an Idispatch handle, usually returned by the OLEDispatchResult, or OLECreateObject functions defined above. This  handle will be the Dispatch interface to an object that is either associated with an embedded object on the worksheet, or in the block  dialog, or has been created via OLE Automation in an remote application. Many embedded objects are simple objects that will not have  methods that return Idispatch handles on other objects, but some,  like an embedded Excel worksheet, for example, contain ‘Subobjects’  that will need to be referenced in this way. See OLEDispatchResult()  and OLECreateObject().  Same as OLEGetHelpContext(), except uses a handle."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchGetNames"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchGetNames(${1:@integer IDispatchHandle}, ${2:@Str31 names[]}, ${3:@integer dispID})${4:;}$0"
          	description: "See OLEDispatchGetHelpContext(). Same as OLEGetNames(),  except uses a handle."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchInvoke"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchInvoke(${1:@integer IdispatchHandle}, ${2:@integer dispID})${3:;}$0"
          	description: "See OLEDispatchGetHelpContext(). Same as OLEInvoke(), except  uses a handle."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchParam(${1:@integer dispatchHandle})${2:;}$0"
          	description: "Adds a DispatchHandle to the argument list for the next Invoke call.  Note: arguments are listed in back to front order. Returns FALSE if  successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchPropertyGet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchPropertyGet(${1:@integer IdispatchHandle}, ${2:@integer dispID})${3:;}$0"
          	description: "See OLEDispatchGetHelpContext(). Same as OLEPropertyGet(),  except uses a handle."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchPropertyPut"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchPropertyPut(${1:@integer IdispatchHandle}, ${2:@integer dispID})${3:;}$0"
          	description: "See OLEDispatchGetHelpContext(). Same as OLEPropertyPut(),  except uses a handle."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEDispatchResult"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEDispatchResult()${1:;}$0"
          	description: "Returns an IdispatchHandle from the last Invoke call. (If a return  value is available.) This handle can be used in the other OLEDispatch calls listed above. This handle will be the Dispatch interface to  an object that is associated with an embedded object on the worksheet, or in the block dialog. Many embedded objects are simple  objects that will not have methods that return dispatch handles on  other objects, but some, like an embedded Excel worksheet, for  example, contain ‘Subobjects’ that will need to be referenced in this  way."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGAParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGAParam(${1:@integer arrayIndex}, ${2:@integer variants})${3:;}$0"
          	description: "Copies the data in the global array defined by arrayindex into a SafeArray, packaged as a paramaeter for an Invoke call. The variants  argument determines whether each data element will be packaged in  a separate variant or not."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGAResult"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGAResult()${1:;}$0"
          	description: "Retrieves the SafeArrray result data from an Invoke call, putting the  data into the global array referred to be arrayIndex."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetCLSID"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGetCLSID(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer progID})${4:;}$0"
          	description: "Returns the CLSID as a string. ProgID is false to return the CLSID,  or TRUE to return the program ID."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetDispatchName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "OLEGetDispatchName(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer dispID})${4:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Returns the name  associated with the specified dispID."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetDispID"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGetDispID(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@string theName})${4:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Returns the Dispatch ID for the function/variable theName."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetDoc"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGetDoc(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@string returnDoc[]}, ${4:@integer dispID}, ${5:@integer which})${6:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Returns the internal documentation from the type library in string array returnDoc.  returnDoc will be resized as needed if the text is larger than a single  string. This function accesses text that is in the objects Type Library.  What information is available, and whether any is available, is object  dependent. Which takes the following values. 0: name (DispID property/Method name) 1: doc (Any available Documentation on the DispID.) 2: file name (FileName of the help file associated with the dispID.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetFuncIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGetFuncIndex(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer dispID})${4:;}$0"
          	description: "Returns the function Index used in OLEGetFuncInfo that corresponds to the dispID."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetFuncInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGetFuncInfo(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer index}, ${4:@integer which})${5:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Returns function  information for the function specified by index. Implementation of  this function is object specific, so your results will vary dependent on  how the developers of the object have implemented it. if which is 0: INVOKEKIND returns 1 for INVOKE_FUNC returns 2 for INVOKE_PROPERTYGET returns 4 for INVOKE_PROPERTYPUT returns 8 for INVOKE_PROPERTYPUTREF if which is 1: cParams returns Count of total number of parameters if which is 2 : cParamsOpt returns Count of optional parameters if which is 3 : returns DispID (sometimes called memberID). Note that index is not the same as the dispID. It is just a sequential  index value from 0 to n-1 where n is the number of functions supported by the object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetGUID"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "OLEGetGUID()${1:;}$0"
          	description: "Pops up the standard insert item dialog, and returns the GUID of  the object you select as a string. The objects that appear on the standard insert item dialog are just those objects that have been defined  as ‘Insertable’ in the registry, and will not necessarily include all of  the objects that you can use with ExtendSim."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetInterface"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGetInterface(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer whichInterface})${4:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Returns a pointer  to an interface on the object. The whichInterface argument currently only supports a zero value for the IDispatchInterface."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetNames"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGetNames(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@Str31 names[]}, ${4:@integer dispID})${5:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Puts the name of  the function/variable into the first row of the dynamic array names.  The later rows contain the names of any arguments to the function.  The return value is the number of names returned."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEGetRefCount"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEGetRefCount(${1:@integer interfacePtr})${2:;}$0"
          	description: "Returns the RefCount on the Specified interfacePtr. Note that this  does nothing more than an AddRef and a Release, so there is no reason to call this routine if you are already using addref and release."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEInsertLicensedObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEInsertLicensedObject(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@strng guid}, ${4:@integer xPixel}, ${5:@integer yPixel}, ${6:@string licString})${7:;}$0"
          	description: "Same as the OLEInsertObject function, below, with the exception of  the last argument, which allows you to pass a license string to the  object to be inserted. This is used for activeX objects that allow  licensed execution as runtimes. See the function OLERequestLicKey  for additional information."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEInsertObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEInsertObject(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@string guid}, ${4:@integer xPos}, ${5:@integer yPos})${6:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Inserts an object  into the indicated location. If you specify the dialog item, and the  block number, it will be inserted into that dialog item, ignoring xPos  and yPos. If the dialog item name is an empty string, the object will  be inserted onto the active worksheet at pixel location xPos and yPos.  If xPos and yPos are both 1, the item will be inserted at the 'current'  position on the worksheet (i.e. the last mouse click or the last created  block position)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEInsertObjectFromFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEInsertObjectFromFile(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@string guid}, ${4:@integer xPixel}, ${5:@integer yPixel}, ${6:@string licString}, ${7:@string filePath})${8:;}$0"
          	description: "This function inserts an Object into an embedded object dialog  item, or onto the worksheet, like OLEInsertObject.  It takes the  additional Argument licString, the usage of which is defined in  OLEInsertLicensedObject.  It also takes a filepath Argument, which  allows the coder to define an object based on a file, as is done in the  standard Object insertion dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEInvoke"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEInvoke(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer dispID})${4:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Invokes (calls) the  method/variable specified by dispID. You must call Param functions  to set up the arguments to the method. Returns a WIN API error  code if it fails, zero if success."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLELongParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLELongParam(${1:@integer value})${2:;}$0"
          	description: "Adds an integer value to the argument list for the next Invoke call.  Note: Arguments are listed in back to front order. Returns FALSE if  successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLELongResult"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLELongResult()${1:;}$0"
          	description: "Returns an integer value from the last Invoke call, if a return value is  available."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEObjectIsRegistered"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEObjectIsRegistered(${1:@string clsid})${2:;}$0"
          	description: "Checks to see if a specific CLSID is already registered. Returns  TRUE if the CLSID is already in the registry and FALSE if it is not."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEPropertyGet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEPropertyGet(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer dispID})${4:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Gets the property  specified by dispID. You must call Result functions to retrieve the  value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEPropertyPut"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEPropertyPut(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer dispID})${4:;}$0"
          	description: "DialogItem is the dialog variable name in quotes. Sets the property  specified by dispID. You must call Param functions to set up the  arguments to the method."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLERealParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLERealParam(${1:@Real value})${2:;}$0"
          	description: "Adds a real value to the argument list for the next Invoke call. Note:  Arguments are listed in back to front order. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLERealResult"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "OLERealResult()${1:;}$0"
          	description: "Returns a real value from the last Invoke call, if a return value is  available."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLERelease"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLERelease(${1:@integer interfacePtr})${2:;}$0"
          	description: "Releases the interface pointer specified. Returns the refCount."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEReleaseInterface"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEReleaseInterface(${1:@integer interfacePtr}, ${2:@integer whichInterface})${3:;}$0"
          	description: "Releases the interface pointer returned by OLEGetInterface. Returns  FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLERemoveObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLERemoveObject(${1:@integer blockNumber}, ${2:@string dialogItem})${3:;}$0"
          	description: "Removes the OLE object from the dialog item."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLERequestLicKey"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "OLERequestLicKey(${1:@string guid})${2:;}$0"
          	description: "This function requests a license key from a licensed activeX control  on your machine. This can be used with OLEInsertLicensedObject,  above, to allow the user to retrieve the license key to be used when  inserting a licensed runtime activeX Control."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLESetNamedParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLESetNamedParam(${1:@integer paramID})${2:;}$0"
          	description: "Specifies that the first named parameter is the parameter ParamID.  If the Idispatch interface you are using specifies named parameters,  then they are the first parameters by definition. All this function  does is specify which named parameters you are using. The first time  you call it, it specifies what the paramID of the first named parameter is, the second time the second, and so on."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEStringParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEStringParam(${1:@string value})${2:;}$0"
          	description: "Adds a string value to the argument list for the next Invoke call.  Note: Arguments are listed in back to front order. Returns FALSE if  successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEStringResult"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "OLEStringResult()${1:;}$0"
          	description: "Returns a string value from the last Invoke call, if a return value is  available."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLESupressInvokeErrors"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OLESupressInvokeErrors(${1:@integer supressErrors})${2:;}$0"
          	description: "Used to stop those pesky error messages from appearing during an  invoke of an OLE object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEVariantParam"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OLEVariantParam(${1:@string value})${2:;}$0"
          	description: "Adds a variant pointer value to the argument list for the next invoke  call. Note: Arguments are listed in back to front order."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OLEVariantResult"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "OLEVariantResult(${1:@integer which})${2:;}$0"
          	description: "Returns a string value from the specified variant pointer argument of  the last Invoke call. Which specifies which of the arguments of the  invoke call you are referring to, it would be one for the first one  entered, two for the second, and so on (If the specified argument  was a variant pointer argument.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WinRegSvr32"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "WinRegSvr32(${1:@integer registerObject}, ${2:@string fileName}, ${3:@string dir})${4:;}$0"
          	description: "This function runs the RegSvr32 command line tool used is used to  register .dll files as components in the windows registry. The registerObject integer is a flag that determines if you want to register (true) or unregister (false) the object. FileName is the name of the dll  file. Dir is the path name to the directory containing the dll."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MailSlotClose"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MailSlotClose(${1:@integer index})${2:;}$0"
          	description: "Closes the specifed mailslot. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MailSlotCreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MailSlotCreate(${1:@string theSlotName})${2:;}$0"
          	description: "Creates a mailslot with the specified name. Returns the index number of the mailslot, or a zero if the call failed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MailSlotRead"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "MailSlotRead(${1:@integer index})${2:;}$0"
          	description: "Reads the next message from the specified mailslot. This function  will return an empty string if there are no messages waiting."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MailSlotSend"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MailSlotSend(${1:@string theComputerName}, ${2:@string theSlotName}, ${3:@string message})${4:;}$0"
          	description: "Sends a message to the specified mailslot(s). TheComputerName field  specifies exactly which machine to send the message to. If this field is  a star "*", this message will be broadcast to all mailslots with the  specified mailslot name in the primary domain of the sending computer. If this field is a domain name, the message will be sent to all  mailslots with the specified name in that domain. The SlotName  field must contain the name of the specified mailslot, and cannot be  wildcarded. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCBindColumn"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCBindColumn(${1:@integer statement}, ${2:@integer whichCol}, ${3:@string data[]})${4:;}$0"
          	description: "Associates an array with a column in the specific dataset. WhichCol  defines which column of the dataset you wish to bind the array data  with. The contents of that column will be different dependent on  dataset, and how it was derived. This does not actually retrieve the  data, just specifies where the data will go when it is retrieved.  Returns FALSE (0) if unsuccessful. (See ODBCFetchRows below.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCColAttribute"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCColAttribute(${1:@integer statement}, ${2:@integer column}, ${3:@integer which})${4:;}$0"
          	description: "Returns the value of the specified attribute of the specified column.  This function just filters directly through to SQLColAttribute,  check the ODBC documentation for additional information. This  function can be called as soon as there is a defined dataset."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCColumns"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCColumns(${1:@integer connection})${2:;}$0"
          	description: "Executes a standard query that returns a dataset containing the  names of all the valid columns in the data source. Returns a Statement Handle. (Note: it is important to free all statements before disconnecting the connection, otherwise, the disconnection may fail.)  Returns FALSE (0) if the query fails. See your ODBC documentation (SQLColumns) for a list of the meanings of the columns of the  resulting dataset."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCColumns2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCColumns2(${1:@integer hdbc}, ${2:@string catalog}, ${3:@string schema}, ${4:@string table}, ${5:@string column})${6:;}$0"
          	description: "This function works the same as the ODBCColumns function  except that it adds four string arguments. See your ODBC documentation (SQLColumns) for additional information about the  meaning and use of these arguments. Please note that the arguments  are strings, so you cannot pass in the NULL values that are defined  in the SQLColumns specification. For this function, we've defined  an empty string '' to be interpreted as a NULL, so just use empty  strings for unused arguments where NULL is normally used."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCConfigDataSource"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ODBCConfigDataSource(${1:@integer fRequest}, ${2:@string szDriver}, ${3:@string szAttributes})${4:;}$0"
          	description: "Calls the Windows API SQLConfigDataSource() function with the  entered arguments."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCConnect"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCConnect(${1:@string szDBName}, ${2:@string szUserName}, ${3:@string szPassword})${4:;}$0"
          	description: "Connects to an ODBC source. Returns a connection Handle.  (Note: It is very important to disconnect this connection before  quitting ExtendSim, otherwise a crash may result.) Returns FALSE (0) if the connection fails. You need to have created a valid ODBC  Data Source to connect with before using this call."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCConnectName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "ODBCConnectName()${1:;}$0"
          	description: "Returns the string name of the current connection."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCCountRows"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCCountRows(${1:@integer connection}, ${2:@string tableName}, ${3:@string columnName}, ${4:@string whichCondition})${5:;}$0"
          	description: "Uses the SQL COUNT statement to return the number of rows in  the specified column of the specified table.   The statement executed  will be SELECT COUNT (ColumnName) FROM 'tableName'  WHERE whichCondition.  ColumnName will default to ‘*’ if it is  blank. WhichCondition will specify a selection condition, if it is  blank, all rows will be counted. See your SQL documentation for  additional information about this query."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCCreateTable"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCCreateTable(${1:@Integer connection}, ${2:@string tableName}, ${3:@stringarray columnNames}, ${4:@string columnTypes[]})${5:;}$0"
          	description: "This function will create a table in the specified database with columns named as the values in the columnnames array, and types as  specified in the columntypes array. Returns FALSE (0) if unsuccessful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCDriverConnect"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCDriverConnect(${1:@string szConnectString})${2:;}$0"
          	description: "Connects to an ODBC source, putting up a system source selection  dialog. Returns a connection Handle. (Note: it is important to disconnect this connection before quitting ExtendSim, otherwise a  crash may result.) Returns FALSE (0) if the connection fails. You  need to have created a valid ODBC Data Source to connect with  before using this call."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCDisconnect"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCDisconnect(${1:@integer connection})${2:;}$0"
          	description: "Disconnects the specified connection. Returns FALSE (0) if unsuccessful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCExecuteArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCExecuteArray(${1:@integer hdbc}, ${2:@string array[]})${3:;}$0"
          	description: "See the description for ODBCExecuteQuery() below. This function  allows a query that contains more than 255 characters by allowing  you to pass in an array of strings instead of just one string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCExecuteQuery"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCExecuteQuery(${1:@integer connection}, ${2:@string theQuery})${3:;}$0"
          	description: "Executes the specified SQL query string. Returns a Statement Handle. (Note: it is very important to free all statements before disconnecting the connection, otherwise the disconnection may fail.)  Returns FALSE (0) if the query fails."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCFetchRows"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCFetchRows(${1:@integer statement})${2:;}$0"
          	description: "Fetches the data from the dataset, and stores it in the variables that  have been bound by ODBCBindColumn. Returns the number of  rows. (See ODBCBindColumn above.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCFreeStatement"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCFreeStatement(${1:@integer statement})${2:;}$0"
          	description: "Frees the specified Statement Handle. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCInsertRow"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCInsertRow(${1:@Integer connection}, ${2:@string tableName}, ${3:@string columnNames[]}, ${4:@string values[]})${5:;}$0"
          	description: "This Function add a row of data with the specified values to the  indicated table. Returns FALSE (0) if unsuccessful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCKeyword"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCKeyword(${1:@string word})${2:;}$0"
          	description: "Returns a TRUE value if the string word is an ODBC reserved keyword. Otherwise returns a FALSE value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCNumResultCols"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCNumResultCols(${1:@integer statement})${2:;}$0"
          	description: "Returns the number of resulting columns in the specified dataset.  This function will only return useful information after an ODBCExecuteQuery, ODBCTables, or ODBCColumns call has established a dataset."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCSetRows"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCSetRows(${1:@integer connection}, ${2:@string tableName}, ${3:@string columnName}, ${4:@string IDName}, ${5:@string dataArray[]}, ${6:@string IDArray[]})${7:;}$0"
          	description: "Copies the data from the data array into the columnName array,  using the IDArray values to determine which cell each item goes  into. That is, the variable named in the IDName field will be compared to the values in the IDArray array, and each row of the  columnName variable will be updated based on the database row  selected by the values in the IDArray array. Returns FALSE (0) if  unsuccessful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCSetRowsType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCSetRowsType(${1:@linteger hdbc}, ${2:@string tableName}, ${3:@string colName}, ${4:@string IDName}, ${5:@string y[]}, ${6:@string x[]}, ${7:@integer varTypeX}, ${8:@integer varTypeY})${9:;}$0"
          	description: "See the description for the ODBCSetRows function. Whereas the  SetRows function defaults the types of the values of both string  arrays to SQL_CHAR, the SetRowsType function allows you to  specify the types of the variables in the y and x arrays. Type values  are: SQL_UNKNOWN_TYPE 0, SQL_CHAR 1, SQL_NUMERIC 2,  SQL_DECIMAL 3, SQL_INTEGER 4, SQL_SMALLINT 5,  SQL_FLOAT 6, SQL_REAL 7, SQL_DOUBLE 8,  SQL_DATETIME 9, SQL_VARCHAR 12, SQL_TYPE_DATE  91, SQL_TYPE_TIME 92, SQL_TYPE_TIMESTAMP 93."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCSuccessInfo"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ODBCSuccessInfo(${1:@integer ShowSuccessInfo})${2:;}$0"
          	description: "Sets a flag that determines if warning error messages are shown, or  not."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ODBCTables"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ODBCTables(${1:@integer connection})${2:;}$0"
          	description: "Executes a standard query that returns a dataset containing the  names of all the valid tables in the data source. Returns a Statement  Handle. (Note: it is very important to free all statements before disconnecting the connection, otherwise the disconnection may fail.)  Returns FALSE (0) if the query is unsuccessful. See your ODBC  documentation (SQLTables) for a list of the meanings of the columns of the resulting dataset."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SerialRead"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "SerialRead(${1:@integer port})${2:;}$0"
          	description: "Returns a string if there is any read data, or an empty string if data is  not available. If there are more than 255 characters in the serial port  buffer, it returns the first 255 characters. Successive SerialRead calls  will return the rest of the characters in the buffer."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SerialReset"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SerialReset(${1:@integer port}, ${2:@integer baud}, ${3:@real stop}, ${4:@integer parity}, ${5:@integer data}, ${6:@integer xonXoff})${7:;}$0"
          	description: "Sets up one of the serial ports for communications. baud can be 300,  600, 1200, 2400, 4800, 9600, 19200, or 57600; stop can be 1, 1.5,  or 2; parity is 0 for no parity, 1 for odd parity, or 2 for even parity;  data can be 5, 6, 7, or 8 data bits. Set xonXoff to TRUE for XON/ XOFF handshaking or FALSE for CTS handshaking."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SerialWrite"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SerialWrite(${1:@integer port}, ${2:@string s})${3:;}$0"
          	description: "Writes the string s to the serial port buffer."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLBoolCFunction"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DLLBoolCFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns a Boolean (translated into an integer by ExtendSim). Accepts a variable  argument list. Assumes a C calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLBoolPascalFunction"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DLLBoolPascalFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns a Boolean (translated into an integer by ExtendSim). Accepts a variable  argument list. Assumes a Pascal calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLBoolStdcallFunction"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DLLBoolStdcallFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns a Boolean (translated into an integer by ExtendSim). This function is the  same as the other DLL functions except it assumes a StdCall calling  convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLCtoPString"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DLLCtoPString(${1:@string theString})${2:;}$0"
          	description: "Converts a C string to a V string that is useable by ModL, as ExtendSim/ModL internally can use only V (Pascal) strings. In some cases  pre-established DLLs will expect and return C format strings in the  passed parameter string pointer, and this function can convert the  string type safely within the pointer space. See DLLPtoCString  below to convert back to C strings."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLDoubleCFunction"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DLLDoubleCFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns a real.  Accepts a variable argument list. Assumes a C calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLDoublePascalFunction"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DLLDoublePascalFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns a real.  Accepts a variable argument list. Assumes a Pascal calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLDoubleStdcallFunction"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DLLDoubleStdcallFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns a real.  This function assumes a StdCall calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLLoadLibrary"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DLLLoadLibrary(${1:@string pathName})${2:;}$0"
          	description: "Loads the specified library. This is for people who need to access  routines in a DLL that is not present in the Extensions folder. After  loading the library, attempts to access DLL routines that are in that  library should succeed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLLongCFunction"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DLLLongCFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns an integer. Accepts a variable argument list. Assumes a C calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLLongPascalFunction"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DLLLongPascalFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns an integer. Accepts a variable argument list. Assumes a Pascal calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLPtoCString"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DLLPtoCString(${1:@string theString})${2:;}$0"
          	description: "Converts a V string to a C string that is useable by a DLL, as  ExtendSim/ModL internally can use only V (Pascal) strings. In some  cases pre-established DLLs will expect and return C format strings in  the passed parameter string pointer, and this function can convert  the string type safely within the pointer space. See DLLCtoPString  above to convert back to V strings."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLLongStdCallFunction"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DLLLongStdCallFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns an integer. This function assumes a StdCall calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLMakeProcInstance"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DLLMakeProcInstance(${1:@string procName})${2:;}$0"
          	description: "Returns the ProcAddress expected by the other calls as an argument.  Requires a procedure name. This function will search all open libraries for the named procedure, so it is advisable to call it once, and save  the returned value. Function will return a zero if procName was not  found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLVoidCFunction"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DLLVoidCFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns nothing.  Accepts a variable argument list. Assumes a Pascal calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLVoidPascalFunction"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DLLVoidPascalFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns nothing.  Accepts a variable argument list. Assumes a Pascal calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLVoidStdcallFunction"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DLLVoidStdcallFunction(${1:@integer procAddress, ...})${2:;}$0"
          	description: "Calls a DLL routine referenced by procAddress and returns nothing.  This function assumes a StdCall calling convention."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLXCMD"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DLLXCMD(${1:@string procName}, ${2:@integer type})${3:;}$0"
          	description: "Executes the procedure referred to by the ProcName and returns a  string. Passes in the argument values established by prior calls to  DLLParam and DLLArray. Type is ignored."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLArray"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DLLArray(${1:@string array})${2:;}$0"
          	description: "Adds an array argument to the list of arguments."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DLLParam"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DLLParam(${1:@string arg})${2:;}$0"
          	description: "Adds a string argument to the list of arguments."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Beep"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "Beep()${1:;}$0"
          	description: "Causes the computer to beep using the beep sound selected in the  Control Panel."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NumericParameter"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "NumericParameter(${1:@string message}, ${2:@real default})${3:;}$0"
          	description: "Similar to the userParameter function, except that this returns a real  value. This function will return a NOVALUE if the user clicks on  the cancel button."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NumericParameter2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "NumericParameter2(${1:@string message1}, ${2:@real default}, ${3:@strng message2}, ${4:@real default2}, ${5:@real array[]})${6:;}$0"
          	description: "Similar to the numericparameter function, except that this function  returns two values in a real array declared: real array[2]; The return value of the function itself will be a zero if the user successfully input one or more numbers, or a –1 if they canceled."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlaySound"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlaySound(${1:@string soundName})${2:;}$0"
          	description: "Plays the sound named in the argument. Returns FALSE if no error,  TRUE if the sound is not found. See “Sounds” on page 939 for  important details."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Speak"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "Speak(${1:@string s})${2:;}$0"
          	description: "(Mac OS only) Speaks the string if the speech manager is present."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "UserError"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "UserError(${1:@string s})${2:;}$0"
          	description: "Opens a dialog with an OK button displaying the string s."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "UserParameter"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "UserParameter(${1:@string prompt}, ${2:@string default})${3:;}$0"
          	description: "Opens a dialog to get a value. Displays the prompt string and default  string, then returns either the entry typed, or the default string if  there was no user entry, or the empty string (““) if Cancel was  clicked. After getting a string with UserParameter, you can convert  the string to a real with the StrToReal function described later in the  section on strings."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "UserPrompt"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "UserPrompt(${1:@string s})${2:;}$0"
          	description: "Opens a dialog with an OK and a CANCEL button displaying the  string s. The function returns TRUE if the OK button is clicked and  FALSE if the Cancel button is clicked."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "userPromptCustomButtons"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "userPromptCustomButtons(${1:@string str}, ${2:@string button1}, ${3:@string button2})${4:;}$0"
          	description: "User prompt with the ability to customize the text of the buttons.  Returns a 1 (one) if the first button is clicked or 2 (two) if the second button is clicked."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetModifierKey"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetModifierKey(${1:@integer whichKey})${2:;}$0"
          	description: "Returns a 1 if the key is depressed, a 0 if the key is not depressed.  Can be used in the on blockClick and on dialogClick message handlers. whichKey 1 = Shift key whichKey 2 = Option (Mac OS) or Alt (Windows) key."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetMouseX"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetMouseX()${1:;}$0"
          	description: "Returns the mouse X position in pixels relative to the model worksheet. Use the GetBlockTypePosition() function to get the coordinates of the block. Can be used in the on blockClick message  handler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetMouseXActiveWindow"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetMouseXActiveWindow()${1:;}$0"
          	description: "Returns the mouse X position in pixels relative to the active window,  for example, a hierarchical submodel window. Use the GetBlockTypePosition() function to get the coordinates of a block in that window. Can be used in the on blockClick message handler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetMouseY"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetMouseY()${1:;}$0"
          	description: "Returns the mouse Y position in pixels relative to the model worksheet. Use the GetBlockTypePosition() function to get the coordinates of the block. Can be used in the on BlockClick message  handler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetMouseYActiveWindow"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetMouseYActiveWindow()${1:;}$0"
          	description: "Returns the mouse Y position in pixels relative to the active window,  for example, a hierarchical submodel window. Use the GetBlockTypePosition() function to get the coordinates of a block in that window. Can be used in the on blockClick message handler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "HBlockClicked"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "HBlockClicked()${1:;}$0"
          	description: "This function returns the block number of the hBlock that was last  double clicked.  This is intended to be called during a On HblockOpen message handler, and will always return a negative one at other  times."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "isKeyDown"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "isKeyDown(${1:@integer keyCode})${2:;}$0"
          	description: "Returns a True/False value for whether or not the specified key is  pressed. The constants for keyCode are the constants for the API call  GetKeyState (Windows) or the GetKeys functionality (Macintosh)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Lastkeypressed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "Lastkeypressed()${1:;}$0"
          	description: "The value returned will be the ASCII value of the character entered  for keys that have ASCII equivalents. For keys that don’t have ASCII  equivalents, the value returned is the keycode. This is useful for  monitoring what keys the user hits on the keyboard. Used in conjunction with startTimer (See “Timer functions” on page 1230) or  during a simulation, it will allow live keyboard input."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WhichDialogItemClicked"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "WhichDialogItemClicked()${1:;}$0"
          	description: "Used in the dialogClick message handler to find the name of the  item that received the click. This is used, for example, to modify the  items in a popup menu at the time it is clicked on but before it  opens to the user."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WhichDTCellClicked"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "WhichDTCellClicked(${1:@integer rowCol})${2:;}$0"
          	description: "Returns the row or column of the cell in the data table that was  clicked on. This function should only be used in the on dialogClick  message handler, and usually after the whichDialogItemClicked  function has determined that a specific data table was clicked on. rowCol 0 = row rowCol 1 = col."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationBlockToBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationBlockToBlock(${1:@integer animationObjNum}, ${2:@integer blockNumFrom}, ${3:@integer conNumFrom}, ${4:@integer blockNumTo}, ${5:@integer conNumTo}, ${6:@real speed})${7:;}$0"
          	description: "This function moves an animation object across the connection lines  from one block to another. You specify the sending block and connector, and the receiving block and connector, as well as the number  of the animation object. The speed value is a relative speed factor.  Use a value of 1.0 for normal speed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationBorder"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationBorder(${1:@integer obj}, ${2:@integer pixels})${3:;}$0"
          	description: "Changes the border size of an animation object. Pixels can be 0, for  no border, and up to 20 for a 20 pixel border."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationBorderColor"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationBorderColor(${1:@integer objNum}, ${2:@integer hue}, ${3:@integer saturation}, ${4:@integer value})${5:;}$0"
          	description: "Allows you to specify the color of the border on an animation object.   Only effects objects that have a visible border around them."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationColor"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationColor(${1:@integer obj}, ${2:@integer hue}, ${3:@integer sat}, ${4:@integer bright}, ${5:@integer pattern})${6:;}$0"
          	description: "Sets the pattern and color of the object using the pattern number,  hue, saturation, and brightness."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationGetHeight"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationGetHeight(${1:@integer obj}, ${2:@integer getOrig})${3:;}$0"
          	description: "Returns the offset of the height of the object. If getOrig is true, gets  the original height."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationGetLeft"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationGetLeft(${1:@integer obj})${2:;}$0"
          	description: "Returns the offset of the left side of the object relative to its original  position in the icon."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationGetLeftRelative"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationGetLeftRelative(${1:@integer blockNumber}, ${2:@integer objNum}, ${3:@integer original})${4:;}$0"
          	description: "Gets the left of the animation object relative to the upper left hand  corner of the block icon.  See AnimationGetTopRelative for more  info."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationGetSpeed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationGetSpeed()${1:;}$0"
          	description: "Returns the speed setting, with 1 being slowest and 5 being fastest.  See AnimationSetSpeed(), below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationGetTop"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationGetTop(${1:@integer obj})${2:;}$0"
          	description: "Returns the offset of the top side of the object relative to its original  position in the icon."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationGetTopRelative"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationGetTopRelative(${1:@integer blockNumber}, ${2:@integer objNum}, ${3:@integer original})${4:;}$0"
          	description: "Gets the top of the animation object relative to the upper left hand  corner of the block icon.  Compare to AnimationGetTop, which  returns the location relative to just the Animation Object location,  and will always return zero unless the animation object has been  moved with an AnimationMove call. Original specifies if the moved  rect (0), or the original unmoved rect (1) should be used."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationGetWidth"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationGetWidth(${1:@integer obj}, ${2:@integer getOrig})${3:;}$0"
          	description: "Returns the width of the object. If getOrig is true, gets the original  width before any stretching."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationHide"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationHide(${1:@integer obj}, ${2:@integer outsideIcon})${3:;}$0"
          	description: "Immediately hides the object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationLevel"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationLevel(${1:@integer obj}, ${2:@real level})${3:;}$0"
          	description: "Defines the object as a level whose height varies from 0.0 to 1.0 (based on the level argument)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationMoveTo"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationMoveTo(${1:@integer obj}, ${2:@integer leftOffset}, ${3:@integer TopOffset}, ${4:@integer outsideIcon})${5:;}$0"
          	description: "Moves the object relative to its original position in the icon. Note:  pixel coordinates start at the top/left corner of the animation object  and go down and to the right. TopOffset of 0 is the top of the animation object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationMovie"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationMovie(${1:@integer obj}, ${2:@string movieName}, ${3:@real speed}, ${4:@integer playSoundTrack}, ${5:@integer async})${6:;}$0"
          	description: "(Mac OS only) Defines the object as a QuickTime movie, played at  the specified speed (relative to 1.0, the normal speed). If playSoundTrack is true, the soundtrack is played. If async is true, the  movie starts and the function returns immediately; if it is false, the  function will not return until the movie is finished. The movie must  be a file in the ExtendSim7\Extensions folder. Unlike other  resources, the “movieName” is its file name, not a resource name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationMovieFinish"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationMovieFinish(${1:@integer obj})${2:;}$0"
          	description: "(Mac OS only) Returns TRUE if the QuickTime movie is finished  or not currently playing; returns FALSE if the movie is still playing.  This is useful if you want to wait for a QuickTime movie to finish  playing before you restart it. If you call AnimationMovie with async  TRUE, use this function to check the status of the movie at any  time."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationObjectCopyData"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationObjectCopyData(${1:@integer objNum}, ${2:@integer objNum2})${3:;}$0"
          	description: "This function copies the animation object data, (like type of object,  poly points, color, size, etc.) from one object to another one."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationObjectCreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationObjectCreate(${1:@integer enclosingHBlockIfTRUE})${2:;}$0"
          	description: "Creates an animation object on the fly.  The animation object number for the created object will be returned. If the enclosingHBlockIfTRUE argument is set to one, or TRUE, the function will  create the animation object in the enclosing hblock of the current  block.  In this case, the returned value will be the negative value of  the animation object number. Animation objects create on the fly  with this function are not part of the block structure, and will need  to be recreated in openModel, or InitSim, or whenever they are  used.  They will persist until the model window (Including hblock  model windows,) is closed, or AnimationObjectDelete is called."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationObjectDelete"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationObjectDelete(${1:@integer objNum})${2:;}$0"
          	description: "This function will delete an animation object.  This will not affect  animation objects that are defined in the block structure, just those  created on the fly with AnimationObjectCreate. Use negative objNum if in enclosing HBlock."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationObjectExists"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationObjectExists(${1:@integer objNum})${2:;}$0"
          	description: "Returns TRUE if an animation object with the specified objNum  exists, and FALSE if it doesn’t. For example, you could test if the  enclosing hierarchical block has a specified animation object.(i.e. if animationObjectExists(-3) returns a TRUE value, then there  is an animation object in the enclosing HBlock, or any number of  levels above, with the objNum 3.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationObjectExists2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AnimationObjectExists2(${1:@integer blockNumber}, ${2:@integer objNum})${3:;}$0"
          	description: "Similar to the AnimationObjectExists function, except that this  function includes a block number argument, allowing you to check  for the existence of an animation object in a remote block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationOval"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationOval(${1:@integer obj})${2:;}$0"
          	description: "Defines the object as an oval."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationPicture"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationPicture(${1:@integer obj}, ${2:@string picName}, ${3:@integer scaleToObj})${4:;}$0"
          	description: "Defines the object as a picture. If TRUE, the scaleToObj argument  scales the picture to the animation object size; if FALSE, the picture  will not be scaled. See “Sounds on the Mac OS” on page 939 for  important information about pictures."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationPixelRect"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationPixelRect(${1:@integer obj}, ${2:@integer rows}, ${3:@integer cols}, ${4:@integer intArray[]})${5:;}$0"
          	description: "Defines the object as a rectangular pixel map of rows height and cols  width, where each pixel can have a specified color. ExtendSim normalizes the size of the pixels to conform to the animation object size.  IntArray is declared as a dynamic array: integer intArray[]."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationPixelSet"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationPixelSet(${1:@integer obj}, ${2:@integer row}, ${3:@integer col}, ${4:@integer h}, ${5:@integer s}, ${6:@integer v}, ${7:@integer drawNow})${8:;}$0"
          	description: "See AnimationPixelRect, above. Sets a specific pixel to an HSV color (see notes on color, above). Row values start from 0 to rows-1. Col  values start from 0 to cols-1."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationPoly"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationPoly(${1:@integer objNum}, ${2:@integer pointCount}, ${3:@integer pointArray[]})${4:;}$0"
          	description: "Animates a polygon. PointCount is the number of points to be  drawn, point array is a two dimensional array of points that contains  the points to be animated.  The points are defined in pixels from the  upper left hand corner of the animation object location."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationRectangle"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationRectangle(${1:@integer obj})${2:;}$0"
          	description: "Defines the object as a rectangle."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationRndRectangle"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationRndRectangle(${1:@integer obj})${2:;}$0"
          	description: "Defines the object as a rounded rectangle."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationSetDelayMode"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationSetDelayMode(${1:@integer trueIsDelay})${2:;}$0"
          	description: "If trueIsDelay is TRUE (default), then ExtendSim uses its normal  delay, corresponding to the animation speed that the user chose.  FALSE removes any animation delay, no matter what speed the user  chooses. Use this function to set your own delay for animation and  have ExtendSim ignore the animation speed set by the user. See AnimationGetSpeed(), above, to see what speed the user chose."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationSetSpeed"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationSetSpeed(${1:@integer newSpeed})${2:;}$0"
          	description: "Sets the animation speed, with 1 being slowest and 5 being fastest.  See AnimationGetSpeed(), above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationShow"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationShow(${1:@integer obj})${2:;}$0"
          	description: "Shows a hidden object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationStretchTo"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationStretchTo(${1:@integer obj}, ${2:@integer leftOffset}, ${3:@integer topOffset}, ${4:@integer width}, ${5:@integer height}, ${6:@integer outsideIcon})${7:;}$0"
          	description: "Stretches the object relative to its original position in the icon."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationText"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationText(${1:@integer obj}, ${2:@string msg})${3:;}$0"
          	description: "Defines the object as text with the string msg. Also see the  TextWidth function in Strings, below, that is useful in applying the  AnimationStretchTo function to the object so that the text width is  accommodated."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationTextAlign"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationTextAlign(${1:@integer objNum}, ${2:@integer justification})${3:;}$0"
          	description: "This function specifies the text alignment for the specified animation object. Justification takes the following values: Left: 0 Right: -1 Center: 1."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationTextSize"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationTextSize(${1:@integer objNum}, ${2:@integer size})${3:;}$0"
          	description: "Allows you to modify the size of animation text.  The size argument  is a font point size."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AnimationTextTransparent"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AnimationTextTransparent(${1:@integer objNum}, ${2:@string text})${3:;}$0"
          	description: "Exactly the same as the animationText function, except the background behind the text will be transparent. It’s normally white for  the regular function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DialogPicture"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DialogPicture(${1:@string variableName}, ${2:@string pictureName}, ${3:@integer scalePicture})${4:;}$0"
          	description: "This function displays the picture pictureName over the static text  item variableName. This is used to display a picture on a dialog box.  Normally you would create an empty static text item, and use that as  the location for displaying this picture. ScalePicture will take a  TRUE or FALSE, and determines if the picture is scaled to the  space, or not. Returns FALSE if that picture is not available."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PictureList"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PictureList(${1:@String15 arrayName[]}, ${2:@integer type})${3:;}$0"
          	description: "Resizes, and fills the dynamic array arrayname with the names of the  pictures from the extension folder or the application to be used with  the AnimationBlockToBlock() function. Return value is the number  of pictures. type: 0 - All pictures in the Extensions folder. 1 - Only AnimationBlockToBlock pictures in the application. 2 - Only AnimationBlockToBlock pictures in the Extensions folder.  Pictures with names that start with a “@” character are not AnimationBlockToBlock pictures and are not returned. The @ character  prevents pictures from showing up in the block’s animation tab  popup menu. 3 - All non-AnimationBlockToBlock pictures (pictures that start  with an @ character."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ProofEncode"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ProofEncode(${1:@string commandLine})${2:;}$0"
          	description: "The version of the Proof Animation DLL that works with ExtendSim requires a numeric value calculated by this function to be passed  to it periodically. See the Proof Animation blocks in the Animation  2D-3D library to see how to use this function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ProofEncodeReset"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ProofEncodeReset()${1:;}$0"
          	description: "Resets counters for Proof copy protection."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DBlockToBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DBlockToBlock(${1:@integer sBlock}, ${2:@integer eBlock}, ${3:@string objectName}, ${4:@integer objectType}, ${5:@integer pathID}, ${6:@real speed}, ${7:@integer SelfDeleting})${8:;}$0"
          	description: "Using the 3D Block locations set below by E3DSetBlockLocation,  this function creates an object and moves it from the location of  the sBlock to the location of the eBlock. This function is intended  to allow a more complex path between two blocks compared to a  straight line – a one step method to emulate 2D AnimationBlockToBlock in the 3D world. ObjectName and ObjectType specify  the object to be created, as in E3DCreateObject.  See the description of that function for more information. If PathID is nonzero,  the function will move the object along the path specified by that  ID. If selfDeleting is set to True, the object will be deleted when  the animation is completed. If selfDeleting is False, the function  will return the ID of the created object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DBlockToBlockHeight"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DBlockToBlockHeight(${1:@real Z})${2:;}$0"
          	description: "Specifies a height for the next object to be moved with an  E3DblockToBlock call.  This is primarily for ExtendItems, as they  have a traveling height.  People and vehicles will drop to the  ground, so this call will not effect them.  This procedure should be  called before the E3DblockToBlock call."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DBlockToBlockObjectLabel"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DBlockToBlockObjectLabel(${1:@string label})${2:;}$0"
          	description: "Specifies an object label for the next E3DBlockToBlock call.  This  procedure should be called before the E3DblockToBlock call."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DBlockToBlockRotation"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DBlockToBlockRotation(${1:@real x}, ${2:@real y}, ${3:@real z})${4:;}$0"
          	description: "Specifies the rotation values for the next E3DblockToBlock call.   This procedure should be called before the E3DblockToBlock call."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DBlockToBlockScale"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DBlockToBlockScale(${1:@real x}, ${2:@real y}, ${3:@real z})${4:;}$0"
          	description: "Specifies the scale values for the next E3DblockToBlock call.  This  procedure should be called before the E3DblockToBlock call."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DBlockToBlockSkin"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DBlockToBlockSkin(${1:@string skinName}, ${2:@string skinTypeName})${3:;}$0"
          	description: "Specifies the string skin names to be used by the next  E3DblockToBlock call. This procedure should be called before the  E3DblockToBlock call."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DBlockToBlockSkinByIndex"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DBlockToBlockSkinByIndex(${1:@integer skinIndex1}, ${2:@integer skinIndex2})${3:;}$0"
          	description: "Specifies the indexes of the string names to be used by the next  E3DblockToBlock call. This procedure should be called before the  E3DblockToBlock call. See E3DsetSkinByIndex for more information about the skinIndex values."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetBlockLocation"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DGetBlockLocation(${1:@integer blockN}, ${2:@integer which})${3:;}$0"
          	description: "Retrieves the x, y, or z value for the Block location set by  E3DsetBlockLocation.  The which argument takes the following  values:  0: x 1: y 2: z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectBlockNumber"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectBlockNumber(${1:@integer objectID})${2:;}$0"
          	description: "Gets the block number field on the specified 3D Object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetBlockLocation"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DSetBlockLocation(${1:@integer blockN}, ${2:@real x}, ${3:@real y}, ${4:@real z})${5:;}$0"
          	description: "Sets an x, y, and z location for a block.  This information is saved  in the model."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetObjectBlockNumber"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DSetObjectBlockNumber(${1:@integer objectID}, ${2:@integer blockNumber})${3:;}$0"
          	description: "Sets the blocknumber field on the specified 3d object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DCurrentTime"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DCurrentTime()${1:;}$0"
          	description: "Returns currentTime in the 3D windows playback of the model  events."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DMode"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DMode()${1:;}$0"
          	description: "Returns the mode set by E3DsetMode."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DPauseAllObjects"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DPauseAllObjects()${1:;}$0"
          	description: "Pauses all objects.  Pausing an object stops it from moving towards  its destination, but records the destination within the object, so it  can be resumed later if desired.  This is used in the executive to  pause all items in a model when the simulation is paused."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DResumeAllObjects"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DResumeAllObjects()${1:;}$0"
          	description: "Resumes all objects that have been paused, and have a saved  resume destination.  See E3DPauseAllObjects above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetMode"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DSetMode(${1:@integer mode})${2:;}$0"
          	description: "This function sets the mode in which the 3D window, and block  code, will expect to function.  Takes the following values: 0: E3DQUICKVIEWMODE 1: E3DBUFFEREDMODE 2: E3DCONCURRENTMODE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetTimeRatio"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DSetTimeRatio(${1:@real ratio})${2:;}$0"
          	description: "Sets the 3DtimeRatio.  See the description of E3DtimeRatio for  more information."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3Dsleep"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3Dsleep(${1:@integer milliseconds})${2:;}$0"
          	description: "Delays for milliseconds. Stops processing MODL code for that  integer while the 3D window keeps processing."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DTimeRatio"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DTimeRatio()${1:;}$0"
          	description: "Retrieves the 3D Time ratio.  This number sets the correspondence between real-time and simulation time in the 3D window.   The default value is 1000.  Changing this will speed up, or slow  down the Playback of 3D events in the 3D Window.  For example,  setting the Time Ratio to 2000, will make the 3D window run  twice as slow as the default value of 1000.  Basically this number is  the number of milliseconds in a 3D window time unit."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DdistanceRatio"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DdistanceRatio()${1:;}$0"
          	description: "Returns the ratio between pixels and meters set in the Simulation  setup dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetPosition"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DGetPosition(${1:@integer theObject}, ${2:@integer coord})${3:;}$0"
          	description: "Returns the X, y, or z position value of the object. Coord takes the  following values: 0: x 1: y 2: z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetRotation"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DGetRotation(${1:@integer objectID}, ${2:@integer which})${3:;}$0"
          	description: "Returns the rotation information for the specified object. Which  can take the following values: 0: x 1: y 2: z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetPosition"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetPosition(${1:@integer theObject}, ${2:@real x}, ${3:@real y}, ${4:@real z}, ${5:@integer dropToGround})${6:;}$0"
          	description: "Sets the position of the specified object to the specified location.  If  dropToGround is true, the object will drop until it touches the  ground."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetRotation"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetRotation(${1:@integer theObject}, ${2:@real x}, ${3:@real y}, ${4:@real z})${5:;}$0"
          	description: "Sets the X, Y, and Z rotation values of the object.  Currently only z  values are meaningful, they will rotate around the z axis.  Values  are in radians.  (I.e. 2? will be 100% rotation.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetScale"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetScale(${1:@integer theObject}, ${2:@real x}, ${3:@real y}, ${4:@real z})${5:;}$0"
          	description: "Sets the scale of the object to the specified scale.  X, y, and z refer  to three different dimensions of the object.  By default x, y, and z  are 1.0.  If you set x, y, or z to values that are different from each  other there will be some distortion in the appearance of the object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DNotEnabled"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DNotEnabled()${1:;}$0"
          	description: "Checks if the 3D is enabled, or not, and returns why. Return  value: 0: E3D enabled 1: Suite not enabled 2: machine not capable 3: 3D files missing."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DOpenWindow"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DOpenWindow()${1:;}$0"
          	description: "Opens the 3D Window."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DUpdate"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DUpdate()${1:;}$0"
          	description: "Forces an update or redraw of the E3D window.  This is not usually necessary."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DWindow"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DWindow()${1:;}$0"
          	description: "Returns TRUE if the 3D Window is open."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DWindowConnected"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DWindowConnected()${1:;}$0"
          	description: "This function returns a TRUE (1) value if the current model (the  one the function is being called from,) is the model connected to  the E3D window.  It returns a FALSE (0) value otherwise."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DMountStackInsert"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DMountStackInsert(${1:@integer objectID}, ${2:@integer targetID}, ${3:@integer index}, ${4:@integer baseNode})${5:;}$0"
          	description: "Add an object to a MountStack.  Object will be mounted onto target, at the index specified by index.  Index starts at zero for the first  object to be mounted on the target.  The items in the stack will  mount on each other based on the internal stackMountNode of  the objects, with the exception of the base of the mountStack,  which will use the Node specified by baseNode.  If you pass in a – 1 for baseNode, the object will use its stackMountNode.  If you do  not know which node you want to specify, just pass in a negative  one for the baseNode."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DMountStackLimit"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DMountStackLimit(${1:@integer blockNumber}, ${2:@integer limit})${3:;}$0"
          	description: "Determines the limit for mountStacks created by a specified block.  The purpose is to reduce the number of objects displayed in the  E3D window, enhancing performance. The mountStack limit  only renders up to limit objects; after that it indicates the total  count of objects as a number on the top of the stack. If not overridden by block code, the default mountStack limit is 10."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DMountStackRemove"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DMountStackRemove(${1:@integer objectID}, ${2:@integer index}, ${3:@integer baseNode}, ${4:@integer rule}, ${5:@integer direction}, ${6:@real distance})${7:;}$0"
          	description: "Remove an object from a mountStack.  Direction and distance are  as defined in the Unmount functions. Rule determines how the  index value is used.  A rule value of zero, means that index is just a  zero based index of which object is to be removed.  A rule value of  one means that index is the Object ID of the object to be removed.  BaseNode specifies which node on the base object the mountStack  is stacked on. If you pass in a –1 for baseNode, the object will use  its stackMountNode.  If you do not know which node you want to  specify, just pass in a negative one for the baseNode."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DAddMarkerToPath"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DAddMarkerToPath(${1:@integer path}, ${2:@integer marker})${3:;}$0"
          	description: "Adds the specified Marker to the specified path."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DCreateMarker"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DCreateMarker(${1:@real x}, ${2:@real y}, ${3:@real z}, ${4:@integer spline}, ${5:@integer seqNum}, ${6:@integer GroupTag})${7:;}$0"
          	description: "Creates a Marker for addition to a path.  X, Y and Z specify the  location of the marker.  Spline specifies how the path will render  when viewed in the Editor.  If spline is true, the marker will be  represented as connected to the other markers, by a curved line,  otherwise it will be connected with a straight line.  The seqNum  argument should be 1 for the first point on the path, and should  count up incrementally.  If the markers are not sequential, the  behavior of the path will be unpredictable. See the creation functions section for more information about the GroupTag."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DCreatePath"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DCreatePath(${1:@string name}, ${2:@integer looping}, ${3:@integer GroupTag})${4:;}$0"
          	description: "Creates a path with the specified name.  Looping determines  whether the path is looping, or not.  If the path is looping, an item  that is traveling on the path will go back to the beginning of the  path when it leaves the last marker on the path.  See the creation  functions section for more information about the GroupTag."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetPathByName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetPathByName(${1:@string name})${2:;}$0"
          	description: "Returns the ObjectID number for the path with the specified  name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DPathMarkerLocation"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DPathMarkerLocation(${1:@integer path}, ${2:@integer index}, ${3:@integer coord})${4:;}$0"
          	description: "Returns the x, y, or z position value of the nth marker on the specified path.  Index specifies which marker you want the coordinate  value for, starting at one for the first one, and coord specifies  whieh coordinate value you want. This function returns a –10000  when it fails. Coord takes the following values:  0: x 1: y 2: z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DPathSetColor"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DPathSetColor(${1:@integer objectID}, ${2:@integer firstColor}, ${3:@integer secondColor}, ${4:@integer thirdColor}, ${5:@integer RGB})${6:;}$0"
          	description: "Sets the color of the specified path.  Paths are invisible by default,  so this function will seem to have no effect until the  E3DSetVisibility function is also called on the path.  ObjectID  specifies which path is to have its color set.  FirstColor, secondColor, and thirdColor have different meanings depending on the  value of the RGB argument.  If the RGB argument is set to TRUE,  firstColor is red, secondColor is green, and thirdColor is blue.  If  RGB is FALSE, first Color is hue, second is saturation, and third  color is value.  (See separate discussion of RGB and HSV colors.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetSelectedObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetSelectedObject()${1:;}$0"
          	description: "Returns the ObjectID for the object currently selected in the 3D  window."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DObjectClicked"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DObjectClicked()${1:;}$0"
          	description: "Returns the objectID of the last E3D object clicked."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetSelectedObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetSelectedObject(${1:@integer object})${2:;}$0"
          	description: "Sets the selection in the 3D window to be the object specified."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DUnselectObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DUnselectObject(${1:@integer objectID})${2:;}$0"
          	description: "Unselects the specified object.  This will have no effect if the specified object is not the selected object in the E3D window."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DBoundingBoxes"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DBoundingBoxes(${1:@integer boundingBoxes})${2:;}$0"
          	description: "Sets a flag which decides if objects drawn in the 3d Window  should try to draw their bounding boxes.  This will only affect  ExtendItems, ExtendPlayers, and ExtendVehicles."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DChooseEnvironment"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DChooseEnvironment(${1:@string EnvironmentName})${2:;}$0"
          	description: "Sets the Environment file name that is associated with the model."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetDetail"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DSetDetail(${1:@real detailValue})${2:;}$0"
          	description: "Sets the level of detail for the objects in the E3D window.  This  controls the same variable as the LOD control in the options dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetTerrain"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DSetTerrain(${1:@string terrain}, ${2:@integer which})${3:;}$0"
          	description: "Sets the Terrain texture file to be associated with the terrain.   Which takes a value of 1-6, which corresponds to which one of the  6 textures the terrain editor defines is to be changed. (By default  the terrain is all drawn in texture one (1), so if you just want to  change the texture of the default environment file, just use 1 for  the which value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSky"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DSky(${1:@integer skySetting}, ${2:@integer red}, ${3:@integer green}, ${4:@integer blue})${5:;}$0"
          	description: "Red/Green/Blue : 0-255, skySetting: 0: default (Clouds and Skybox) 1: no Clouds (just Skybox) 2: no skybox 3: ceiling (uses color, no clouds or fog)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSun"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSun(${1:@integer sunSetting})${2:;}$0"
          	description: "Red/Green/Blue : 0-255, sunSetting: 0: No visible sun (sunFlare is disabled) 1: Sun is visible, (Sun flare is enabled)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DChangeObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DChangeObject(${1:@integer objectID}, ${2:@unsigned char  *Object- Name})${3:;}$0"
          	description: "Changes the specified object into another type of object.  ObjectName specifies which type of object to change the choosen object  into. Please note that you should only attempt to change objects of  a like type into other objects.  For example, changing a ‘Male’  object into a ‘Female’ object should be fine, because both objects  are ExtendPlayer Objects, but changing a ‘Male’ object into a  ‘Boid’ object is not allowed, and will not work."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DCopyObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DCopyObject(${1:@integer objectID}, ${2:@real x}, ${3:@real y}, ${4:@real z})${5:;}$0"
          	description: "Creates a copy of the object referenced by objectID at location x, y,  z.  This copy will have all the information associated with the  object being copied, with the exception of location, and any other  objects mounted on it.  If the X, Y and/or Z values are blanks or  novalues, then the existing position of the object will be used for  that coordinate."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DCreateObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DCreateObject(${1:@string objectName}, ${2:@integer objectType}, ${3:@real x}, ${4:@real y}, ${5:@real z}, ${6:@integer collideable}, ${7:@integer GroupTag})${8:;}$0"
          	description: "Creates an object at location x, y, z.  ObjectName specifies what  kind of object to create.  ObjectType specifies what type of object  is to be created.  Zero is a special type that tries to create the appropriate type for that particular object.  This is almost always what  you will want to use from MODL, unless you are custom coding  using custom 3D objects."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DCreateObjectAtWayPoint"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DCreateObjectAtWayPoint(${1:@string objectName}, ${2:@integer objectType}, ${3:@integer wayPointID}, ${4:@string name}, ${5:@integer collideable}, ${6:@integer GroupTag})${7:;}$0"
          	description: "Creates an object at waypointID."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DCreateWayPoint"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DCreateWayPoint(${1:@real x}, ${2:@real y}, ${3:@real z}, ${4:@string name}, ${5:@integer GroupTag})${6:;}$0"
          	description: "Creates and returns a waypointID at the specified location."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DDeleteAllObjects"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DDeleteAllObjects(${1:@integer GroupTag})${2:;}$0"
          	description: "If tag is <= –1, all objects will be cleared.  If tag is greater than –1,  only objects that have that GroupTag will be cleared. Clears all  objects and events created from MODL from the 3D Window."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DDeleteObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DDeleteObject(${1:@integer theObject}, ${2:@integer deleteMount})${3:;}$0"
          	description: "Deletes the specified object.  If deleteMount is true, objects  mounted to the specified object will be delete."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetDestination"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DGetDestination(${1:@integer objectID}, ${2:@integer coord})${3:;}$0"
          	description: "Returns on of the destination coordinants of the specified object. coord 0: x 1: y 2: z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetSpeed"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DGetSpeed(${1:@integer objectID})${2:;}$0"
          	description: "Returns the speed of the specified object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DResumeSpeed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DResumeSpeed(${1:@integer objectID})${2:;}$0"
          	description: "Resumes the previous speed value of the object.  Each object internally saves its old speed when a new speed value is set.  This function resets the speed to the last value used."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetDestination"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetDestination(${1:@integer objectID}, ${2:@real speed}, ${3:@real x}, ${4:@real y}, ${5:@real z}, ${6:@integer sync}, ${7:@integer selfDeleting})${8:;}$0"
          	description: "Sets a destination for the specified E3D object.  The types of  objects that can have a destination set are ExtendItems, ExtendPlayers, and ExtendVehicles.  This excludes scenery and block  objects, which do not normally move.  The speed argument will be  used by to the object as it travels to its destination.  X, Y, and Z are  the coordinates of the destination.  The sync argument determines  if the motion of the object will be synchronous, or asynchronous.  Synchronous means that the call will wait to return until the specified object reaches its destination.  This has a potential danger, in  that if the object is blocked, and does not reach its destination, the  call will not return, and the code will hang. If selfdeleting is set to  true, then the object will delete itself when it reaches its destination."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetSpeed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetSpeed(${1:@integer objectID}, ${2:@real speed})${3:;}$0"
          	description: "Sets the speed of the specified object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetTargetObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetTargetObject(${1:@integer objectID}, ${2:@integer targetID}, ${3:@string name}, ${4:@real speed}, ${5:@integer sync}, ${6:@integer selfDeleting})${7:;}$0"
          	description: "Sets a target object for the object. The types of objects that can  have a path set are ExtendItems, ExtendPlayers, and ExtendVehicles.  This excludes scenery and block objects, which do not normally move.  The speed argument will be used by to the object as  it travels to its destination.  TargetID is the ID of the target object.   The sync argument determines if the motion of the object will be  synchronous, or asynchronous. Synchronous means that the call  will wait to return until the specified object reaches the target.   This has a potential danger, in that if the object is blocked, and  does not reach its destination, the call will not return, and the code  will hang. If selfdeleting is set to true, then the object will delete  itself when it reaches the target object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetTargetPath"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetTargetPath(${1:@integer objectID}, ${2:@integer targetID}, ${3:@string name}, ${4:@real speed}, ${5:@integer sync}, ${6:@integer selfDeleting}, ${7:@integer startingMarker})${8:;}$0"
          	description: "Sets a target path for the object. The types of objects that can have  a path set are ExtendItems, ExtendPlayers, and ExtendVehicles.   This excludes scenery and block objects, which do not normally  move.  The speed argument will be used by to the object as it travels to its destination.  TargetID is the ID of the target path.  The  sync argument determines if the motion of the object will be synchronous, or asynchronous. Synchronous means that the call will  wait to return until the specified object reaches the end of the  path.  This has a potential danger, in that if the object is blocked,  and does not reach its destination, the call will not return, and the  code will hang. If selfdeleting is set to true, then the object will  delete itself when it reaches the end of the path. The startingMarker defines which marker starts the path, usually one."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetTargetWayPoint"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetTargetWayPoint(${1:@integer objectID}, ${2:@integer targetID}, ${3:@string name}, ${4:@real speed}, ${5:@integer sync}, ${6:@integer selfDeleting})${7:;}$0"
          	description: "Sets a target waypoint for the object. The types of objects that can  have a path set are ExtendItems, ExtendPlayers, and ExtendVehicles.  This excludes scenery and block objects, which do not normally move.  The speed argument will be used by to the object as  it travels to its destination.  TargetID is the ID of the target waypoint.  The sync argument determines if the motion of the object  will be synchronous, or asynchronous. Synchronous means that  the call will wait to return until the specified object reaches the target.  This has a potential danger, in that if the object is blocked,  and does not reach its destination, the call will not return, and the  code will hang. If selfdeleting is set to true, then the object will  delete itself when it reaches the target waypoint."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DStopAllObjects"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DStopAllObjects()${1:;}$0"
          	description: "This function stops all objects that have a destination.  This would  usually be called when the E3D animation is complete, as it will  clear destinations, and there will not be a way of resuming the  motion."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetMount"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetMount(${1:@integer objectID})${2:;}$0"
          	description: "Returns the objectID for the object that the specified object is  mounted to."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetMountedObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetMountedObject(${1:@integer objectID}, ${2:@integer node})${3:;}$0"
          	description: "Returns the ObjectID for the object that is mounted to the specified object at the specified node."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DMountObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DMountObject(${1:@integer mountID}, ${2:@integer riderID}, ${3:@integer node})${4:;}$0"
          	description: "Mounts the object referred by riderID onto the object referred to  by mountID. Node specifies the mountNode to use on the object  to be mounted.  Node would be set to 0, for objects that have only  one mount point. Pass in a –1 if you want Extend to do a smart  mount, i.e. to mount a person object to the seat, and a box object  to the fork of a forklift, for example."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DUnmountObject"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DUnmountObject(${1:@integer mountID}, ${2:@integer riderID}, ${3:@integer direction}, ${4:@real distance})${5:;}$0"
          	description: "Unmounts the rider from the mount. Direction specifies which  way to use the optional offset distance.  This will move the object a  certain distance when the unmount is completed.  Distance is in  3D units.  (Meters.) Direction: 1: north, 2: west, 3: east, 4: south, 5: up If you pass in a zero for the mountID, the function will unmount  the rider from whatever mount it happens to be mounted on."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DAnimationName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "E3DAnimationName(${1:@integer objectID}, ${2:@integer which})${3:;}$0"
          	description: "Returns the name of the animation on the specified object that  corresponds to the ‘which’ parameter."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DAnimationPlay"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DAnimationPlay(${1:@integer objectID}, ${2:@string which}, ${3:@integer backward})${4:;}$0"
          	description: "Plays the animation specified by the ‘which’ parameter on the  object specified by the ObjectID parameter.   Backward should be  set to true of you want the animation to play backward."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DAnimationSetPosition"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DAnimationSetPosition(${1:@integer objectID}, ${2:@which which}, ${3:@real pos})${4:;}$0"
          	description: "Sets the specified animation to the specified position."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DAnimationStop"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DAnimationStop(${1:@integer objectID}, ${2:@string which})${3:;}$0"
          	description: "Stops the animation thread specified by the string which.  Note  that this also stops the Torque animation thread from running.  In  most cases this doesn’t matter, as ExtendSim manages the Torque  threads for you. Examples of where it does matter are animations  where two sequences use the same parts of the object, or if you  have more than eight different animations that you want to run.   In either case, you need to stop one thread to successfully run the  next."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DDialogPicture"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DDialogPicture(${1:@string variableName}, ${2:@string objectName}, ${3:@real rotation}, ${4:@real rotation2})${5:;}$0"
          	description: "Shows the object picture within a dialog’s static text item."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectAnimationNames"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectAnimationNames(${1:@integer ObjectID}, ${2:@string theArray[]})${3:;}$0"
          	description: "Gets the object’s animation names into theArray."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DObjectSnapshot"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DObjectSnapshot(${1:@string fileName}, ${2:@integer objectID}, ${3:@real rotation}, ${4:@real rotation2})${5:;}$0"
          	description: "Saves a .png file with the object’s picture."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "E3DGetName(${1:@integer objectID})${2:;}$0"
          	description: "Returns the name of the specified object. Useful for uniquely naming 3d objects, this is the name used in the E3DgetPathByName,  and E3DgetObjectByName functions."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectByName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectByName(${1:@string name})${2:;}$0"
          	description: "Returns the objectID for the object with the specified name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectLabel"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectLabel(${1:@integer objectID})${2:;}$0"
          	description: "Gets the ObjectLabel of the specified object.  (This is the name/ label that displays above the object in the 3D Window.) Note for  E3D Developers, in the 3D engine this is the ShapeName."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectList"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectList(${1:@integer which}, ${2:@string31 nameArray[]})${3:;}$0"
          	description: "This function returns a list of object type names of all the objects  of the type specified by the ‘which’ argument.  Please note that  these are not the object names defined by E3DSetObjectName, or  the object labels defined by E3DsetObjectLabel, but rather the  object type names.  I.e.:“Male”, “Female”, “Ball”, and so on.  This  function is used to identify all the possible types of objects that can  be created.  NameArray need to be a string31 dynamic array.  It  will be resized by the function. Which values: -1: all possible objects 0: ExtendItem + ExtendPlayer + ExtendVehicle 1: block 2: scenery 3: ExtendSim 4: ExtendPlayer 5: ExtendVehicle."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectNames"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectNames(${1:@integer which}, ${2:@string31 nameArray[]})${3:;}$0"
          	description: "Fills the passed in string31 array with the names of the E3D  Objects in the 3D world.  The array should be a string31 dynamic  array, which the function will resize based on the number of names  to be returned. Which values: 0 or greater: groupTag -1: everything -2: Paths -3: WayPoints  -4: ExtendItems -5: Players -6: wheeled vehicles."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DObjectLabelColorSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DObjectLabelColorSet(${1:@integer objectID}, ${2:@integer firstColor}, ${3:@integer secondColor}, ${4:@integer thirdColor}, ${5:@integer RGB})${6:;}$0"
          	description: "Sets the color of the object label on the specified object. Nothing  will be drawn if the objectLabel is empty, so this function will need  to be used in conjunction with E3DSetObjectLabel.  FirstColor,  secondColor, and thirdColor have different meanings depending  on the value of the RGB argument.  If the RGB argument is set to  TRUE, firstColor is red, secondColor is green, and thirdColor is  blue.  If RGB is FALSE, first Color is hue, second is saturation,  and third color is value.  (See separate discussion of RGB and HSV  colors.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetName(${1:@integer objectID}, ${2:@string name})${3:;}$0"
          	description: "Sets the name of the specified object.  This is the name by which  the object is referred to in the 3D window.  This name will be visible in the editor.  Useful for uniquely naming 3d objects, this is the  name used in the E3DgetPathByName, and  E3DgetObjectByName functions."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetObjectLabel"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetObjectLabel(${1:@integer objectID}, ${2:@string shapeName})${3:;}$0"
          	description: "Sets the ObjectLabel of the specified object.  (This is the name/ label that displays above the object in the 3D Window.) Note for  E3D Developers, internally in the 3D engine this is the ShapeName."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DPanoramicScreenShot"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DPanoramicScreenShot(${1:@string fileName})${2:;}$0"
          	description: "Creates three screenshot files in the Extend directory.  Put  together, the screen shots will create a panoramic view of the contents of the 3D window."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DScreenShot"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DScreenShot(${1:@string fileName})${2:;}$0"
          	description: "Creates a screenshot file in the Extend directory.  Currently the file  type of the screen shot file is PNG.  So the file name will be filename.png."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DDistance"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DDistance(${1:@integer objectID}, ${2:@real x}, ${3:@real y}, ${4:@real z})${5:;}$0"
          	description: "Returns the distance from the location of the specified object to  the specified location."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DDistancePath"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DDistancePath(${1:@integer pathID})${2:;}$0"
          	description: "Returns the total distance of the path."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DDistanceToObject"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DDistanceToObject(${1:@integer objectID}, ${2:@integer targetID})${3:;}$0"
          	description: "Returns the distance between the two objects."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectSkinBase"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectSkinBase(${1:@string objectName}, ${2:@integer which})${3:;}$0"
          	description: "Returns the SkinBaseNames for the object type specified by  objectName.  Which specifies if you want base name 1, or base  name 2. Currently the only objects that have meaningful base  names are the Male and Female object, as discussed under  E3DgetObjectSkinNames above.  I.e. for the female object, calling  this function with a which value of 2, will return the string  “femaleSkin”."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectSkinNames"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectSkinNames(${1:@integer objectID}, ${2:@string baseName}, ${3:@str32 theArray[]})${4:;}$0"
          	description: "Returns the names of the skins for the object.  For most objects,  you can leave the basename field blank (“”).  For objects with multiple skins, it specifies which skin you want to set.  Specifically, at  the moment, there are two objects that support more than one  skin, the female and male figures.  For the female, specify “femaleClothes” for her clothes, and “femaleskin” for her skin.  For the  male, its “MaleClothes” and “maleSkin”."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetSkin"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetSkin(${1:@integer objectID}, ${2:@string skinName}, ${3:@string baseName})${4:;}$0"
          	description: "Allows you to set the skin of a 3D object. For most objects, you  can leave the basename field blank (“”).  For object with multiple  skins, it specifies which skin you want to set.  Specifically, at the  moment, there are two objects that support more than one skin,  the female and male figures.  For the female, specify “femaleClothes” for her clothes, and “femaleskin” for her skin.  For the  male, its “MaleClothes” and “maleSkin”.  Returns an error code  number (Non-zero) if it fails."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetSkinByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetSkinByIndex(${1:@integer objectID}, ${2:@integer skinIndex1}, ${3:@integer skinIndex2})${4:;}$0"
          	description: "This function lets you set the skin values of an object by numeric  index values.  The first skinIndex number modifies the first object  skin, and the second modifies the second skin.  Note that most  objects (currently, all object except the people,) only have one skin,  so the second number will be ignored. skinIndex values: -1: make the skin value a random choice 0: keep the skin value the same 1-n: use a specific skin >n: use n."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DForwardAngle"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DForwardAngle(${1:@integer objectID}, ${2:@integer targetID})${3:;}$0"
          	description: "This function returns the forward angle for the Object. Where  zero means directly in front, PI means directly behind."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DForwardVector"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DForwardVector(${1:@integer objectID}, ${2:@integer which})${3:;}$0"
          	description: "This function returns the forward vector for the Object.  The forward vector is the vector forward from the Object.  The which  argument specifies which part of the vector is to be returned.   Which values are: 0: X 1: Y 2 : Z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetAngleFromVector"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DGetAngleFromVector(${1:@real vectorX}, ${2:@real vectorY}, ${3:@real vectorZ}, ${4:@integer which})${5:;}$0"
          	description: "This function returns the yaw and pitch angles. The range of yaw  is 0 - 2PI.  The range of pitch is -PI/2 - PI/2. Which values: 0: yaw 1: pitch."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectVector"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectVector(${1:@integer objectID}, ${2:@integer which}, ${3:@real vector[]})${4:;}$0"
          	description: "This function returns a vector for the object, depending on the  value of the which argument.  Vector needs to be a predefined single row real array with at least three elements. Which takes the following values:  0: position 1: forward Vector."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetVectorFromAngles"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DGetVectorFromAngles(${1:@real yaw}, ${2:@real pitch}, ${3:@integer which})${4:;}$0"
          	description: "This function returns the vector from the specified angles. The  range of yaw is 0 - 2PI.  The range of pitch is -PI/2 - PI/2. Which  values are: 0: X 1: Y 2: Z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DNormalizeVector"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DNormalizeVector(${1:@real vector[]})${2:;}$0"
          	description: "Takes the vector passed in, and normalizes the array.   Vector needs  to be a predefined single row real array with at least three elements."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DObjectIDToUserTag"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DObjectIDToUserTag(${1:@integer objectID})${2:;}$0"
          	description: "Returns an UserTag value from a ObjectID. This function is the  reverse of the E3DuserTagToObjectID function.  See that functions description for more information.  UserTag values are negative numbers, and objectID values are positive numbers.   All  Extend functions can recognize either."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DUserTagToObjectID"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DUserTagToObjectID(${1:@integer userTag})${2:;}$0"
          	description: "Returns an objectID value from a userTag.  An ObjectID value is  the reference ID of a 3D object, as used by the 3D engine.  A userTag is a value returned by E3DPostCreateObject, as it does not  immediately create an object, instead creates it at the specified simulation time.  UserTag values are negative numbers, and objectID  values are positive numbers.  This function does not usually need  to be called, as objects created from Extend retain their userTags  even after the objectID value is created when the object is actually  created in the 3D window, and all Extend functions can recognize  either."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DStartTick"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DStartTick(${1:@integer blockNumber})${2:;}$0"
          	description: "blockNumber specifies which block should get the E3DTICK  message.  If you specify a negative one (-1) for the block number,  all the blocks in the model will receive the E3DTICK message."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DStopTick"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DStopTick(${1:@integer blockNumber})${2:;}$0"
          	description: "Stops the E3D timer for the specific block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DCollisionShow"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DCollisionShow(${1:@integer objectID}, ${2:@integer show})${3:;}$0"
          	description: "Shows the collision rect for the specified object.  This will currently only show up once the object has moved."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectBounds"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectBounds(${1:@integer objectID}, ${2:@integer which})${3:;}$0"
          	description: "Returns the bounds of the specified object in the 3D world.   Which specifies what part of the bounds information is to be  returned.  Zero through eight return values that are in World  Coordinates.  World Coordinates are based on the objects position  in the E3D World.  10 through 18 return values that are in Object  Coordinates.  Object Coordinates are based on the object position  as if the object were located at the origin. Which: 0: min X, 1: min Y, 2: min Z, 3: max X, 4: max Y, 5: max Z, 6: X  length, 7: Y length, 8: Z length, 10: min X (obj Bounds), 11: min  Y, 12: min Z, 13: max X, 14: max Y, 15: max Z, 16: X length (obj  Bounds), 17: Y length (obj Bounds), 18: Z length (obj Bounds)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectIDs"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectIDs(${1:@integer which}, ${2:@integer theArray})${3:;}$0"
          	description: "This function fills the passed in array of longs with the object ids  of all the 3D objects in the 3D window.  The ‘which’ parameter  can be used to specify which objects you want to list. Which: > 0: groupTag, -1: everything, -2: Paths, -3: WayPoints, -4: ExtendItems, -5: Players, -6: wheeled vehicles."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectInfo(${1:@integer objectID}, ${2:@integer which})${3:;}$0"
          	description: "Returns the specified information about the object.  ‘Which’ takes  the following arguments: 0: userTag, 1: objectID, 2: groupTag, 3:  savedInEnvironmentFile Flag."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetObjectType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetObjectType(${1:@unsigned char *ObjectName})${2:;}$0"
          	description: "This function returns the type of a 3D object, based on the name.   The possible type values are: 1: block, 2: scenery, 3: item, 4: person, 5: vehicle. If the object doesn’t fall into any of these categories, a zero will be  returned."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DObjectPropertySet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DObjectPropertySet(${1:@integer objectID}, ${2:@integer which}, ${3:@real value})${4:;}$0"
          	description: "which: 1: collidable.  (true/false)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DSetVisibility"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DSetVisibility(${1:@integer objectID}, ${2:@integer vis})${3:;}$0"
          	description: "Sets the visibility flag on the item specified by objectID. A vis  value of TRUE means the item is visible. (The default.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DExec"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DExec(${1:@string script})${2:;}$0"
          	description: "Executes the contents of the string script through the Torque compiler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DExecFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DExecFile(${1:@string path})${2:;}$0"
          	description: "Executes a .cs file through the Torque compiler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DCollisionBlocker"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DCollisionBlocker(${1:@integer objectID}, ${2:@integer blocker})${3:;}$0"
          	description: "Collision optimization. Used by the Transport and Convey Item  blocks to inform a 3D object that it is in a queuing situation and  can optimize its collision calculations by only looking at the object  specified in the blocker argument. Blocker should be the object ID  of the object that is in front of the specified object in the queue."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DGetCamera"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DGetCamera()${1:;}$0"
          	description: "Returns the ObjectID for the camera object."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DLogEvents"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "E3DLogEvents(${1:@integer logFlag})${2:;}$0"
          	description: "Turns on (or off) logging of the Events in the E3D window.  Logging will write messages to the Console.log file in the ExtendSim7  folder when events occur in the E3D window. Logging is off by  default.  If logFlag is true (1), it will be turned on."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DMessageInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DMessageInfo(${1:@integer which})${2:;}$0"
          	description: "Returns information about a message sent by the E3D window to  ExtendSim. This function is used in the E3DCollision message  handler to request the 3D object ID of the object that is about to  collide (which=1) or the object that is about to be collided with (which=2)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DNeighborDetection"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DNeighborDetection(${1:@integer objectID}, ${2:@integer which}, ${3:@real distance}, ${4:@real angle}, ${5:@integer sort}, ${6:@integer neighbors[]})${7:;}$0"
          	description: "This function acts like ‘vision’ for objects in the E3D world.  It  detects all the objects within a certain range of a specified item,  and returns the number of objects ‘seen’, as well as filling an array  with the Object Ids of the objects.  Which is used to specify which  types of items are to be detected, see below for possible values. Distance determines how far to detect other objects.  Angle determines how broadly to detect the objects, and the angle starts  straight ahead and goes both right and left, so 3.14 (Pi radians)  will detect everything on both sides, front to back.  Sort determines if the object Ids should be sorted on return, and neighbors is  the array of objects Ids that are returned. An angle value of zero is  special cased to mean don’t check the angle.  This should have the  same affect as an angle value of 3.14. Which: 0: everything 1: ExtendItems."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DObjectExists"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DObjectExists(${1:@integer objectID})${2:;}$0"
          	description: "Returns a true (1) if the specified object exists, and a false (0) if it  doesn’t."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DPlaySound"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DPlaySound(${1:@string soundProfileName}, ${2:@real volume}, ${3:@real x}, ${4:@real y}, ${5:@real z})${6:;}$0"
          	description: "Plays the sound specified by soundProfileName. At the location  specified by x,y,z."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "E3DUses3D"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "E3DUses3D()${1:;}$0"
          	description: "Returns the value of the uses3D flag from the sim setup dialog for  the active model."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BlockName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "BlockName(${1:@integer i})${2:;}$0"
          	description: "Looks in global slot i and returns either the name of the block, the  first 255 characters of text, or an empty string if it is an unused slot.  For example, you can use this function to read text information that  you have added or modified in a model."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BlockRect"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BlockRect(${1:@integer blockNumber}, ${2:@integer array[]}, ${3:@integer useAnimation})${4:;}$0"
          	description: "Virtually the same as the getBlockTypePosition function, except for  the useAnimation argument. This argument specifies (with a true/ false, 1/0 value,) whether or not the animation objects are to be  included in the returned rectangle. If useAnimation is true, the rectangle will include the positions of the animation objects that are off  the icon in the rectangle, otherwise it will not."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FindInHierarchy"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FindInHierarchy(${1:@string FindBlockName}, ${2:@string FindBlockLabel}, ${3:@string FindDialogName}, ${4:@integer FindDialog})${5:;}$0"
          	description: "This function is used by several blocks, including the Catch Item  and Throw Item blocks in the Item library, to locate the corresponding block associated with the current block. (For example, to find a  Catch corresponding to a Throw, and vice versa.) Please see the  Catch and Throw blocks for an example of how to use this function.  The function returns the block number of the resulting block found;  it returns a –1 if no matching block is found. FindBlockName is the  name of the block to be found (e.g. ‘Catch’, or ‘Throw’). FindBlockLabel is the block label of the block to be found. FindDialogName is  the name of the dialog item you wish to search for. The FindDialogName field should be filled with the dialog item name, a colon, and  then the value of the dialog item that you wish to search for. For  example Item:54 will search for the presence of a dialog item with  the name “item”, and the value “54”. FindDialog takes the following  values: 0: just check the block name, and the block label. 1: just  check the block name and the dialog item name and value. 2: check  the name, label, and dialog item."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FindInHierarchy2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FindInHierarchy2(${1:@integer blockNumber}, ${2:@string findBlockName}, ${3:@string findBlockLabel}, ${4:@integer findDialog})${5:;}$0"
          	description: "The same as the FindInHierarchy function except it takes a block  number argument."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetBlockLabel"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetBlockLabel(${1:@integer i})${2:;}$0"
          	description: "Returns the label string for the global block i."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetBlockType"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetBlockType(${1:@integer i})${2:;}$0"
          	description: "Returns the block type string for the global block i (e.g. Math or  Holding)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetBlockTypePosition"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetBlockTypePosition(${1:@integer i}, ${2:@integer intArray[4]})${3:;}$0"
          	description: "Returns the type (not the block type string as in GetBlockType()  above) and position for the global block i. Types are as follows: 0: empty slot 1: anchor point 2: text 3: block 4: hierarchical block 5: embedded object 6: Slider, Switch, or Meter (from the Model > Controls command) Declare intArray as follows: integer intArray[4]; On return, intarray[0] will contain the top, intarray[1] left, intarray[2] bottom, intarray[3] right position pixel values. To include animation objects, see the blockRect function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetEnclosingHBlockNum"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetEnclosingHBlockNum()${1:;}$0"
          	description: "Returns the global block number for the enclosing hierarchical  block. Returns -1 if there is no enclosing hierarchical block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetEnclosingHBlockNum2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetEnclosingHBlockNum2(${1:@integer block})${2:;}$0"
          	description: "This is the same as GetEnclosingHBlockNum(), except it refers to a  global block number."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetStaticNames"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetStaticNames(${1:@integer blockNumber}, ${2:@array names}, ${3:@array types})${4:;}$0"
          	description: "Fills the names and types arrays with the names and types of all the  static variables defined in the block structure. Names should be an  array of strings, and types should be an array of longs. The value of  the cells of the types array will be from the following list: 3: LONGTYPE 6: DOUBLETYPE 7: STRING255TYPE 8: STRING15TYPE 9: STRING31TYPE 10: STRING63TYPE 11: STRING127TYPE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GlobalToLocal"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GlobalToLocal(${1:@integer blockNumber})${2:;}$0"
          	description: "Returns the local block number for the specified block if it is contained in an H-block. Returns a -1 if the block is not contained in an  H-block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LocalNumBlocks"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LocalNumBlocks()${1:;}$0"
          	description: "Number of internal blocks in the hierarchical block from which this  function is called. Blocks are numbered from 0 to LocalNumBlocks()-1."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LocalNumBlocks2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LocalNumBlocks2(${1:@integer block})${2:;}$0"
          	description: "This is same as LocalNumBlock(), except it refers to a global block  number."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LocalToGlobal"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LocalToGlobal(${1:@integer i})${2:;}$0"
          	description: "Converts a local number in the hierarchical block from which this  function is called to a global number."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LocalToGlobal2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LocalToGlobal2(${1:@integer HBlockNum}, ${2:@integer localBlockNum})${3:;}$0"
          	description: "Similar to LocalToGlobal, this function will return the global blocknumber for a local one. The difference is that this function allows  you to specify which HBlock in the model is used as the context for  the local block number via the first parameter HblockNum."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MakeOptimizerBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MakeOptimizerBlock(${1:@integer trueFalse})${2:;}$0"
          	description: "This function tags the block as an optimizer block so that the Run >  Run Optimization command will send a RUN message to that  block, assuming there is a 'Run' button in the block that will run  the optimization and has an 'ON RUN' message handler. Call this  function in 'CREATEBLOCK.' See the Optimizer block (Value  library)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MyBlockNumber"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MyBlockNumber()${1:;}$0"
          	description: "Global number of the block in which the function is called. Note  that this number is the first number shown in parentheses in the  block dialog’s title."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MyLocalBlockNumber"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MyLocalBlockNumber()${1:;}$0"
          	description: "Local number of the block in which the function is called. Note that  this number is the second number shown in parentheses in the block  dialog’s title."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NumBlocks"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "NumBlocks()${1:;}$0"
          	description: "Global number of blocks in the model, including text blocks and  unused slots. Blocks are numbered from 0 to NumBlocks()-1."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetBlockLabel"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetBlockLabel(${1:@integer i}, ${2:@string str})${3:;}$0"
          	description: "Sets the label for the global block i to str. Blocks are numbered from  0 to NumBlocks()-1."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ShowBlockLabel"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ShowBlockLabel(${1:@integer i}, ${2:@integer show})${3:;}$0"
          	description: "Labels are shown by default. To hide a block’s label, use this function  with the global block number i and FALSE for show."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConBlocks"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetConBlocks(${1:@integer block}, ${2:@integer conn}, ${3:@integer intArray[][2]})${4:;}$0"
          	description: "Returns the number of blocks attached to the connector. On return,  the rows of intArray are used to index the connected blocks (if there  are three blocks connected, there are three rows). The first column  of intArray contains the global block number of a connected block,  the second column contains the connector number of that connected block. Rows and columns are indexed 0 to n-1. IntArray is  declared as a dynamic array: integer intArray[][2];."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConHBlocks"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetConHBlocks(${1:@integer blockNumber}, ${2:@integer iConn}, ${3:@array y[]})${4:;}$0"
          	description: "Similar to the GetConBlocks() function, above, but returns a list of  connected Hblocks. You can also start from a textblock or anchor  point if you know the block number (connector numbers are zero  for textblocks or anchor points)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetConName(${1:@integer block}, ${2:@integer conn})${3:;}$0"
          	description: "Name of the connector."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConnectedTextBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetConnectedTextBlock(${1:@integer block}, ${2:@integer conn})${3:;}$0"
          	description: "If block is positive, returns the block number of the named connection (bypasses connector text blocks inside an HBlock and goes out  HBlock connector) connected to the connector conn of block number block. If block is negative, stay inside the HBlock (can return the  connector text block inside of an HBlock). Use the GetBlockName()  function to retrieve the text of the named connection."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConnectedType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetConnectedType(${1:@integer connName})${2:;}$0"
          	description: "Tells the type of connector connected to this connector. This is useful for determining what is connected to a universal connector. You  can read the result by number or their associated ExtendSim constants: 13 value connector 14 discrete connector 15 universal connector 16 diamond connector 25 flow connector."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConnectedType2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetConnectedType2(${1:@integer block}, ${2:@integer conn})${3:;}$0"
          	description: "This is similar to GetConnectedType(), except it refers to a global  block number and conn is the ith connector (0 to n-1)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConnectionColor"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetConnectionColor(${1:@integer blockFrom}, ${2:@integer conFrom}, ${3:@integer blockTo}, ${4:@integer conTo}, ${5:@integer colorArray[]})${6:;}$0"
          	description: "Fills the color array (three integer element) with the hue, saturation,  and brightness (HSV) values for the color of the connection line.  The HSV color palette is on page 252 of the printed Developer Reference. Returns 0 for success or a negative value to indicate failure."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConnectorPosition"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetConnectorPosition(${1:@integer blockNumber}, ${2:@integer con}, ${3:@integer array[4]})${4:;}$0"
          	description: "Returns the position of the specified connector in pixels.  Array  should be defined as a four row integer array (integer  array[4];), which on return from the function call will be filled  with the four values: array[0] = top array[1] = left array[2] = bottom array[3] = right."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConnectorType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetConnectorType(${1:@integer blockNumber}, ${2:@integer con})${3:;}$0"
          	description: "Returns the connector type of the specified connector. 13 value connector 14 discrete connector 15 universal connector 16 diamond connector 25 flow connector."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConNumber"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetConNumber(${1:@integer blockNumber}, ${2:@string conNameStr})${3:;}$0"
          	description: "Returns the Connector number of the connector of the specified  name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetEnclosingHBlockCon"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetEnclosingHBlockCon(${1:@integer blockNumber}, ${2:@integer conNum})${3:;}$0"
          	description: "Used to find the connector index of the outer connector, given a  blockNumber and connector index inside the HBlock that is connected to the HBlock’s internal connector text. Returns connector  number of the enclosing Hblock’s outer conector or -1 if not an  Hblock."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetIndexedConValue"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetIndexedConValue(${1:@integer conn})${2:;}$0"
          	description: "Gets the connector’s current value. For blocks with many similar  connectors, use this in a loop instead of lots of statements like  “value[22]=con23In”. The connectors are indexed from 0; the  indexes are the same as the order of the connector names in the connectors pane."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetIndexedConValue2"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetIndexedConValue2(${1:@integer block}, ${2:@integer conn})${3:;}$0"
          	description: "This is same as GetIndexedConValue(), except it refers to a global  block number."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetIntermediateBlocks"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetIntermediateBlocks(${1:@integer blockNum1}, ${2:@integer conn1}, ${3:@integer blockNum2}, ${4:@integer conn2}, ${5:@integer array[2]})${6:;}$0"
          	description: "Returns number of connected dot blocks, text blocks, and connectors between two blocks. Fills the array with information about the  blocks. See GetConBlocks function for definition of the array. If  blockNum2 is negative, returns above information between a block (blockNum1) and the text block or connector text block specified by  blockNum2 (can be inside a hierarchical block)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetNumCons"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetNumCons(${1:@integer block})${2:;}$0"
          	description: "Number of connectors on the block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetRightClickedCon"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetRightClickedCon()${1:;}$0"
          	description: "This function returns the conn number of the last connector that  was right clicked on.  This function should be called in the CONNECTORRIGHTCLICK message."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IsConVisible"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IsConVisible(${1:@integer blockNumber}, ${2:@integer conn})${3:;}$0"
          	description: "Tests the specified connector for visibility. Returns TRUE if the connector is visible, FALSE otherwise."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MakeFeedbackBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MakeFeedbackBlock(${1:@integer feedBack})${2:;}$0"
          	description: "If feedBack is TRUE, this function causes ExtendSim to terminate  the flow order search for this block. For multiple feedback cases, this  function prevents feedback from unexpectedly changing the main  flow simulation order. For an example, see the Feedback block (Utilities library)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NodeGetCurrentValue"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "NodeGetCurrentValue(${1:@integer nodeIDIndex})${2:;}$0"
          	description: "Returns the currently set value of the connected block connectors.  See NodeGetIDIndex(), below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NodeGetIDIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "NodeGetIDIndex(${1:@integer blockNumber}, ${2:@integer conNum})${3:;}$0"
          	description: "Returns the nodeID for a connected network of block connectors.  Each connected network has a unique nodeID, which can change  when additional block connectors are connected or the model is  reopened. The nodeID is equivalent to an index of a real value that  holds the set value of the connected connectors."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetConnectionColor"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetConnectionColor(${1:@integer blockFrom}, ${2:@integer conFrom}, ${3:@integer blockTo}, ${4:@integer conTo}, ${5:@integer hue}, ${6:@integer saturation}, ${7:@integer value})${8:;}$0"
          	description: "Sets the color value of the specified connection line. See “Color palette” on page 1114 for a description of the hue, saturation, and value  arguments. This function returns a TRUE if it succeeds, and a  FALSE if it fails."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetConVisibility"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetConVisibility(${1:@integer blockNumber}, ${2:@integer conn}, ${3:@integer visible})${4:;}$0"
          	description: "Sets the visibility flag on an individual connector.  This function can  be used by block developers to hide and show connectors based on  choices the user has made in the dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetIndexedConValue"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetIndexedConValue(${1:@integer conn}, ${2:@real value})${3:;}$0"
          	description: "Sets the connector’s numerical value. For blocks with many similar  connectors, use this in a loop instead of lots of statements like  “con23Out=value[22]”. The connectors are indexed from 0; the  indexes are the same as the order of the connector names in the connectors pane."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetIndexedConValue2"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetIndexedConValue2(${1:@integer block}, ${2:@integer conn}, ${3:@real value})${4:;}$0"
          	description: "This is same as SetIndexedConValue(), except it refers to a global  block number."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetSelectedConnectionColor"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetSelectedConnectionColor(${1:@integer hue}, ${2:@integer saturation}, ${3:@integer value})${4:;}$0"
          	description: "The setSelectedConnectionColor function sets the color value of all  selected connections. See “Color palette” on page 1114 for a description of the hue, saturation and value arguments. This function  returns a TRUE if it succeeds, and a FALSE if it fails."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayChangedWhichCon"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "ConArrayChangedWhichCon()${1:;}$0"
          	description: "When the user drags to get more or less variable connectors, the  block gets a CONARRAYCHANGED message. This function  returns the owning connector name, as a string, that is being  dragged. Use this string in the ConArrayGetNumCons() function to  get the actual number of connectors during the dragging operation."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayGetCollapsed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConArrayGetCollapsed(${1:@integer blockNumber}, ${2:@string origConName})${3:;}$0"
          	description: "Returns True if the specified connector is collapsed, or false if it is  not."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayGetConNumber"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConArrayGetConNumber(${1:@integer blockNumber}, ${2:@string origConNameStr}, ${3:@integer nthConn})${4:;}$0"
          	description: "Returns the connector number of the nth connector in this array.  OrigConNameStr is the owning connector name as a string. NthConn is the index of the array connector, starting from 0 for the  owning connector, to the number of connectors in this array minus  1 for the last connector. The returned connector number can be  used in the other connector functions."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayGetDirection"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConArrayGetDirection(${1:@integer blockNumber}, ${2:@string origConNameStr})${3:;}$0"
          	description: "Returns the array direction as: 0 top, 1 right, 2 bottom, 3 left. If not  an array connector or an error, returns -1."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayGetNthCon"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConArrayGetNthCon(${1:@integer conn})${2:;}$0"
          	description: "Given a block connector number, returns the member index of its  connector array (e.g. Given the block connector number of  ConIn[3] (could be 253), returns 3 meaning ConIn[3]). A -1  returned is an error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayGetNthCon2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConArrayGetNthCon2(${1:@integer blockNumber}, ${2:@integer conn})${3:;}$0"
          	description: "Same as ConArrayGetNthCon except it has an additional argument  to specify the connector on a different block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayGetNumCons"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConArrayGetNumCons(${1:@integer blockNumber}, ${2:@string origConNameStr})${3:;}$0"
          	description: "Returns the number of connectors in this array. If there are no added  array connectors, returns 1 for the original connector. OrigConNameStr is the owning connector name as a string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayGetOwnerCon"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConArrayGetOwnerCon(${1:@integer conn})${2:;}$0"
          	description: "Given a block connector number, returns the block connector number of the owning (originating) connector of a connector array (e.g.  Given the block connector number of ConIn[3] (could be 253),  returns the block connector number of ConIn[0]). A -1 returned is  an error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayGetTotalCons"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConArrayGetTotalCons(${1:@integer blockNumber})${2:;}$0"
          	description: "Returns the total number of connectors in this block, including  array connectors. Used to prevent a dragged connector array from  adding too many connectors, causing the block to have more than  its limit of 255 connectors."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayGetValue"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "ConArrayGetValue(${1:@integer ConName}, ${2:@integer nthConn})${3:;}$0"
          	description: "Returns the value of the nth connector of the array owned by ConName. ConName can be the name of the connector without quotes  or, new for V7, the index from 0 to numCons-1 as a constant or  variable (If the compiler detects a connector name, it turns it into an  index rather than evaluating its value)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArrayMsgFromCon"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConArrayMsgFromCon()${1:;}$0"
          	description: "Returns the index of the connector that received the message in an  array. For example, if the Con1In message handler received a message, calling this function at the beginning of the message handler  would return which connector in this array (from 0 to num-1)  received the message."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArraySendMsgToAllCons"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConArraySendMsgToAllCons(${1:@integer origConName}, ${2:@integer nthConn})${3:;}$0"
          	description: "Sends a connector message to all connectors connected to the specified Connector.  See SendMsgToAllCons."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArraySendMsgToInputs"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConArraySendMsgToInputs(${1:@integer origConName}, ${2:@integer nthConn})${3:;}$0"
          	description: "Sends a connector message to input connectors connected to the  specified Connector.  See SendMsgToInputs."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArraySendMsgToOutputs"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConArraySendMsgToOutputs(${1:@integer origConName}, ${2:@integer nthConn})${3:;}$0"
          	description: "Sends a connector message to output connectors connected to the  specified Connector.  See SendMsgToOutputs."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArraySetCollapsed"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConArraySetCollapsed(${1:@integer blockNumber}, ${2:@string origConName}, ${3:@integer trueOrFalse})${4:;}$0"
          	description: "Sets the collapsed state on the specified connector.  True will collapse  the connector, and False will uncollapse it."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArraySetNumCons"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConArraySetNumCons(${1:@integer blockNumber}, ${2:@string origConNameStr}, ${3:@integer newNumCons}, ${4:@integer trueToIgnoreConnections})${5:;}$0"
          	description: "Call this to set the number of connectors in a variable connector (a 1  for NewNumCons means to only keep the original connector). If  trueToIgnoreConnections is TRUE, the user can delete connectors  that have connections on them. If trueToIgnoreConnections is  FALSE, connectors that have connections on them will not be  deleted. This means that connections may prevent all of the desired  connectors from being deleted."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConArraySetValue"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConArraySetValue(${1:@integer ConName}, ${2:@integer nthConn}, ${3:@real value})${4:;}$0"
          	description: "Sets the value of the nth connector of the array owned by ConName.  ConName can be the name of the connector without quotes or, new  for V7, the index from 0 to numCons-1 as a constant or variable (If  the compiler detects a connector name (not a string), it turns it into  an index rather than evaluating its value)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConnectorLabelsGet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConnectorLabelsGet(${1:@integer blockNumber}, ${2:@integer origConNum}, ${3:@string labelsStrArray[]})${4:;}$0"
          	description: "Call this to get the connector labels for single connectors or connector arrays. labelsStrArray is any kind of string array (local, static, or  dynamic)  that will contains all the labels used, one per array element, which will allow up to n labels to be retrieved. Each label is  the ith connector in that connector array (0th for single connectors).  Returns the number of labels retrieved."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConnectorLabelsSet"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConnectorLabelsSet(${1:@integer blockNumber}, ${2:@integer origConNum}, ${3:@integer numLabels}, ${4:@string labelsStrArray[]}, ${5:@integer position}, ${6:@integer hue}, ${7:@integer saturation}, ${8:@integer value})${9:;}$0"
          	description: "Call this to set the connector labels for single connectors or connector arrays. labelsStrArray is any kind of string array (local, static, or  dynamic) containing all the labels needed, one per array element.  The labels can contain combinations of style information such as  <biur> for bold, italics, underlined, right adjusted. Positions are: 0  top, 1 right, 2 bottom, 3 left."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConnectorToolTipGet"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "ConnectorToolTipGet(${1:@integer blockNumber}, ${2:@integer connectorIndex})${3:;}$0"
          	description: "Gets the current string value of a connector tool tip from a block  and connector. This is useful if you want to show what block your  block is connected to, like the plotter, batch, and select blocks."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConnectorToolTipSet"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConnectorToolTipSet(${1:@string string}, ${2:@integer replace})${3:;}$0"
          	description: "Allows you to set the string that will be displayed.  If the replace flag  is true, the default string generated by ExtendSim will be replaced, if  it is false, this string will be appended to the default string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConnectorToolTipWhich"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConnectorToolTipWhich()${1:;}$0"
          	description: "When the ConnectorToolTip message is received, this function  returns the connector index of the connector the cursor is over. This  function is also used in the ConnectionMake message to return the  connector being connected."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AppendPopupLabels"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AppendPopupLabels(${1:@string variableNameStr}, ${2:@string theLabels})${3:;}$0"
          	description: "This function appends the specified string onto the labels associated  with the named popup menu. Popup menu labels can total up to  5100 characters. This function is the method for adding menu  labels. VariableNameStr is the dialog item name as a string or in  quotes. See SetPopupLabels() below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CreatePopupMenu"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CreatePopupMenu(${1:@string string1}, ${2:@string string2}, ${3:@integer initialSelection})${4:;}$0"
          	description: "Creates a Popup at the last location the user clicked. This function  can be used in conjunction with the on dialogClick message handler,  the whichDialogItemClicked function, and the whichDTCellClicked function to create a popup menu that appears on a dialog  item, or data table cell in response to a user’s click. See the code of  the on dialogClick messagehandler of the Activity block (Item  library) for an example of how to use this function. Also see PopupMenuArray(), below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DialogHasEmbeddedObject"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DialogHasEmbeddedObject(${1:@integer blockNumber})${2:;}$0"
          	description: "Returns the dialog item name if the specified block contains any  embedded object dialog items in its dialog. This function will return  an empty string '' if there are no dialog items of this type in the dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DialogItemVisible"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DialogItemVisible(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@integer clones})${4:;}$0"
          	description: "Returns a true value if the specified dialog item is visible. If the  Clones value is a one (TRUE) this function checks to see if any  clones of the specified item are visible; otherwise it checks to see if  the primary item is visible."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIGetID"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIGetID(${1:@integer blockNumber}, ${2:@string name})${3:;}$0"
          	description: "Returns a dialog item ID number.  This is used in the LINKCONTENT and LINKSTRUCTURE message handlers to help identify  which dialog item is getting the message."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIMoveBy"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIMoveBy(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer y}, ${4:@integer x})${5:;}$0"
          	description: "Offsets the dialog item by the values of the y and x parameters."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIMoveTo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIMoveTo(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer top}, ${4:@integer left})${5:;}$0"
          	description: "Moves the specified dialog item to the y and x location specified by  the top and left variables."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIMsgNumber"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIMsgNumber(${1:@integer blockNumber}, ${2:@string name})${3:;}$0"
          	description: "Returns the message number associated with a dialog item.  Used to  send a dialog item message to a block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIPopupButton"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIPopupButton(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer behavesAsButton})${4:;}$0"
          	description: "Changes the behavior of the specified popup menu so that it will not  show the typical popup behavior when it is clicked, but will instead  behave like a button (Sending a message to the MODL code, but  not displaying a popup menu). This is used when the block developer wants something that looks like a popup menu, but has a button’s behavior."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIPositionGet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIPositionGet(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer array})${4:;}$0"
          	description: "Gets the position of a dialog item specified by blockNumber, and  dialogItemName. The coordinates of the dialog items location will  be placed into the integer array position.  Position needs to be  declared as: integer array[4];."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIPositionHome"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIPositionHome(${1:@integer blockNumber}, ${2:@string name})${3:;}$0"
          	description: "Resets the location of the dialog item back to the position and size  defined in the structure."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIPositionSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIPositionSet(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer top}, ${4:@integer left}, ${5:@integer bottom}, ${6:@integer right})${7:;}$0"
          	description: "Sets the position of the specified dialog item. This function also  includes the bottom and right arguments so you can change the displayed size of the dialog item as well."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DisableDialogItem"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DisableDialogItem(${1:@string variableNameStr}, ${2:@Integer TRUEFALSE})${3:;}$0"
          	description: "Disables, or enables the specified dialog item."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DisableDialogItem2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DisableDialogItem2(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer disableEnable})${4:;}$0"
          	description: "Disables the specified Dialog Item. This function differs from the  DisableDialogItem() function in that it takes a block number argument so you can disable a dialog item from a remote block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DISetFocus"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DISetFocus(${1:@integer blockNumber}, ${2:@string dialogItemName})${3:;}$0"
          	description: "Sets the focus on the specified dialog item. Returns 0 for success or a  negative value to indicate failure."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DITitleGet"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DITitleGet(${1:@integer blockNumber}, ${2:@string dialogItemName})${3:;}$0"
          	description: "Returns the string title of the dialog item. For dialog items like radio  buttons and check boxes, the title is the text that appears on the dialog. Use this function to retrieve the string if it has been set by the  function DITitleSet."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DITitleSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DITitleSet(${1:@integer blockNumber}, ${2:@string name}, ${3:@string title})${4:;}$0"
          	description: "Sets the title of a dialog item.  Useful for Dialog items like radio buttons and checkboxes where there is no other way to change the title  of the dialog item on the fly."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDialogColors"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDialogColors(${1:@integer blockNumber}, ${2:@integer HSVColorArray[][3]})${3:;}$0"
          	description: "Copies all the color information from the dialog colors into the  color array. Used to save all the colors in a dialog in on dialog close.  The HSVColorArray is declared as a dynamic array: integer HSVColorArray[][3];."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDialogItemColor"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDialogItemColor(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@integer HSVColorArray[3]})${4:;}$0"
          	description: "Gets a color value associated with the dialog item."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDialogItemInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDialogItemInfo(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@integer which})${4:;}$0"
          	description: "Returns TRUE if which qualities are true for the dialog item: 0: exist, 1: hidden, 2: enabled, 3: display only. Returns the values for: 4: dialog item type, 5: rows, 6: columns, 7:  width, 8: height. Dialog item types are: 1: button, 2: checkbox, 3: radiobutton, 4:  meter, 5: parameter, 6: slider, 7: datatable, 8: edittext, 9: stattext, 12:  switch, 13: stringtable, 14: plotpane, 16: popupmenu, 17:  embedobject, 18: dynamic text, 19: textframe, 20: calendar, 21:  edittext31."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDialogItemLabel"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetDialogItemLabel(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@integer n})${4:;}$0"
          	description: "Returns the nth item label. For example, the nth item on a popup  menu or the nth column header in a data table. Returns an empty  string '' if the wrong type of item or no label is found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDialogNames"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDialogNames(${1:@integer block}, ${2:@string nameArray[]}, ${3:@integer typeArray[]})${4:;}$0"
          	description: "Returns a list of the dialog variables in the specified block. Both  nameArray and typeArray are dynamic arrays. This function returns  the number of items in the target block’s dialog. For each item in the  block’s dialog, the string array will contain the name of the dialog  item and typeArray will contain the type of dialog item. Values for  typeArray are: 1:Button, 2:Check Box, 3:Radio Button, 4:Meter, 5:Parameter, 6:Slider, 7:Data Table, 8:Editable Text, 9:Static  Text, 12:Switch, 13:Text Table, 16:Popup Menu, 17:Embedded  Object, 18:Dynamic Text, 19:Text Frame, 20:Calendar, and  21:Editable Text31 (31 characters)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDialogVariable"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetDialogVariable(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@integer row}, ${4:@integer col})${5:;}$0"
          	description: "Returns the string value of the named variable (variableNameStr in quotes or string). If the variable is a numeric  parameter or a control (such as a checkbox, slider, and so on), you  would call StringToReal to convert the returned string to a numeric  value. The variable can be any dialog item, static variable, global  variable, or dynamic array. Row and col apply to the cells of a data  table or text table. For Sliders or Meters, row must be zero and col is  0 for the minimum, 1 for the maximum, and 2 for the value. Row  and col are ignored for other types of items."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDraggedCloneList"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDraggedCloneList(${1:@integer blockNums[]}, ${2:@string variableNames[]})${3:;}$0"
          	description: "If you put this function call in a DRAGCLONETOBLOCK message handler, it returns the number of clones dragged onto a block.  It also fills the dynamic array parameters with the block numbers  and variable names of the clones so you can get and set their values  with GetDialogVariable() and SetDialogVariable() functions. This  function is used in the Optimizer block (Value library)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetSystemColor"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetSystemColor(${1:@integer whichPart}, ${2:@integer whichColor})${3:;}$0"
          	description: "Gets the system colors so that they can be matched in a dialog.  Returns whichPart: 1:R, 2:G, 3:B, 4:H, 5:S, 6:V, 7:xxBBGGRR whichColor: 0:Dialog BackGround, 1:ToolTipColor."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "HideDialogItem"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "HideDialogItem(${1:@string variableNameStr}, ${2:@integer hideShow})${3:;}$0"
          	description: "Hides the named dialog item if hideShow is TRUE.  DialogNameStr is the dialog item name as a string or in quotes.  Returns 0 if it succeeds."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "HideDialogItem2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "HideDialogItem2(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer hideShow})${4:;}$0"
          	description: "Set the hidden/shown status of the item.  See the HideDialogItem()  function, with the addition of the block number argument, which  allows you to call the function from outside a block. Returns 0 if it  succeeds."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LastSetDialogVariableString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "LastSetDialogVariableString()${1:;}$0"
          	description: "Returns the last string value that was set by SetDialogVariable. This  is useful if one is setting the value of a dialog item like a popup  menu, where the stored value is not the value that the popup menu  contains, but rather an additional string variable. In this case, using  the WhoInvoked() function, below, and this function you can have  the code of the block change the correct string for the dialog item, so  the SetDialogVariable function will react as the user expects, even  though the data is not directly contained in the dialog item."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenAndSelectDialogItem"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OpenAndSelectDialogItem(${1:@integer blockNumber}, ${2:@string variableNameStr})${3:;}$0"
          	description: "Obsolete. Please see OpenAndSelectDialogItem2(), just below this  function. This version of the function did not have the row and column indexes to select a cell in a data table."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenAndSelectDialogItem2"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OpenAndSelectDialogItem2(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@integer row}, ${4:@integer col})${5:;}$0"
          	description: "Opens the block's dialog, highlighting (selecting) the dialog item  corresponding to varName. If the item is a data table, row and col  are the indexes. Row and col are ignored if the item is not a data  table. If row and col are -1, selects the entire data table."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PopupCanceled"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PopupCanceled()${1:;}$0"
          	description: "Returns whether or not the last popup menu was canceled. This can  be called immediately after a ‘flying’ popup menu has been created,  to determine if the user canceled the popup menu action or not.  Canceling would be clicking off the popup menu, without making a  selection."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PopupItemParse"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "PopupItemParse(${1:@string itemString})${2:;}$0"
          	description: "This function parses the string that is passed in, and removes the  special characters that are used in certain dialog item contexts. Specifically, it removes the formatting notation (e.g. <RB> for right  adjusted, bold), characters that are user for formatting, and returns  the stripped string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PopupMenuAppendArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PopupMenuAppendArray(${1:@string dialogItemName}, ${2:@stringArray array})${3:;}$0"
          	description: "Appends the contents of the string array array to the popup menu  specified by dialogItemName."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PopupMenuArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PopupMenuArray(${1:@string theArray[]}, ${2:@integer initialValue})${3:;}$0"
          	description: "This function creates a flying popup menu based on the strings in  theArray, maximum 20 strings (5100 characters total).  Other than  the fact that an array of strings is passed in instead of separate  strings, it’s exactly the same as the CreatePopupMenu function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDialogColors"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetDialogColors(${1:@integer blockNumber}, ${2:@integer HSVColorArray[][3]})${3:;}$0"
          	description: "Sets all the colors of the dialog items at once. Usually used with the  array from GetDialogColors(), above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDialogItemColor"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetDialogItemColor(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@longArray HSVValues})${4:;}$0"
          	description: "Sets a color value associated with the dialog item. Some items will  not redraw with this color, but instead have their color defined by  the operating system settings."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDialogVariable"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetDialogVariable(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@string value}, ${4:@integer row}, ${5:@integer col})${6:;}$0"
          	description: "Sets the value of the named variable to the given numeric or string  value. The variable can be any dialog item, static variable, global  variable, or dynamic array. Row and col apply to the cells of a data  table or text table. For Sliders or Meters, row must be zero and col is  0 for the minimum, 1 for the maximum, and 2 for the value. Row  and col are ignored for other types of items."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDialogVariableNoMsg"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetDialogVariableNoMsg(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@string value}, ${4:@integer row}, ${5:@integer col})${6:;}$0"
          	description: "Same as SetDialogVariable function, but doesn’t send a dialog item  message to the block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetPopupLabels"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetPopupLabels(${1:@string variableNameStr}, ${2:@string theLabels})${3:;}$0"
          	description: "Sets the named popup menu items to theLabels string. The menu  items should be separated by semicolons (;). This function is similar  to SetDataTableLabels in that the changes made by this call are not  permanent within a block's dialog. Changes made by this call are  permanent, however, for cloned copies of popup labels. VariableNameStr is the dialog item name as a string or in quotes. See  AppendPopupLablels() above to add more labels."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetVisibilityMonitoring"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetVisibilityMonitoring(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@integer monitor})${4:;}$0"
          	description: "Turns on monitoring of the visibility of a dialog item. This sets a flag  on a dialog item that makes it send a message to the block code (DIALOGITEMREFRESH) when the dialog item (Or one of its  clones) becomes visible. This is useful if you have a dialog item  whose redraw includes some time-consuming calculation and you  want to be able to turn off the calculation unless the dialog item is  visible."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WhichDialogItem"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "WhichDialogItem()${1:;}$0"
          	description: "Returns the name of the current dialog item in certain contexts.   This function can be used in the CELLACCEPT, DATATABLERESIZE, DATATABLESCROLLED, DIALOGITEMTOOLTIP,  DIALOGCLICK, or dialog item name message handlers."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WhoInvoked"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "WhoInvoked()${1:;}$0"
          	description: "Determines if a dialog item message handler was invoked by a call to  SetDialogVariable or by user interaction. Returns one if the invoke  was through SetDialogVariable, or zero if through user interaction.   Called in the message handler for the dialog item, this is useful if  you need the code to react differently when the dialog item value has  been set by the SetDialogVariable function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AppendDataTableLabels"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AppendDataTableLabels(${1:@string DTname}, ${2:@string theLabels})${3:;}$0"
          	description: "Appends another string of labels to the data table labels list of the  data table DTName."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DisableDTTabbing"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DisableDTTabbing(${1:@integer blockNumber}, ${2:@string DTname}, ${3:@integer disableDT})${4:;}$0"
          	description: "Disables or enables the tab key functionality for the specified data  table."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DTGrowButton"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DTGrowButton(${1:@integer blockNumber}, ${2:@string dtName}, ${3:@integer showButton})${4:;}$0"
          	description: "Shows/hides the resize/grow button on the specified data table.  This  button is hidden by default, as block code is necessary for the resizing functionality."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DTHasDDELink"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DTHasDDELink(${1:@integer blockNumber}, ${2:@string DTname})${3:;}$0"
          	description: "Returns true if the specified data table has an IPC advise link, or a  Paste link, associated with it."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DTPaneFixed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DTPaneFixed(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer fixed})${4:;}$0"
          	description: "Changes the behavior of the specified data table, setting or unsetting  its internal ‘fixed’ flag.  By default this flag is off, but if it is turned  on, the data table will retain its width when the number of columns  in the data is reduced, rather than resizing smaller, as it can do in the  default case."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DTToolTipSet"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DTToolTipSet(${1:@string captionString})${2:;}$0"
          	description: "In conjunction with the DataTableHover message handler discussed  on page 1063, this function allows you to show custom tool tips  when the cursor hovers over a data table."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DynamicDataTable"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DynamicDataTable(${1:@integer blockNumber}, ${2:@string dataTableName}, ${3:@array dynamicArrayName})${4:;}$0"
          	description: "This function attaches a dynamic array to a dialog data table. This  allows dynamically resizable data tables, and the ability to change  what data is displayed in a data table without recopying the data.  You can attach the array to the data table at any time, but it will need  to be reattached (dynamicDataTable will need to be called) each  time that the dynamic array is resized."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DynamicDataTable2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DynamicDataTable2(${1:@integer blockNumber}, ${2:@string dataTableName}, ${3:@string arrayName})${4:;}$0"
          	description: "Has the same behavior as the dynamicDataTable function, with the  exception that it can be called from an outside block, and doesn't  have to be called from within the block that contains the array.  Note  that the arrayName argument is the name of the array as a string, not  the array name itself."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DynamicDataTableVariableColumns"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DynamicDataTableVariableColumns(${1:@integer blockNumber}, ${2:@string dataTableName}, ${3:@array y}, ${4:@integer rows}, ${5:@integer columns})${6:;}$0"
          	description: "Similar to DynamicDatatable, with the addition of adding the specification of how many rows and columns the resulting data table will  have. It will correct the data to work with a new number of columns.  You must use the variable name of the data table, not the dynamic  array, to access the data."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DynamicDataTableVariableColumns2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DynamicDataTableVariableColumns2(${1:@integer blockNumber}, ${2:@string dataTableName}, ${3:@string arrayName}, ${4:@integer rows}, ${5:@integer columns})${6:;}$0"
          	description: "Has the same behavior as the dynamicDataTableVariableColumns  function, with the exception that it can be called from an outside  block, and doesn't have to be called from within the block that contains the array.  Note that the arrayName argument is the name of  the array as a string, not the array name itself."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDataTableSelection"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDataTableSelection(${1:@string DataTableName}, ${2:@integer integerArray})${3:;}$0"
          	description: "IntegerArray is a four element array declared as integer integerArray[4]. On return from the function, integerArray will contain the selection information in the following format: integerArray[0] -- top row integerArray[1] -- bottom row integerArray[2] -- left column integerArray[3] -- right column The integer value returned from the function will be the same as  integerArray[0] if there is a valid selection. The value will be a -2 if  there is no correct selection, and a -1 if an error of some other type  occurred (usually an invalid DataTableName.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDTOffset"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDTOffset(${1:@integer blockNumber}, ${2:@string DTName}, ${3:@integer clone}, ${4:@integer row})${5:;}$0"
          	description: "Returns the offset (How many rows or columns the table has been  scrolled) for a data table. If row is true, it returns the row offset, otherwise the column offset. If clone is true, it returns the value for the  first clone of the item found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RefreshDatatableCells"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "RefreshDatatableCells(${1:@integer blockNumber}, ${2:@string dataTableName}, ${3:@integer startRow}, ${4:@integer startCol}, ${5:@integer endRow}, ${6:@integer endCol})${7:;}$0"
          	description: "This function will redraw the specific cells of the named data table.  This needs to be used in conjunction with the dynamic data tables  defined by the function above, as they will not automatically update  the data displayed during a simulation run when the dynamic array  is modified."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ResizeDTDuringRead"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ResizeDTDuringRead(${1:@string name}, ${2:@integer oldRows}, ${3:@integer oldCols})${4:;}$0"
          	description: "This function will allow you to inform ExtendSim that a data table  is now a different size than it was in an earlier version. This should  only be called in the BlockRead message handler, and is most useful  when used with the GetFileReadVersion function to inform ExtendSim when a Data Table has been redefined. (See GetFileReadVersion  for more information.) OldRows and OldCols will contain the original size of the data table."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ScrollDTTo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ScrollDTTo(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer row}, ${4:@integer col})${5:;}$0"
          	description: "Scrolls the named data table to the indicated row and column. (0 successful, 1 failed)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDataTableCornerLabel"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetDataTableCornerLabel(${1:@string datatablename}, ${2:@string15 label})${3:;}$0"
          	description: "Sets a label to be displayed in the upper left-hand corner of the data  table. This area of the table is blank by default. The function will  return a zero if the call succeeded, and a value of one if there was an  error (most likely an incorrect DataTableName)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDataTableLabels"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetDataTableLabels(${1:@string DataTableName}, ${2:@string LabelString})${3:;}$0"
          	description: "The LabelString variable will be used as a replacement string for the  column header string of the specified data table. The format for this  string is the same as that used in the dialog editor when creating or  modifying a data table dialog item. The function will return a zero if  the call succeeded, and a value of one if there was an error (most  likely an incorrect DataTableName). Note: The change made by this  call is not a permanent change within the block’s dialog, you will  need to retain the new string in a variable in the block, and call this  function multiple times. See the code of the Information block (Item library) as an example of using this function. The change  made by this call is permanent for clones of data tables."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDataTableSelection"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetDataTableSelection(${1:@string name}, ${2:@integer startRow}, ${3:@integer startCol}, ${4:@integer endRow}, ${5:@integer endCol}, ${6:@integer editCell})${7:;}$0"
          	description: "This function selects the cells in the named data table or text table. If  editCell is TRUE, this function sets up the first cell for entering data."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDTColumnWidth"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetDTColumnWidth(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer column}, ${4:@integer width}, ${5:@integer doClones})${6:;}$0"
          	description: "Sets the specified column in the named data table to the specified  width. Please note that column number for this function is zero  based starting from the title column, to allow reference to the title  column. This means that the first column with data in it is column  one, unlike most other functions that reference data table columns."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDTRowStart"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetDTRowStart(${1:@integer blockNumber}, ${2:@string name}, ${3:@integer rowStart})${4:;}$0"
          	description: "Sets the named data table to have its row numbers start at the indicated value. (i.e the first row number, normally zero, will be rowStart) (0 successful, 1 failed)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SortArrayVariableColumns"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SortArrayVariableColumns(${1:@short hNum}, ${2:@array datatableName}, ${3:@integer numCols}, ${4:@integer numRowsToSort}, ${5:@integer keyColumn}, ${6:@integer increase}, ${7:@integer sortStringAsNumbers})${8:;}$0"
          	description: "Sorts the specified array, using the numCols argument to define how  many columns the array to be sorted contains."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StopDataTableEditing"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "StopDataTableEditing()${1:;}$0"
          	description: "Immediately stops the currently selected data table from being  edited. A common use would be to call this function in response to a  click on the data table, preventing the user from editing the cell but  allowing selection to occur."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WhichDTCell"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "WhichDTCell(${1:@integer rowCol})${2:;}$0"
          	description: "Returns the Row or Column that is currently active.  If rowCol is  TRUE this function returns the Column, otherwise it returns the  row. This function can be called in the CELLACCEPT, DIALOGITEMTOOLTIP, DIALOGCLICK, or dialog item name message  handlers."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DILinkClear"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DILinkClear(${1:@integer blockNumber}, ${2:@string dialogItemName})${3:;}$0"
          	description: "Clears a link from the specified link if it has one."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DILinkInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DILinkInfo(${1:@integer blockN}, ${2:@string dialogItemName}, ${3:@integer which})${4:;}$0"
          	description: "Returns linking information about the specified dialog item. Values for which: 0 : Link type returns 0: no link, 1: global array, 2: Database, 3:  dynamic array 1: DB Index returns the index of the database for the link (if it's a  DB link) 2: table/array index returns the value of the index 3: returns column index 4: returns row index 5: user link: if the link was created by a user vs. a function 7: returns dialogItemID to identify a dialog item.  See DIGetID  function description. 10: ReadOnly: return value is true/false."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DILinkingDisabled"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DILinkingDisabled(${1:@integer blockN}, ${2:@string dialogItemName}, ${3:@integer disableIfTrue})${4:;}$0"
          	description: "This function controls if the specified data table or parameter will  allow linking. By default each data table has a link button in its  lower left-hand corner and calling this function will allow the  block developer to hide this button. This should have the added  effect of disabling the link menu command. Return a negative  error number or zero if no error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DILinkModify"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DILinkModify(${1:@integer blockNumber}, ${2:@string dialogItem}, ${3:@integer which}, ${4:@integer value})${5:;}$0"
          	description: "This function is used to modify flags associated with a specific dialog item link. The ‘which’ argument specifies which flag will be  set; value specifies what the value should be set to. which: 0: ReadOnly. Set value to TRUE to make a link ‘read-only’ 1: InitMsgs. Set value TRUE so link will get messages during  INITSIM. 2: SimMsgs. Set value TRUE so link will get messages during  SIMULATE. 3:FinalMsgs. Set value TRUE so link will get messages during  FINALCALC. 4: AnyMsgs. Set value TRUE so link will get any messages at all. 5: UserLink. Set value TRUE so link was created by the user interface (TRUE), or a MODL function call (FALSE). 11: ShowFieldNames Set value TRUE so link uses the field names  for the header rows in the data table."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DILinkMsgs"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DILinkMsgs(${1:@integer sendMsgs})${2:;}$0"
          	description: "Turns on and off the sending of messages associated with linking.   This function should be used carefully, and should always be  turned back on when the code has completed.  This will disable all  messages sent to any blocks that have dialog items linked to any  data source, and many blocks will function incorrectly if these  messages are disabled.  The primary reason to use this function  would be if you are making many changes to a data source, and  don’t want things to be overwhelmed with too many messages."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DILinkSendMsgs"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DILinkSendMsgs(${1:@integer dataSourceType}, ${2:@integer DBIndex}, ${3:@integer tableIndex}, ${4:@integer fieldIndex}, ${5:@integer recordIndex})${6:;}$0"
          	description: "Sends update messages to all the dialog items linked to this data  source.  In the Global Array case, the DBIndex is ignored. If you  want to send messages to all dialog items linked to a whole table,  pass in –1 for the fieldIndex, and –1 for the rowIndex. dataSourceType: 1: Global Array 2: Database."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DILinkUpdateInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DILinkUpdateInfo(${1:@integer which})${2:;}$0"
          	description: "Should be called in the LinkStructure, LinkContent, or dialog  item name message handlers. Returns information about which  link changed and what the change was. Values for which: 0:Link type (returns 0:no link, 1:global array, 2:database, 3:  dynamic array) 1:DB Index returns the index of the database for the link (if it's a  DB link) 2:table/array index returns the value of the index 3:returns column index 4:returns row index 5:what changed (see below for values) 6:number of rows or columns changed 7:dialog item ID 8: the block number of the block that changed the data 9: Returns True (1) if link messages are enabled; otherwise returns  False (0). 10:returns the index of the database being imported or 0 if no  database is being imported. A which value of 5 (what changed) returns 1:data changed, 2:field  inserted, 3:field deleted, 4:field renamed, 5:record inserted,  6:record deleted, 7:table or GA deleted, 8:table or GA renamed,  9:DB deleted, 10:DB renamed, 11:link created, 12:link modified,  13:link cleared, 14:DB replaced via DBDatabaseImport(), 15:GA  resized, 16:table inserted, 17:field properties modified, 18:field  moved, 19:table sorted, 20:Table Properties modified, 21:record  ID modified."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DILinkUpdateString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DILinkUpdateString(${1:@integer which})${2:;}$0"
          	description: "This companion function to DILinkUpdateInfo returns a string  containing information about a change to the link status. This can  be called in the same message handlers as DILinkUpdateInfo. which values: 0 : DialogItemName  The name of the dialog item associated with  the link. 1 : Changed Name. If whatChanged is field or table renamed, for  example, the changed name string will be the old name of the field  or table."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DTHideLinkButton"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DTHideLinkButton(${1:@integer blockN}, ${2:@string dtName}, ${3:@integer hideButton})${4:;}$0"
          	description: "This function is replaced by DILinkingDisabled(), above, that  works for both data tables and parameters. See that function for a  description."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DynamicTextArrayNumber"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DynamicTextArrayNumber(${1:@string dynamicTextArray[]})${2:;}$0"
          	description: "Returns the dynamic array index. Used to link the Dynamic Text  Item to the correct dynamic array. For example: myDTextItem = DynamicTextArrayNumber(dynTextArray); where dynTextArray is declared as above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DynamicTextIsDirty"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DynamicTextIsDirty(${1:@integer blockNumber}, ${2:@string name})${3:;}$0"
          	description: "Returns a true if the text item is dirty (the user has typed text into  the dynamic text item or changed its contents in some way)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DynamicTextSetDirty"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DynamicTextSetDirty(${1:@integer blockNumber}, ${2:@string variableNameStr}, ${3:@integer dirty})${4:;}$0"
          	description: "Sets the dirty flag to ‘dirty’ (TRUE or FALSE) on the specified  dynamic text item. Useful to set dirty if the block performs a text  changing operation outside of the user editing the text."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrFindDynamic"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "StrFindDynamic(${1:@string dynamicTextArray[]}, ${2:@string findStr}, ${3:@integer caseSens}, ${4:@integer diacSens}, ${5:@integer wholeWords})${6:;}$0"
          	description: "Similar to the StrFind() function, except it searches a dynamic text  array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrFindDynamicStartPoint"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "StrFindDynamicStartPoint(${1:@string dynamicTextArray[]}, ${2:@string findStr}, ${3:@integer caseSens}, ${4:@integer diacSens}, ${5:@integer wholeWords}, ${6:@integer startPoint})${7:;}$0"
          	description: "Similar to the StrFind() function, except it searches a dynamic text  array. startPoint is the starting character index to search from, starting at zero."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrReplaceDynamic"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "StrReplaceDynamic(${1:@string dynamicTextArray[]}, ${2:@integer start}, ${3:@integer numChars}, ${4:@string replaceStr})${5:;}$0"
          	description: "Similar to the StrReplace function, except it replaces text in a  dynamic text array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIParamTagGet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIParamTagGet(${1:@integer blockNumber}, ${2:@string dName})${3:;}$0"
          	description: "Returns the ParamTag for the specified parameter."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIParamTagSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DIParamTagSet(${1:@integer blockNumber}, ${2:@string dName}, ${3:@integer tag}, ${4:@string string}, ${5:@string string2})${6:;}$0"
          	description: "Sets the specified Parameter tag to the specified value.  Values for  the tag value are from the ColTag/ParamTag Values table above.   The tagString value is currently only used for the string lookup  tags, in which case it is the lookup name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIParamTagStringGet"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DIParamTagStringGet(${1:@integer blockNumber}, ${2:@string dName}, ${3:@integer which})${4:;}$0"
          	description: "Returns a TagString for the specified parameter. Which should be  0 for the first string and 1 for the second string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DTColumnTagGet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DTColumnTagGet(${1:@integer blockNumber}, ${2:@string dtName}, ${3:@integer col}, ${4:@integer which})${5:;}$0"
          	description: "Returns the column tag for the specified column. which: 0 is columnTag 1 which: 1 is columnTag 2 which: 2 is the header tag."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DTColumnTagSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DTColumnTagSet(${1:@integer blockNumber}, ${2:@string dtName}, ${3:@integer col}, ${4:@integer tag}, ${5:@integer tagOption}, ${6:@string tagString}, ${7:@string tagString2})${8:;}$0"
          	description: "Sets the specified column tag to the specified value.  Col values  start at zero, with zero referring to the first column after the row  column.  Values for the tag value are from the ColTag/ParamTag  Values table above. The tagString value is the lookup table name  in the case of string Lookup table columns, for other tags it’s  used as needed.  For many types of tags it’s not used.   TagString2  is used by some tags as well, for many it’s not used, and can just  be set to “” the empty string. TagOption specifies an option for  the tag.  Some tags use this option for specific purposes.  Using  the flag for TAGDISABLE in this argument will disable most  column tags. For any tag that displays a string, except the SL tags  and the DBFIELD tag, putting a string into the string1, or  string2 field will prepend the string from string1, and/or append  the string from string2."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DTColumnTagStringGet"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DTColumnTagStringGet(${1:@integer blockNumber}, ${2:@string dtName}, ${3:@integer col}, ${4:@integer which})${5:;}$0"
          	description: "Returns a tagString value for the specified column. Which should  be 0 for the first string and 1 for the second string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DIToolTipSet"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DIToolTipSet(${1:@string string}, ${2:@integer replace})${3:;}$0"
          	description: "Allows you to set the string that will be displayed.  If the replace  flag is true, the default tool tip string will be replaced, if it is false,  the default string will be appended to."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BlockDialogIsOpen"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BlockDialogIsOpen(${1:@integer blockNumber})${2:;}$0"
          	description: "Returns TRUE if the block dialog it open. Returns FALSE otherwise."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloseBlockDialogBox"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "CloseBlockDialogBox(${1:@integer i})${2:;}$0"
          	description: "Closes the dialog for any block, where i is the global block number.  See OpenBlockDialogBox, below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloseDialogBox"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "CloseDialogBox()${1:;}$0"
          	description: "Closes this block’s dialog from within the ModL code. Put this in the  EndSim message handler if you want an open dialog to close at the  end of the simulation. See OpenDialogBox, below. NOTE: to prevent the dialog from closing conditionally, use an  Abort statement in the DIALOGCLOSE message handler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloseEnclosingHBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "CloseEnclosingHBlock()${1:;}$0"
          	description: "Closes the hierarchical block in which this block resides, if any."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloseEnclosingHBlock2"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "CloseEnclosingHBlock2(${1:@integer blockNumber})${2:;}$0"
          	description: "This is same as CloseEnclosingHBlock(), except it refers to a global  block number."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DialogGetSize"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DialogGetSize(${1:@integer theBlockNumber}, ${2:@integer which})${3:;}$0"
          	description: "Gets the width or Height of an open dialog.  (Returns the width or  height of the hBlock Model window if the block number refers to an  hBlock.) The ‘which’ argument takes the following values:  0: width 1: height."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DialogMoveTo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DialogMoveTo(${1:@integer blockNumber}, ${2:@integer x}, ${3:@integer y})${4:;}$0"
          	description: "Moves the dialog box to the specified x and y pixel location. If the  block is an hBlock, this will move the hBlock submodel window."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DialogSetSize"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DialogSetSize(${1:@integer blockNumber}, ${2:@integer w}, ${3:@integer h})${4:;}$0"
          	description: "Resizes the dialog box of the block.  Only works if the dialog is open.   If the block is an hBlock, this will resize the hBlock submodel window.  W and H are width and height in pixels."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MakeDialogModal"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MakeDialogModal(${1:@integer theBlockNumber}, ${2:@integer TrueFalse})${3:;}$0"
          	description: "Makes a block's dialog modal and should be called when the dialog  is open. During the dialogOpen message is OK. Calling this function with the TrueFalse flag set to false will turn the dialog back to  non-modal behavior."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenBlockDialogBox"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OpenBlockDialogBox(${1:@integer i})${2:;}$0"
          	description: "Opens the dialog for any block, where i is the global block number.  You may want to do this if you are telling the user to change a value  in a block’s dialog. For instance, if you have just put up an alert saying “The value in the ‘Height’ field of the ‘Attic’ dialog is negative,”  you can then open the offending dialog to make the change easier."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenDialogBox"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OpenDialogBox()${1:;}$0"
          	description: "Opens this block’s dialog to show something visually important to  the user. If you want a dialog to always appear in front of any open  plotting windows, call this function at the beginning of the Simulate  message handler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenEnclosingHBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OpenEnclosingHBlock()${1:;}$0"
          	description: "Opens the hierarchical block in which this block resides, if any."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenEnclosingHBlock2"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OpenEnclosingHBlock2(${1:@integer blockNumber})${2:;}$0"
          	description: "This is same as OpenEnclosingHBlock(), except it refers to a global  block number that is within the HBlock."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DisableTabName"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DisableTabName(${1:@string tabName}, ${2:@integer trueOrFalse})${3:;}$0"
          	description: "Disables or enables the specified tab."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetCurrentTabName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetCurrentTabName(${1:@integer blockNumber})${2:;}$0"
          	description: "Returns the currently selected tab name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenDialogBoxToTabName"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OpenDialogBoxToTabName(${1:@string tabName}, ${2:@integer blockNumber})${3:;}$0"
          	description: "Opens a dialog box to a specified tab."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDefaultTabName"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetDefaultTabName(${1:@string tabName}, ${2:@integer blockNumber})${3:;}$0"
          	description: "Sets the block so that the dialog will open at a specific tab name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "VariableNameToTabName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "VariableNameToTabName(${1:@string varName}, ${2:@integer blockNumber})${3:;}$0"
          	description: "Returns the name of the tab of a dialog that the indicated dialog  item is on."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BlockSimStartPriority"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BlockSimStartPriority(${1:@integer blockNumber}, ${2:@integer priority})${3:;}$0"
          	description: "Sets the priority value for receiving the SimStart message discussed  on “Simulation messages” on page 1058. Returns 0 for success or a  negative value for failure. The default value is -1 and any block with  a priority value of less than 0 will not receive the message. Blocks that  have a priority value greater than -1 will receive the message in priority order (lowest to highest)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BlockSimFinishPriority"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "BlockSimFinishPriority(${1:@integer blockNumber}, ${2:@integer priority})${3:;}$0"
          	description: "Sets the priority value for receiving the SimFinish message discussed  on “Simulation messages” on page 1058. Returns 0 for success or a  negative value for failure. The default value is -1 and any block with  a priority value of less than 0 will not receive the message. Blocks  that have a priority value greater than -1 will receive the message in  priority order (lowest to highest)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConnectorMsgBreak"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ConnectorMsgBreak()${1:;}$0"
          	description: "Called from a block currently receiving a connector message. It prevents any additional connected blocks from receiving that message.  This function does not affect the current message handler and it  should be called right before returning from the current message  handler."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DuringHBlockUpdate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DuringHBlockUpdate()${1:;}$0"
          	description: "During an HBlock update, some connections are temporarily broken and then reconnected. Returns True if called during an HBlock  update so you can determine if ConnectionMake or ConnectionBreak messages can be safely ignored."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetConnectorMsgsFirst"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "GetConnectorMsgsFirst(${1:@integer connName})${2:;}$0"
          	description: "Makes the specified connector the first in netlist messages. This is  used in blocks where it is critical that the messages be received by a  specific block first, no matter what the order of connections. Use this  function in INITSIM or CHECKDATA. For example, the Status  block uses this function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetMsgSendingBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetMsgSendingBlock()${1:;}$0"
          	description: "Returns the blocknumber of the block that sends the currently executing message to the current block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetSimulateMsgs"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "GetSimulateMsgs(${1:@integer ifTrue})${2:;}$0"
          	description: "In some cases, you may not want a block to get Simulate messages. (See “Residence blocks that do not post future events:” on  page 1017.) This may be true in some discrete event blocks and in  continuous blocks that are used in discrete event simulations. This  function prevents blocks from getting Simulate messages and thus  speeds up the simulation. The function would usually be called in  the InitSim or checkData message handlers. Call this function with  FALSE if you do not want the block to get Simulate messages. This  is initially set to TRUE for new and existing models, and is always  reset to TRUE before a simulation starts."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MsgEmulationOptimize"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MsgEmulationOptimize(${1:@integer ifTrue})${2:;}$0"
          	description: "See “Value connector messages” on page 1026. This specialized  function is used in the Executive block (Item library) to optimize the  operation of Value blocks in discrete event models. It prevents the  propagation of redundant messages that are produced by Value  blocks emulating and propagating connector messages from Item  blocks. It does this by not back-propagating (step 1) connector messages to blocks that have ever sent a connector message to that input  of this block. This can speed the simulation by reducing the number  of messages sent between Itemand Value blocks. This behavior is not  a default because other types of modeling will fail if not all messages  are propagated. This is initially set to FALSE for new and existing  models, and is always reset to FALSE before a simulation starts."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RestrictConnectorMsgs"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "RestrictConnectorMsgs(${1:@integer restrictMessages})${2:;}$0"
          	description: "This function enables/disables a flag that restricts the use of connector messages in InitSim, checkdata, and endsim.  This is used in the  Executive block (Item library), as sending connector messages at the  wrong times can cause problems in these libraries."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SendConnectorMsgToBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SendConnectorMsgToBlock(${1:@integer blockNumber}, ${2:@integer conn})${3:;}$0"
          	description: "Sends a connector message to a block number that is not necessarily  connected to the block sending the message. Conn is the index for  the receiving connector in the connector pane (the index starts at 0)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SendMsgToAllCons"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SendMsgToAllCons(${1:@integer connName})${2:;}$0"
          	description: "Sends a message to all connectors on other blocks that are connected  to connName on the sending block. The connected blocks will get an  “on xxx” message where xxx is the connected receiving block’s connector name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SendMsgToBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SendMsgToBlock(${1:@integer block}, ${2:@integer messageConstant})${3:;}$0"
          	description: "Sends a message to the specified global block. The message is an  ExtendSim constant that corresponds to the message to be sent. The  messageConstant is not a string. It is derived by taking the message  name and adding MSG after the message name. For example, to  send a USERMSG0 to a block, messageConstant would be  USERMSG0MSG (not a string). See the chapter “Messages and  Message Handlers” on page 1057 for all the messages that can be  sent. Note: If the block is a hierarchical block, the submodel blocks  will not receive the message. Instead, use the SendMsgToHBlock  function discussed in this section."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SendMsgToHBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SendMsgToHBlock(${1:@integer globalBlockNum}, ${2:@integer message})${3:;}$0"
          	description: "Sends the message to all internal blocks within the hierarchical  block. This function will do nothing if globalBlockNum is not a hierarchical block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SendMsgToInputs"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SendMsgToInputs(${1:@integer connName})${2:;}$0"
          	description: "Sends a message to all input connectors on other blocks that are connected to connName on the sending block. The connected blocks  will get an “on xxxIn” message where xxxIn is the connected receiving block’s input connector name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SendMsgToOutputs"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SendMsgToOutputs(${1:@integer connName})${2:;}$0"
          	description: "Sends a message to the output connector on the block that is connected to connName on the sending block. The connected block will  get an “on xxxOut” message where xxxOut is the connected receiving block’s output connector name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SimulateConnectorMsgs"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SimulateConnectorMsgs(${1:@integer trueFalse})${2:;}$0"
          	description: "This is used to disable the “simulation” of connector messages by  Value blocks that have no connector message handlers, as described  in “Value connector messages” on page 1026. “Simulation” of connector messages is enabled by default for new and existing models,  and is always reenabled before a simulation starts. This is a specialpurpose function that will probably only be of interest to users who  are creating their own libraries that are not being used with the Item  library. Use this function in INITSIM or CHECKDATA."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IconGetClass"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IconGetClass(${1:@integer blockNumber})${2:;}$0"
          	description: "Gets the current class (0 to 7) of the block, but classes are currently  global, so the entire model will have this class."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IconGetView"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IconGetView(${1:@integer blockNumber})${2:;}$0"
          	description: "Gets the current view (0 to n) of the block. See IconGetViewName(), below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IconGetViewName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "IconGetViewName(${1:@integer blockNumber}, ${2:@integer view})${3:;}$0"
          	description: "Returns the name of the view specified."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IconSetViewByIndex"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "IconSetViewByIndex(${1:@integer blockNumber}, ${2:@integer index})${3:;}$0"
          	description: "Sets the block’s view by index (0 to n)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IconSetViewByPartialName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IconSetViewByPartialName(${1:@integer blockNumber}, ${2:@string partialName})${3:;}$0"
          	description: "Sets the block’s view by the partial name entered. For example,  “right” will set the icon view to “Right Angle.” This is useful when  the view names are slightly different for different classes and you  want to set the view to a type of view rather tban a specific one."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DuringContinue"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DuringContinue()${1:;}$0"
          	description: "Returns true if the model is being continued from a previous saved  run."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetBlockInfo"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetBlockInfo(${1:@integer theBlockNumber}, ${2:@integer which})${3:;}$0"
          	description: "Returns misc information about a block which can take the following values: 1:  invisible  --- returns if the block is invisible. 2: scriptedBlock – returns if the block was created via scripting. 3: dialog box is open."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetGlobalSimulationOrder"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetGlobalSimulationOrder(${1:@integer blockNumber})${2:;}$0"
          	description: "Returns the actual simulation order index of a block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetLibraryContents"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetLibraryContents(${1:@string libName}, ${2:@Str31 blockNames[]}, ${3:@Str31 blockTypes[]})${4:;}$0"
          	description: "Fills the passed-in Dynamic Arrays with the names and types of the  blocks in the named library. Returns the number of blocks in the  library."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetLibraryInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetLibraryInfo(${1:@integer blockNumber}, ${2:@integer specify})${3:;}$0"
          	description: "Returns whether a library is of a certain type. specify takes the following values: 1: RunTime   (others will be defined in the future)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetLibraryPathName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetLibraryPathName(${1:@integer blockNumber}, ${2:@integer specify})${3:;}$0"
          	description: "Function to return the pathname of a library file, given a block in  that library. specify takes the following values: 1: pathname without library name     2: just library name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetLibraryStringInfo"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetLibraryStringInfo(${1:@integer blockNumber}, ${2:@integer specify})${3:;}$0"
          	description: "Returns string information about the library that the block comes  from. Specify takes the following values: 1: Name (others will be defined in the future)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetLibraryVersion"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetLibraryVersion(${1:@integer blockNumber})${2:;}$0"
          	description: "This function returns the short version string for the library that  includes the block specified by blockNumber."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetLibraryVersionByName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetLibraryVersionByName(${1:@string libName})${2:;}$0"
          	description: "Returns the library version string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetModelName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetModelName()${1:;}$0"
          	description: "Returns the string that is the model’s file name. This is useful when  writing out debugging information or in certain user alerts."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetModelPath"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetModelPath(${1:@string modelName})${2:;}$0"
          	description: "Returns the pathname to the specified model, but does not include  the model name. The model needs to be open."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetRunParameter"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetRunParameter(${1:@integer which})${2:;}$0"
          	description: "Similar to GetRunParameterLong except it returns a real. Which  specifies a parameter in the Simulation Setup dialog. In addition to  the parameters for GetRunParameterLong, this function returns  values for: 1 - endTime 2 - startTime 10 - startDate 12 - endDate."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetRunParameterLong"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetRunParameterLong(${1:@integer which})${2:;}$0"
          	description: "Gets the specified parameter from the Simulation Setup dialog using  the value of which: 3 - numSims 4 - numSteps 5 - random seed 6 - seedControl (value, from 1-3, of the seed popup from the Random Numbers tab) 7 - checkRandomSeeds (value of the duplicate seeds check box from  the Random Numbers tab) 8 - timeUnits 9 - calendarDates 11 - “__seed” table database index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetSerialNumber"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetSerialNumber()${1:;}$0"
          	description: "Returns the serial number of the unit as a string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetSimulationPhase"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetSimulationPhase()${1:;}$0"
          	description: "Returns the phase of the simulation. 0 - Not currently running a simulation 1 - CheckData 2 - StepSize 3 - InitSim 4 - Simulate (main simulation loop) 5 - FinalCalc 6 - BlockReport 7 - EndSim 8 - AbortSim 9 - PreCheckData 10 - PostInitSim 11 - SimStart 12 - SimFinish 13 - ModifyRunParameter 14 - OpenModelPhase."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetWindowsHndl"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetWindowsHndl(${1:@integer which})${2:;}$0"
          	description: "(Windows Only) Returns the Windows API handle of the main  window in the ExtendSim application. Currently the which parameter is unused. It should be set to 0 for the Main window handle. This  handle is used to pass to a Windows DLL. It is not used in ModL  functions."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IsSimulationPaused"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IsSimulationPaused()${1:;}$0"
          	description: "Returns TRUE if the simulation run is paused or is about to pause."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ModelLock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ModelLock(${1:@integer lock}, ${2:@integer hBlocksLocked}, ${3:@string password})${4:;}$0"
          	description: "The function allows you to lock and unlock the model from MODL  code.   The Lock argument takes a value of one if the model is to be  locked, a value of zero for unlocking. HblocksLocked is a flag that  sets whether you want the hBlocks to be locked when locking a  model.  The password is the password to be set in the locking case,  and the password to be compared with in the unlocking case.  This  function returns a zero if is succeeds, and the following error codes  for specific error conditions: -1: Unlock password didn’t match. -2: Model is already locked, it cannot be locked again without being  unlocked first. -3: lock value out of range."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NotebookClose"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "NotebookClose()${1:;}$0"
          	description: "Closes the notebook if it is open."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NotebookIsOpen"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "NotebookIsOpen()${1:;}$0"
          	description: "Returns a true value if the notebook is currently open."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenNotebook"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "OpenNotebook()${1:;}$0"
          	description: "Opens the model notebook."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PauseSimForSave"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PauseSimForSave()${1:;}$0"
          	description: "Pauses the currently running active model for saving. This allows the  user to save the model while paused and enables the Continue Simulation command discussed in the ExtendSim User Guide in the section Saving Intermediate Results. The model can be saved by the Save  menu command or the SaveModel() function below. NOTE: The  PauseSim() function does a pause immediate which is useful for  debugging, but will not allow saving the model."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ResumeSimulation"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ResumeSimulation()${1:;}$0"
          	description: "Resumes the simulation and returns immediately."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RunSetup"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "RunSetup(${1:@integer truefalse})${2:;}$0"
          	description: "Opens Setup Simulation dialog and sets up a default OK button  instead of Run Now button. Returns TRUE if OK is clicked. If trueFalse is TRUE, show RunNow button. If trueFalse is FALSE, hide  RunNow button."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RunSimulation"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "RunSimulation(${1:@integer truefalse})${2:;}$0"
          	description: "Runs the model. If the argument is TRUE, the function puts up the  Simulation Setup dialog, then runs the simulation if the user chooses  OK; if the argument is FALSE, the model is run directly. This function returns TRUE if the simulation ran to completion with no  errors and was not stopped, otherwise returns FALSE. See the  SetRunParameters() function below. NOTE: If called from a block, runs the model until it completes or  is aborted, and then returns. If you use the ExecuteMenuCommand() function to call RunSimulation() (e.g. from scripting or  OLE automation), it returns immediately after starting the model  run."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SaveModel"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SaveModel()${1:;}$0"
          	description: "Saves the model and updates any publishers."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SaveModelAs"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SaveModelAs(${1:@string fileName})${2:;}$0"
          	description: "Saves the active model under the name and path defined in fileName. Returns a zero if successful, a negative number otherwise.  Saves after the current block is executed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SaveTopDocAs"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SaveTopDocAs(${1:@string filePath}, ${2:@integer aSync})${3:;}$0"
          	description: "Saves the top document under the file name and path name defined  by filePath. If aSync is TRUE, saves after the current block is executed. Similar to SaveModelAs except it will work on whichever the  top ExtendSim document is. (Specifically used by the Equation  block to save and close Include files.) Returns 0 for success or a negative value to indicate failure."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetBlockSimulationOrder"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetBlockSimulationOrder(${1:@integer blockNumber}, ${2:@integer newOrder})${3:;}$0"
          	description: "Sets the simulation order value of the specified block. This is only  useful, or allowed if the model simulation order has been set to custom simulation order. This function returns a zero if successful, and  the following error codes if it fails: -1: can’t be set during a simulation. -2: newOrder must be greater than zero. -3: no active model document. -4: sim order is not set to custom. -5: no such block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetModelSimulationOrder"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetModelSimulationOrder(${1:@integer neworder})${2:;}$0"
          	description: "Sets the type of simulation order to be used in the model. Types are: 0: left to right 1: not used 2: flow 3: custom This function returns a zero if successful, and –1, -2, and –3, as  described under SetBlockSimulationOrder."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetRunParameter"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetRunParameter(${1:@real paramValue}, ${2:@integer which})${3:;}$0"
          	description: "Sets a single parameter in the Simulation Setup dialog. As an enumerated list, this function is more expandable than SetRunParameters(). The values for which are: 1:endTime, 2:startTime, 3:numSims, 4:numSteps, 5:random seed),  6:seedControl (value, from 1-3, for the seed popup from the Random Numbers tab), 7:checkRandomSeeds (value for the duplicate  seeds check box for the Random Numbers tab), 8:timeUnits, 9:calendarDates, 10:startDate, 11: “__seed” table database index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetRunParameters"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetRunParameters(${1:@real SetEndTime}, ${2:@real SetStartTime}, ${3:@real SetNumSims}, ${4:@real SetNumStep})${5:;}$0"
          	description: "Sets the parameters in the Simulation Setup dialog. This function  returns the following:  0 Successful -1 End time must be greater than start time -2 Number of steps must be at least one -3 Number of steps must be less than 2000000000 -4 Number of simulations must be at least 1 and less than 32768."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SpinCursor"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SpinCursor()${1:;}$0"
          	description: "Spins the beachball cursor. Used to alert the user that a time consuming calculation is taking place."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ResourcePoolAllocate"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ResourcePoolAllocate(${1:@integer ResourcePoolBlockNum}, ${2:@real NumToAllocate})${3:;}$0"
          	description: "Requests the specified Resource Pool block to allocate the specified  number of resources."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ResourcePoolAvailable"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ResourcePoolAvailable(${1:@integer ResourcePoolBlockNumber})${2:;}$0"
          	description: "Queries the specified resource pool block for the number of  resources that are available."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ActivateApplication"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ActivateApplication()${1:;}$0"
          	description: "Brings the ExtendSim application to the foreground. This is primarily used for interapplication/scripting."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ActivateWorksheet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ActivateWorksheet(${1:@string sheetName})${2:;}$0"
          	description: "Activates, (selects and brings to the front), the named worksheet."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AddBlockToClipboard"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AddBlockToClipboard(${1:@integer blockNumber})${2:;}$0"
          	description: "Adds the indicated block to the clipboard contents without otherwise changing the contents. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AddBlockToSelection"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AddBlockToSelection(${1:@integer blockNumber})${2:;}$0"
          	description: "Adds the indicated block/worksheet object to the selection. This is  in contrast to SelectBlock(), which makes the indicated block the  entire selection. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ApplicationFrame"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ApplicationFrame(${1:@integer frame[]}, ${2:@integer inside})${3:;}$0"
          	description: "Returns the application frame in global coordinates. The Inside  argument specifies if the returned frame should be inside (includes  the menubar and window frame) of the application frame window,  or the outside. Declare frame as: Integer frame[4]; When the function returns, frame will contain: frame [0] - Top,  frame[1] - Left, frame[2] - Bottom, frame[3] - Right."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ChangePreference"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ChangePreference(${1:@integer preference}, ${2:@integer value})${3:;}$0"
          	description: "Allows you to change preference values using ModL code. The value  argument takes a zero for FALSE or a one for TRUE. The preference  argument takes the following values: 8: bitmap plotters 9: bitmap blocks 10: auto library search 12: simulation sound 14: right angle connections 16: unsupported XCMD callbacks beep (Mac OS only) 20: updatepubs (Mac OS only) 21: don’t show worksheet tool tips 22: show dialog tool tips 25: don’t show hierarchical block drop shadows 26: plotters use patterns. See GetPreference(), below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ChangePreferenceString"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ChangePreferenceString(${1:@integer preference}, ${2:@string theString})${3:;}$0"
          	description: "Change the string-based preferences using this function. The preferences that can be changed with this function are: Default Library Path: 1 Library 1: 2 Library 2: 3 Library 3: 4 Library 4: 5 Library 5: 6 Library 6: 7 Library 7: 8 Default Model Path: 9."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ClearBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ClearBlock(${1:@integer blockNumber})${2:;}$0"
          	description: "Clears the specified block from the worksheet."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ClearBlockUndo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ClearBlockUndo(${1:@integer theBlockNumber})${2:;}$0"
          	description: "Clears the block and adds it to the delete task list to allow undoing.  Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ClearConnection"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ClearConnection(${1:@integer blockFrom}, ${2:@integer conFrom}, ${3:@integer blockTo}, ${4:@integer conTo})${5:;}$0"
          	description: "Removes the connection between the specified blocks and connector  numbers. Returns TRUE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ClearUndo"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ClearUndo()${1:;}$0"
          	description: "Clears the Undo list and removes any existing undo tasks from the  Edit menu. After executing this function, the Undo command will  be disabled."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneCreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CloneCreate(${1:@integer blockNumber}, ${2:@string variableName}, ${3:@integer destination}, ${4:@integer left}, ${5:@integer top})${6:;}$0"
          	description: "Returns a cloneID for the new clone, used in the other clone scripting functions. VariableName is the dialog item variable name. Destination is -1 for the top worksheet, -2 for the notebook or the block  number of an H-block to put it into its submodel. Left and Top are  the pixel coordinates of the left-top corner of the clone."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneDelete"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CloneDelete(${1:@integer cloneID})${2:;}$0"
          	description: "Deletes the specified clone. Get the cloneID from the CloneCreate()  or CloneFind() functions."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneFind"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CloneFind(${1:@integer blockNumber}, ${2:@string variableName}, ${3:@integer n})${4:;}$0"
          	description: "Returns a cloneID for the found clone, used in the other clone  scripting functions. VariableName is the dialog item variable name.  N is the nth instance of the clone specified, in order of creation. If  variableName is blank, the nth clone from the block is returned."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneGetDialogItem"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "CloneGetDialogItem(${1:@integer cloneID})${2:;}$0"
          	description: "Returns the variable name of the dialog item that the specified clone  is from."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneGetDialogItemLabel"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "CloneGetDialogItemLabel(${1:@integer cloneID}, ${2:@integer n})${3:;}$0"
          	description: "Returns the Nth label on a cloned dialog item that has labels.  This  would be either a Popup menu, or a data table."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneGetInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CloneGetInfo(${1:@integer cloneID}, ${2:@integer whatInfo})${3:;}$0"
          	description: "For whatInfo, 1:returns the type of the clone, 2:returns the block  number of the clone, 3:returns True if the clone is selected and False  if it is not. Values for the type of clone (whatInfo:1) are: 1:Button, 2:Check Box, 3:Radio Button, 4:Meter, 5:Parameter,  6:Slider, 7:data table, 8:EditText, 9:StaticText, 12:Switch, 13:String  Table, 14:Plotter pane, 15:Plotter data table, 16:Popup Menu,  17:EmbeddedObject, 18:DynamicText, 19:Text frame, 20:Calendar, 21:EditText(31)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneGetList"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CloneGetList(${1:@integer blockNumber}, ${2:@string variableName}, ${3:@integer cloneIDArray[]})${4:;}$0"
          	description: "Returns the number of clones in the cloneIDArray array. Fills the  dynamic array cloneIDArray with all of the cloneIDs for the variableName. If variableName is blank, all of the clone IDs for that  block are returned in the array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneGetPosition"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CloneGetPosition(${1:@integer cloneID}, ${2:@integer positionArray})${3:;}$0"
          	description: "PositionArray is declared as an array of 4 integers. It returns the following information: positionArray[0] = cloneRect.top, positionArray[1] = cloneRect.left, positionArray[2] =  cloneRect.bottom, positionArray[3] = cloneRect.right."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneHideDisable"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CloneHideDisable(${1:@integer cloneID}, ${2:@integer disable}, ${3:@integer disableIFtrue})${4:;}$0"
          	description: "Disables/enables or hides/shows the specified clone. If disable is True and disableIFtrue is True, the clone is disabled. If  disable is True and disableIFtrue is False, the clone is enabled. If disable is False and disableIFtrue is True, the function hides the  clone; the clone appears if disable is False and disableIFtrue is False. Returns zero if successful; otherwise returns an error code (negative  number)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CloneResize"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CloneResize(${1:@integer cloneID}, ${2:@integer top}, ${3:@integer left}, ${4:@integer bottom}, ${5:@integer right})${6:;}$0"
          	description: "Resizes the clone to the specified rectangle (position and size)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CodeExecute"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "CodeExecute(${1:@string modlCodeString})${2:;}$0"
          	description: "Executes the ModL code in the string modlCodeString. Local variables may be defined. Global variables can be used to input and  return values."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CreateHBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CreateHBlock(${1:@string theName})${2:;}$0"
          	description: "Makes the current selection into an H-block with the specified  name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DialogRefresh"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DialogRefresh(${1:@integer blockNumber})${2:;}$0"
          	description: "Forces the dialog box of the specified block to refresh (redraw.) Does  nothing if the dialog box is not open or the block doesn't exist.  Returns true (1) if it succeeds, zero otherwise."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DialogFixedSize"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DialogFixedSize(${1:@integer blockNumber}, ${2:@integer height}, ${3:@integer width})${4:;}$0"
          	description: "Specifies that the dialog box for blockNumber should be fixed to the  specified height and width.  User resizing of the block dialog will  be  restricted."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DuplicateBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DuplicateBlock(${1:@integer theBlockNumber})${2:;}$0"
          	description: "Makes a copy of the indicated block, and returns the block number  of the new block. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ExecuteMenuCommand"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ExecuteMenuCommand(${1:@integer commandNumber})${2:;}$0"
          	description: "Executes the specified command. This is functionally the same as  selecting the command from the menus. ExtendSim will attempt to  perform the command on the active window. If there are multiple  windows open (including dialog boxes), you may need to call ActivateWorksheet() to ensure that the correct model is in the active  window. See Appendix C for a list of menu command numbers."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ExtendMaximize"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ExtendMaximize()${1:;}$0"
          	description: "Maximizes the ExtendSim Application."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ExtendMinimize"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ExtendMinimize()${1:;}$0"
          	description: "Minimizes the ExtendSim Application."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FindBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FindBlock(${1:@string searchStr}, ${2:@integer which}, ${3:@integer openDialogs}, ${4:@integer wholeWords}, ${5:@integer justBlockNum})${6:;}$0"
          	description: "Finds the first block that matches the string searchStr and returns its  block number, optionally opening the dialog or selecting the block.  Which specifies what string in the block you want to compare your  searchstring to. It takes the following values: BlockLabel:1, BlockName:2, BlockType:3, TextBlockText:4 openDialogs specifies if the block should be just selected, or if the  dialog should be opened. It is overridden by the justBlockNum  parameter, if it is TRUE. WholeWords specifies if you want the text  to try for an exact match, or to match a partial string. The final  argument justBlockNum if set to true will set the function to just  return a block number, and neither select the block nor open the  dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FindNext"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FindNext()${1:;}$0"
          	description: "Finds the next block that matches the search string specified. Only  useful if called immediately after the findBlock function.  (Returns a  –1 if no matching block is found.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetAppPath"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetAppPath()${1:;}$0"
          	description: "Returns a string containing the full path name for the ExtendSim  application file. This function is useful for determining the location  of files for which only the file’s relative location to the ExtendSim  application is known."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetPreference"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetPreference(${1:@integer preference})${2:;}$0"
          	description: "Allows you to get preference values using ModL code. The return  value is 1 for TRUE and 0 for FALSE. The preference argument takes  the following values: 8 = bitmap plotters; 9 = bitmap blocks; 10 = auto library search; 12  = simulation sound; 14 = right angle connections; 16 = unsupported  XCMD callbacks beep (Mac OS only); 20 = updatepubs (Mac OS  only); 21 = don’t show worksheet tool tips; 22 = don’t show dialog  editor tool tips; 25 = don’t show hierarchical block drop shadows; 26  = plotters use patterns; 27 = metric units; 28 = use page info."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetRecentFilePath"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetRecentFilePath(${1:@integer which})${2:;}$0"
          	description: "Returns the full path to the specified recent file from the list of 5  recent files at the bottom of the File menu. The specified file (which)  will be a number from 1 to 5."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetUserPath"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetUserPath()${1:;}$0"
          	description: "Returns the path to the user documents directory. Similar to  GetAppPath."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetWorksheetFrame"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetWorksheetFrame(${1:@integer blockNumber}, ${2:@array arrayName})${3:;}$0"
          	description: "Returns the frame of the worksheet in the array arrayName, which  must be declared integer arrayName[4]. Coordinates are in screen  pixels and correspond to the information returned by the GetMouseX(), GetMouseY(), and GetBlockTypePosition() functions. ArrayName[0]:top, ArrayName[1]:left, ArrayName[2]:bottom,  ArrayName[3]:right."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "HBlockTopGet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "HBlockTopGet()${1:;}$0"
          	description: "Returns the block number of the topmost open HBlock’s submodel,  or a negative number if there are no HBlocks open above the model  worksheet."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "HBlockUnlinkFromLibrary"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "HBlockUnlinkFromLibrary(${1:@integer blockNumber})${2:;}$0"
          	description: "Disconnects the specified hBlock from the library it has a link to.   This will make the hBlock into a standalone hBlock without a  library connection."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IsBlockSelected"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IsBlockSelected(${1:@integer blockNumber})${2:;}$0"
          	description: "Returns a TRUE if the indicated block is selected, returns false otherwise. This function will return a –1 if the indicated blocknumber  is not a valid block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IsLibEnabled"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IsLibEnabled(${1:@integer type})${2:;}$0"
          	description: "Returns TRUE if the running version of ExtendSim will open a specific type of library. Type values are: 17: OR library, 18: AT library,  19: Suite library."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IsMenuItemOn"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IsMenuItemOn(${1:@integer whichItem})${2:;}$0"
          	description: "Returns TRUE if the given menu command is currently checked.  The whichItem argument uses the same numbers as defined in  Appendix C for the ExecuteMenuCommand() function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IsMetric"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IsMetric()${1:;}$0"
          	description: "Returns TRUE if metric is set in the options dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LastBlockPlaced"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LastBlockPlaced()${1:;}$0"
          	description: "Returns the block number of the last block placed on the active  worksheet."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LibraryGetInfoByName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LibraryGetInfoByName(${1:@unsigned string libName}, ${2:@string blockName}, ${3:@integer specify})${4:;}$0"
          	description: "Function to return information about a library, and blocks in that  library. Specify takes the following values; 1: Hblock - TRUE/FALSE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MakeBlockInvisible"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MakeBlockInvisible(${1:@integer globalBlockNum}, ${2:@integer invisible})${3:;}$0"
          	description: "Makes the indicated block invisible. (Turns it visible if it was already  invisible, and the invisible flag is set to false.) Invisible blocks will  not display on the worksheet at all, and cannot be selected by the  user. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MakeConnection"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MakeConnection(${1:@integer blockFrom}, ${2:@integer conFrom}, ${3:@integer blockTo}, ${4:@integer conTo})${5:;}$0"
          	description: "Makes a connection line from the From block to the To block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MoveBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MoveBlock(${1:@integer blockNumber}, ${2:@integer xPixel}, ${3:@integer yPixel})${4:;}$0"
          	description: "Moves the specified block the specified number of pixels. Coordinates refer to the upper left corner of the block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MoveBlockTo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "MoveBlockTo(${1:@integer blockNumber}, ${2:@integer xLoc}, ${3:@integer yLoc})${4:;}$0"
          	description: "Moves the specified block to the specified location. Coordinates  refer to the upper left corner of the block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenExtendFile"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OpenExtendFile(${1:@string fullPath})${2:;}$0"
          	description: "Opens the ExtendSim model, library, or text file, using the fullpath  name on the disk. This creates a new front window if opening a  model or text file. Returns a zero if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlaceBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlaceBlock(${1:@string blockName}, ${2:@string libName}, ${3:@integer xPixel}, ${4:@integer yPixel}, ${5:@integer neighbor}, ${6:@integer side})${7:;}$0"
          	description: "Places the named block from the named library onto the active  worksheet at the specified location. If the neighbor field is filled in  with a block number of a block already on the worksheet, then the  xPixel, yPixel values are relative to the location of the neighbor, otherwise if neighbor is -1 (no neighbor) they are absolute worksheet coordinates. The side argument determines how the new block will be placed relative to the old block: 0: Left, 1: top, 2: right, 3: bottom."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlaceBlockInHBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlaceBlockInHBlock(${1:@string blockName}, ${2:@string libName}, ${3:@integer xPixel}, ${4:@integer yPixel}, ${5:@integer HBlockNum})${6:;}$0"
          	description: "Places a copy of the named block from the named library in the Hblock that is specified by the HblockNum argument. See PlaceBlock  in your manual for more information. Returns FALSE if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlaceDotBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlaceDotBlock(${1:@integer xPixel}, ${2:@integer yPixel}, ${3:@integer neighbor}, ${4:@integer side}, ${5:@integer width}, ${6:@integer hBlockName})${7:;}$0"
          	description: "Places a dot block into the worksheet.  Arguments are similar to PlaceBlock, and PlaceTextBlock."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlaceTextBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlaceTextBlock(${1:@string text}, ${2:@integer xPixel}, ${3:@integer yPixel}, ${4:@integer neighbor}, ${5:@integer side}, ${6:@integer width})${7:;}$0"
          	description: "Places a Text Block with the string text as its content onto the active  worksheet at the specified location. The width argument specifies  the final width of the text block in pixels. See the description of PlaceBlock above for descriptions of the other arguments."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlaceTextBlockInHBlock"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlaceTextBlockInHBlock(${1:@string text}, ${2:@integer xPixel}, ${3:@integer yPixel}, ${4:@integer neighbor}, ${5:@integer side}, ${6:@integer width}, ${7:@integer hBlockNum})${8:;}$0"
          	description: "This function places a TextBlock in the Specified HBLock.  See the  description of PlaceTextBlock for more information."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "QuickTimeAvailable"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "QuickTimeAvailable()${1:;}$0"
          	description: "Returns whether or not quicktime is available on the current  machine."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SelectConnection"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SelectConnection(${1:@integer blockFrom}, ${2:@integer conFrom}, ${3:@integer blockTo}, ${4:@integer conTo})${5:;}$0"
          	description: "Selects the connection line associated with the connection between  the specified blocks. This function returns a TRUE if it succeeds,  and a FALSE if it fails."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetDirty"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetDirty(${1:@integer dirty})${2:;}$0"
          	description: "Sets/Unsets the “dirty” flag on the active worksheet. A common use  for this functionality would be to set the dirty flag to  “FALSE’”before issuing the ExecutemenuCommand function to  close a worksheet. This has the effect of closing the worksheet without querying the user if they want to save, or not."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SuppressWorksheetRedraw"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SuppressWorksheetRedraw(${1:@integer suppress})${2:;}$0"
          	description: "If supress is TRUE, stops any update drawing of the worksheet until  a call to SuppressWorksheetRedraw(FALSE), whereupon the worksheet will be redrawn."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "UnselectAll"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "UnselectAll()${1:;}$0"
          	description: "Unselects all blocks, connections, etc."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WinSetForegroundWindow"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "WinSetForegroundWindow(${1:@integer handle})${2:;}$0"
          	description: "Sets the application associated with the passed in handle to be the  foreground window.  Passing in a zero, sets ExtendSim as the foreground window.  Windows handles for other applications then  ExtendSim will need to be acquired through some means.  One  example would be querying the Excel object model through OLE/ COM to return the object handle for Excel.  See the code of the  Command block in the Value library for an example of doing this."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WinShellExecute"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "WinShellExecute(${1:@string operation}, ${2:@string fileName}, ${3:@string params}, ${4:@string dir}, ${5:@integer show})${6:;}$0"
          	description: "This calls the Windows ShellExecute() function. This specifies all  arguments in the ShellExecute() function call but the first (HWND), as ExtendSim supplies that argument internally."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WorksheetRefresh"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "WorksheetRefresh(${1:@integer blockNumber})${2:;}$0"
          	description: "Forces a worksheet refresh (redraw) of the worksheet window containing the specified block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetReportType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetReportType()${1:;}$0"
          	description: "Used in BlockReport message handler to get the current report type.  Returns 0 for Dialog report, 1 for Statistical report."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "IsFirstReport"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "IsFirstReport()${1:;}$0"
          	description: "Returns TRUE if this is the first block of a type getting a BlockReport message. Useful to set up column headers for that block type."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotNewBarPoint"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PlotNewBarPoint(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer whichBin}, ${4:@real Value})${5:;}$0"
          	description: "This function allows you to set the value of one of the bins in a histogram/barchart chart, rather than adding 1 to it as the PlotNewPoint function will do."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AutoScaleX"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AutoScaleX(${1:@integer plot})${2:;}$0"
          	description: "Finds the minimum and maximum X axis values of all installed  arrays or installed scatter arrays and adjusts the X axis limits accordingly."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AutoScaleY"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AutoScaleY(${1:@integer plot})${2:;}$0"
          	description: "Finds the minimum and maximum Y values of all installed arrays or  installed scatter arrays and adjusts both the Y and Y2 axis limits  accordingly."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "BarGraph"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "BarGraph(${1:@integer plot}, ${2:@integer aBins}, ${3:@real aMin}, ${4:@real aMax})${5:;}$0"
          	description: "Sets the number of bins, the minimum value, and maximum value  for a bar graph."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ChangeAxisValues"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ChangeAxisValues(${1:@integer plot}, ${2:@real xLo}, ${3:@real xHi}, ${4:@real yLo}, ${5:@real yHi}, ${6:@real y2Lo}, ${7:@real y2Hi})${8:;}$0"
          	description: "Sets or changes the axis values of the specified plotter to the value  specified. Specifying a BLANK for a given value will use the existing  value. Returns a TRUE if the function executed successfully."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ChangePlotType"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ChangePlotType(${1:@integer plot}, ${2:@integer plotType})${3:;}$0"
          	description: "Changes the defined plot type of a plotter. This is used when creating custom plotters. The call to change the plotter should be done  right after the call to install an axis and before any other of the plotter calls. 1 – linear plot; 2 – scatter plot; 3 – error bars; 4 – strip chart;  5 – worm plot; 6 – bar plot."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ChangeSignalColor"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ChangeSignalColor(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer color})${4:;}$0"
          	description: "Specifies the color for the trace."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ChangeSignalSymbol"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ChangeSignalSymbol(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer symFormat})${4:;}$0"
          	description: "Specifies the symbol for the trace."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ChangeSignalWidth"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ChangeSignalWidth(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer width})${4:;}$0"
          	description: "Specifies the width (in pixels) for the trace."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ClosePlotter"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ClosePlotter(${1:@integer plot})${2:;}$0"
          	description: "Closes the plot window, if open."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ClosePlotter2"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ClosePlotter2(${1:@integer blockNumber}, ${2:@integer plot})${3:;}$0"
          	description: "This function just closes the specified plotter window, if it is open."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DisposePlot"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DisposePlot(${1:@integer plot})${2:;}$0"
          	description: "Disposes of a plot window and all its saved plots. This does not dispose of any installed data arrays."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetAxis"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "GetAxis(${1:@integer plot}, ${2:@real axisValues[9]})${3:;}$0"
          	description: "Fills the first nine elements of the axisValues array (declared as real  axisValues [9]) with the current values of isXLog, xLow, xHi, isYLog,  yLow, yHi, isy2Log, y2Low and y2Hi."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetAxisName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetAxisName(${1:@integer plot}, ${2:@integer whichAxis})${3:;}$0"
          	description: "Returns the name of the specified axis. whichAxis: 1 - x 2 - y1 3 - y2."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetSignalName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetSignalName(${1:@integer plot}, ${2:@integer whichSig})${3:;}$0"
          	description: "Returns the name of the signal whichSig."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetSignalValue"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetSignalValue(${1:@integer plot}, ${2:@integer whichSig}, ${3:@real xAxisValue})${4:;}$0"
          	description: "Finds the value of the installed trace at xAxisValue. If the trace is an  installed array, the value is interpolated between adjacent points. If  the trace is an installed function, the function is evaluated at xAxisValue. This does not work for scatter plots because there may be  many Y values for a single xAxisValue."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetTickCount"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetTickCount(${1:@integer plot}, ${2:@integer whichCount})${3:;}$0"
          	description: "Returns the number of ticks on the plotter axis. WhichCount is 0 for  the X axis, 1 for the Y axis, and 2 for the Y2 axis."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetY1Y2Axis"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetY1Y2Axis(${1:@integer plot}, ${2:@integer whichSig})${3:;}$0"
          	description: "Returns an integer specifying which Y axis the signal is plotted  against and whether or not the signal is hidden. 1: y1 2: y2 -1: y1, hidden -2: y2, hidden Note: If you are not concerned whether the signal is hidden, take the  absolute value of the result."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "InstallArray"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "InstallArray(${1:@integer plot}, ${2:@integer whichSig}, ${3:@string sigName}, ${4:@real y}, ${5:@real StartTime}, ${6:@real EndTime}, ${7:@integer plotPts}, ${8:@integer useY2Axis}, ${9:@integer pattern}, ${10:@integer color})${11:;}$0"
          	description: "Allows the automatic plotting of arrays. The plot window will plot  all the points of this array up to plotPts-1. It should be preceded by  InstallAxis and eventually be followed by showPlot. The first time  arrays are installed they need to be installed in sequential order. The  Install Array call is used in two ways in plotter blocks. The first time  it is called, it installs the array and sets parameters such as the color  and pattern of the line. The second and subsequent times, the formatting options are ignored, and the only action a call to installArray takes is to reinstall the array itself. If you precede a call to  InstallArray with a call to RemoveSignal, the formatting information  will be used."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "InstallAxis"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "InstallAxis(${1:@integer plot}, ${2:@string title}, ${3:@string xName}, ${4:@integer isXLog}, ${5:@real xLow}, ${6:@real xHi}, ${7:@string yName}, ${8:@integer isYLog}, ${9:@real yLow}, ${10:@real yHi}, ${11:@string y2name}, ${12:@integer isY2Log}, ${13:@real y2Low}, ${14:@real y2Hi}, ${15:@integer y2Pattern}, ${16:@integer y2Color}, ${17:@integer maxLines})${18:;}$0"
          	description: "Installs both the X and Y axes. If both the y2Low and y2Hi arguments are 0, the Y2 axis is not shown."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "InstallFunction"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "InstallFunction(${1:@integer plot}, ${2:@integer whichSig}, ${3:@string sigName}, ${4:@integer useY2Axis}, ${5:@integer pattern}, ${6:@integer color})${7:;}$0"
          	description: "Allows the automatic plotting of functions. The plot window will  plot all the points of this function corresponding to the x axis values,  even if you changed them. It should be preceded by InstallAxis and  eventually followed by ShowPlot. Call InstallFunction every time  the plot window is shown (before ShowPlot)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NumPlotPoints"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "NumPlotPoints(${1:@integer plot}, ${2:@integer points})${3:;}$0"
          	description: "Specifies the number of points to be stored for worm and strip plots."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotNewPoint"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PlotNewPoint(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer index}, ${4:@real yValue})${5:;}$0"
          	description: "Adds and plots a new yValue point to the installed array. It is useful  when you want to see points plotted as they are calculated within a  loop (such as during simulations). To use this effectively, first use  InstallArray with a value of 0 for the plotPts argument. PlotNewPoint increments the plotPts of the installed array when the point is  plotted, and the equation “y[index] = yValue” is internally executed,  putting the new yValue into the installed array. Note that the first  value of index must be 0 when calling PlotNewPoint for a newly  installed array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotSignalFormat"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PlotSignalFormat(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer lineFormat}, ${4:@integer numFormat})${5:;}$0"
          	description: "Specifies the line format and number format for the trace."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotterBackground"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlotterBackground(${1:@integer plot}, ${2:@string backName})${3:;}$0"
          	description: "Specifies that the named picture should be used as the background  for the specified plotter. The picture file must be in the extensions  folder. See “Sounds on the Mac OS” on page 939 for more information on how external pictures are used in ExtendSim."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotterNameGet"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "PlotterNameGet(${1:@integer plot})${2:;}$0"
          	description: "Returns the name of the specified plotter."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotterNameSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlotterNameSet(${1:@integer plot}, ${2:@string newName})${3:;}$0"
          	description: "Sets the name of the specified plotter."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotterSignalColorSet"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PlotterSignalColorSet(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer Hue}, ${4:@integer Sat}, ${5:@integer Value})${6:;}$0"
          	description: "Sets the color of the specified signal.  This function will automatically set the color value of the signal to custom, and will then define  the custom color values to be the values you pass in."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotterSignalValueGet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlotterSignalValueGet(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer whichValue})${4:;}$0"
          	description: "Returns a value associate with the specified signal.  The whichValue  argument specifies which number that should be used. WhichValue: 0: Color, 1: Hue, 2: Sat, 3: Value, 4: Signal Visibility, 5: use Y2Axis,  6: Line Format."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotterSignalValueSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PlotterSignalValueSet(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer whichValue}, ${4:@integer value})${5:;}$0"
          	description: "Sets the value of a specified aspect of a plotter signal.  Which values  are the same as for PlotterSignalValueGet."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotterSquare"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PlotterSquare(${1:@integer plot}, ${2:@integer trueFalse})${3:;}$0"
          	description: "If true, forces the window to be square. If false, it removes the squaring restriction."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotterXAxisCalendar"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PlotterXAxisCalendar(${1:@integer plot}, ${2:@integer xAxisCalendar}, ${3:@integer format})${4:;}$0"
          	description: "Turns on or off Calendar date behavior on the x axis of the specified  plotter.  The xAxisCalendar flag set to a true value will set the plotter  to redraw with Calendar date values on the x Axis.  The format  parameter takes the following values: 0:  everything 1:  Just date, (ignore time) 2:  Just time, (ignore date) 3:  tight format.  (Two digit year, and don't show time value if zero.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotterXAxisIsTime"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PlotterXAxisIsTime(${1:@integer plot}, ${2:@integer xAxisTime})${3:;}$0"
          	description: "This function sets a true/false flag in the specified plotter that tells  the plotter if the X axis is defined as a time value or not.  The primary purpose for which the plotter uses this is for optimization.  If  the X axis of the plotter is scaled to a certain max value, and the next  X value is beyond that value, the plotter knows that it is done drawing because all subsequent X value will be higher than the current  values.  Without this optimization, the DE plotter, which is based  on a scatter plotter, not a continuous plotter, will continue to  attempt to draw the rest of the points in the data unnecessarily."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PushPlotPic"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PushPlotPic(${1:@integer plot})${2:;}$0"
          	description: "Pushes the top plot picture, page 1, down to page 2 of the plot window. The oldest plot (page 4) is discarded. This function only works  if the plot is showing when the function is called."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RefreshPlotter"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "RefreshPlotter(${1:@integer plot}, ${2:@integer wholeframe}, ${3:@integer openPlotterWindow})${4:;}$0"
          	description: "Function that will redraw the plotter without opening the plotter  window if it is closed. Used for redrawing the clones of a plotter  when a change has occurred."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RemoveSignal"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "RemoveSignal(${1:@integer plot}, ${2:@integer whichSig})${3:;}$0"
          	description: "Removes an installed array or function from a plot so that a new one  can be installed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RenamePlotter"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "RenamePlotter(${1:@integer plot}, ${2:@string newname})${3:;}$0"
          	description: "Renames the plotter."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RetimeAxis"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "RetimeAxis(${1:@integer plot})${2:;}$0"
          	description: "Sets the X axis values to the simulation start and end times. This is  useful for plotting simulation results without having to reset the x  axis values before a simulation is run."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RetimeAxisNStep"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "RetimeAxisNStep(${1:@integer plot}, ${2:@integer nStep})${3:;}$0"
          	description: "This function is used to correct axis values when “Plot every nth  Point” is selected in the plotter’s dialog. As an example, see the Plotter I/O block in the Plotter library."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetAxisName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetAxisName(${1:@integer plot}, ${2:@integer whichAxis}, ${3:@string theName})${4:;}$0"
          	description: "Sets the Axis name of the specified Axis. whichAxis: 1-x 2-y1 3-y2."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetSignalName"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetSignalName(${1:@integer plot}, ${2:@integer whichSig}, ${3:@string theName})${4:;}$0"
          	description: "Sets the name of signal whichSig."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetTickCounts"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetTickCounts(${1:@integer plot}, ${2:@integer xCount}, ${3:@integer yCount}, ${4:@integer y2Count})${5:;}$0"
          	description: "Specifies the number of ticks on the plotter axes in the plot. Specifying -1 as the parameter will use the current value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ShowPlot"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ShowPlot(${1:@integer plot}, ${2:@string plotName})${3:;}$0"
          	description: "Opens and names the plot window. If the plot has never been used,  an empty plot is shown. Additional calls bring the window to the  front. plotName is a string that contains the name of the plot. Note  that ShowPlot will not change the name of a plot that was typed in  the plot dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ShowPlot2"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ShowPlot2(${1:@integer blockNumber}, ${2:@integer plot})${3:;}$0"
          	description: "Shows the specified plotter.  The only difference between this function and ShowPlot is the block number argument, which allows you  to show a plotter in a remote block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SwitchPlotterRedraw"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SwitchPlotterRedraw(${1:@integer plot}, ${2:@integer direction})${3:;}$0"
          	description: "Specifies the direction in which the plot will be redrawn. A direction  of 0 specifies left to right, a direction of 1 specifies right to left. This  only affects the way that the plot lines are redrawn when the plot is  complete."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MakeScatter"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MakeScatter(${1:@integer plot}, ${2:@integer whichSig})${3:;}$0"
          	description: "Combines the two traces (the first specified by whichSig) into a scatter trace. Both whichSig and whichSig+1 traces must be the same  length and must have been installed by InstallArray before MakeScatter is called."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PlotNewScatter"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PlotNewScatter(${1:@integer plot}, ${2:@integer whichSig}, ${3:@integer index}, ${4:@real xValue}, ${5:@real yValue})${6:;}$0"
          	description: "Similar to plotNewPoint but for scatter plots. xValue is put into  whichSig and yValue is put into whichSig+1."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseCreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseCreate(${1:@string databaseName})${2:;}$0"
          	description: "Creates database databaseName and returns its index. Error:  returns negative error code if existing name already used."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseDelete"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseDelete(${1:@string databaseName})${2:;}$0"
          	description: "Deletes entire database. Returns negative error code if DB  doesn't exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseDeleteByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseDeleteByIndex(${1:@integer databaseIndex})${2:;}$0"
          	description: "Deletes entire database using index, returns error code. See also  DBDatabaseDelete() in the Developer Reference."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseTabDelete"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseTabDelete(${1:@integer databaseIndex}, ${2:@Str255 existingTabName})${3:;}$0"
          	description: "Deletes existingTabName tab in databaseIndex database viewer.  Returns -1 if error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldCreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldCreate(${1:@string databaseName}, ${2:@string tableName}, ${3:@string fieldName}, ${4:@integer fieldFormat}, ${5:@integer decimals}, ${6:@integer unique}, ${7:@integer readOnly}, ${8:@integer invisible})${9:;}$0"
          	description: "Creates field fieldName with specified attributes tableName and  returns its index. Error: returns negative error code if existing  name already used. Field format constants defined: DB_FIELDTYPE_INTEGER_VALUE,  DB_FIELDTYPE_INTEGER_BOOLEAN (checkbox),  DB_FIELDTYPE_REAL_GENERAL,  DB_FIELDTYPE_REAL_SCIENTIFIC,  DB_FIELDTYPE_REAL_PERCENT,  DB_FIELDTYPE_REAL_CURRENCY,  DB_FIELDTYPE_REAL_DATE_TIME,  DB_FIELDTYPE_REAL_DB_ADDRESS,  DB_FIELDTYPE_STRING_VALUE,  DB_FIELDTYPE_TABLELIST."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldCreateByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldCreateByIndex(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@string fieldName}, ${4:@integer fieldFormat}, ${5:@integer decimals}, ${6:@integer unique}, ${7:@integer readOnly}, ${8:@integer invisible})${9:;}$0"
          	description: "Creates field fieldName using specified indexes, returns error  code. See also DBFieldCreate() in the Developer Reference."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldDelete"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldDelete(${1:@string databaseName}, ${2:@string tableName}, ${3:@string fieldName})${4:;}$0"
          	description: "Delete field. Returns negative error code if field doesn't exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldDeleteByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldDeleteByIndex(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex})${4:;}$0"
          	description: "Deletes field using index, returns error code. See also DBFieldDelete() in the Developer Reference."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordsDelete"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordsDelete(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer startRecord}, ${4:@integer endRecord})${5:;}$0"
          	description: "Delete records from a table. Returns negative error code if table  doesn't exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordsInsert"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordsInsert(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer insertAtRecord}, ${4:@integer numberRecords})${5:;}$0"
          	description: "Insert at record index or append (insertAtRecord is zero) new  records to a table, returns tableIndex if ok. Returns negative error  code if table doesn't exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRelationCreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRelationCreate(${1:@string databaseName}, ${2:@string tableChildName}, ${3:@string fieldChildName}, ${4:@string tableParentName}, ${5:@string fieldParentName})${6:;}$0"
          	description: "Create relation, returns negative error code if anything doesn't  exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRelationDelete"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRelationDelete(${1:@string databaseName}, ${2:@string tableChildName}, ${3:@string fieldChildName}, ${4:@string tableParentName}, ${5:@string fieldParentName})${6:;}$0"
          	description: "Delete relation. Returns negative error code if relation doesn't  exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableCloneToTab"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DBTableCloneToTab(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@string tabName})${4:;}$0"
          	description: "Creates the tabName if not there, and clones the table to the tab."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableCreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableCreate(${1:@string databaseName}, ${2:@string tableName})${3:;}$0"
          	description: "Creates table tableName and returns its index. Error: returns  negative error code if existing name already used."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableCreateByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableCreateByIndex(${1:@integer databaseIndex}, ${2:@string tableName})${3:;}$0"
          	description: "Creates table tableName in current database using indexes,  returns negative error code. See also DBTableCreate() in the  Developer Reference."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableDelete"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableDelete(${1:@string databaseName}, ${2:@string tableName})${3:;}$0"
          	description: "; Delete table. Returns negative error code if Table doesn't exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableDeleteByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableDeleteByIndex(${1:@integer databaseIndex}, ${2:@integer tableIndex})${3:;}$0"
          	description: "Deletes table using index, returns error code. See also DBTableDelete() in the Developer Reference."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBToolTipsGet"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DBToolTipsGet(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex})${4:;}$0"
          	description: "Gets the string value of the tooltip. 1 All indexes good, gets field tooltip. 2 FieldIndex is zero, gets table tooltip. 3 Field and Table index zero, gets database tooltip."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBToolTipsSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBToolTipsSet(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@string value})${5:;}$0"
          	description: "Sets the tooltip to value. 1 All indexes good, sets field tooltip. 2 FieldIndex is zero, sets table tooltip. 3 Field and Table index zero, sets database tooltip."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBChildPopupSelector"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBChildPopupSelector(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordNum}, ${5:@integer trueForSelectorDialog})${6:;}$0"
          	description: "Opens a child field parent value selector similar to clicking on a  child field popup arrow, and changes the child value according to  which parent value the user selects. If trueForSelectorDialog is  TRUE, a selector dialog is shown with a scroll bar, good for a  large numbers of parent values. If FALSE, a popup menu is  shown, which is good for a small number of parent values. Returns the selected parent record index or zero if cancelled."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabasePopupSelector"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabasePopupSelector(${1:@real currentDBIndex})${2:;}$0"
          	description: "Opens a database selector dialog and selects the currentDBIndex  if not BLANK or zero. If BLANK or zero, doesn’t select any  entries in the list. Returns the selected database index or zero if cancelled."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldPopupSelector"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldPopupSelector(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@real currentFieldIndex})${4:;}$0"
          	description: "Opens a field selector dialog and selects the currentFieldIndex if  not BLANK or zero. If BLANK or zero, doesn’t select any entries  in the list. Returns the selected field index or zero if cancelled."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordPopupSelector"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordPopupSelector(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@real currentRecordIndex})${5:;}$0"
          	description: "Opens a record selector dialog and selects the currentRecordIndex if not BLANK or zero. If BLANK or zero, doesn’t select any  entries in the list. Returns the selected record index or zero if cancelled."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTablePopupSelector"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTablePopupSelector(${1:@integer databaseIndex}, ${2:@integer tableIndex})${3:;}$0"
          	description: "Opens a table selector dialog and selects the currentTableIndex if  not BLANK or zero. If BLANK or zero, doesn’t select any entries  in the list. Returns the selected table index or zero if cancelled."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseCopy"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseCopy(${1:@integer fromDatabaseIndex}, ${2:@string newDatabaseName})${3:;}$0"
          	description: "Copies entire database to a new database. Returns index of the  new database or -1 if error (bad index or same name as existing  database)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableCopy"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableCopy(${1:@integer fromDatabaseIndex}, ${2:@integer fromTableIndex}, ${3:@integer toDatabaseIndex}, ${4:@string newTableName})${5:;}$0"
          	description: "Copies and optionally renames an existing table into its current  database (must use newTableName) or another database (If  newTableName is blank, keeps the existing table name). Returns  index of the new table or -1 if error (bad index or same table  name as existing table in that database)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseExport"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseExport(${1:@string databaseName}, ${2:@string pathName})${3:;}$0"
          	description: "Export database to DB text file pathName. If pathName is a  blank string, let the user select a text file. Returns -1 if error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseImport"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseImport(${1:@string databaseName}, ${2:@string pathName})${3:;}$0"
          	description: "Import database from text file pathName, replacing the database  named databaseName or creating it if it didn’t exist. If the database name is in the form “databaseName<delete>”, it deletes  any left over tables that were not imported in this file. If pathName is a blank string, let the user select a text file. Returns the  database index or -1 if it fails. Sends both a LinkStructure message (what changed: DB replaced) and a LinkContent message (what changed: data changed) to linked blocks. See DILinkUpdateInfo() for an explanation of what changed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableExportData"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableExportData(${1:@string pathName}, ${2:@string userPrompt}, ${3:@string format}, ${4:@integer databaseIndex}, ${5:@integer tableIndex}, ${6:@integer rows}, ${7:@integer columns})${8:;}$0"
          	description: "Exports the table data to a delimited text file. If pathName is a  blank string, let the user select a text file. If format is a blank  string, uses a tab as delimiter (see Import() functions). Returns 1 if error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableImportData"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableImportData(${1:@string pathName}, ${2:@string userPrompt}, ${3:@string format}, ${4:@integer databaseIndex}, ${5:@integer tableIndex})${6:;}$0"
          	description: "Imports a delimited text file into a database table and returns the  number of rows imported. If format is a blank string, uses a tab  as delimiter (see Import() functions). This function maintains existing relations in the table but will  discard relations that violate parent/child data requirements: all  child data in a relation must be blank or exist in the parent data  set. NOTE: This function automatically resizes the table to the  number of rows imported, so you do not need to allocate any  records in the table before calling this function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseExists"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseExists(${1:@integer databaseIndex})${2:;}$0"
          	description: "Passing in a database index, returns TRUE if the database exists,  FALSE if it doesn’t exist. Also see DBTableExists(), DBFieldExists(), and DBRecordExists()."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseGetIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseGetIndex(${1:@string databaseName})${2:;}$0"
          	description: "Returns database index or negative error if not found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseGetName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseGetName(${1:@integer databaseIndex})${2:;}$0"
          	description: "Gets the name of the database or blank string if bad index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseRename"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseRename(${1:@integer databaseIndex}, ${2:@string newDatabaseName})${3:;}$0"
          	description: "Renames a database. Returns a negative error code if newDatabaseName already exists or the old database doesn't exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabasesGetNum"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabasesGetNum()${1:;}$0"
          	description: "Because database indexes remain constant even if some databases  are deleted, this returns number of database slots of which some  could be empty. To count how many actual databases there are,  use a loop and count the databases that have a non-blank name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseShowHideReserved"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseShowHideReserved(${1:@integer showIfTrueHideIfFalse})${2:;}$0"
          	description: "Use this to hide or show reserved databases without using the  menu command. Reserved databases are discussed on page 960. Note: When the model closes, the reserved databases return to  being hidden. So this command must be called again whenever  the model is opened."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseTabChangeName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseTabChangeName(${1:@integer databaseIndex}, ${2:@Str255 existingTabName}, ${3:@Str255 newTabName})${4:;}$0"
          	description: "Changes the name of existingTabName to newTabName in databaseIndex database viewer. Returns -1 if error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldExists"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldExists(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex})${4:;}$0"
          	description: "Passing in a database index, table index, field index, returns  TRUE if the field exists, FALSE if it doesn’t exist. Also see  DBDatabaseExists(), DBTableExists(), and DBRecordExists()."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldGetIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldGetIndex(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@string fieldName})${4:;}$0"
          	description: "Returns field index or negative error if not found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldGetName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DBFieldGetName(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex})${4:;}$0"
          	description: "Gets the name of the field or blank string if bad index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldGetProperties"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldGetProperties(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer which})${5:;}$0"
          	description: "which: 1: fieldType, 2: fieldDecimals, 3: fieldUnique, 4: fieldReadOnly, 5: fieldInvisible, 6: IfFieldID or -1 if error. See the  DBFieldCreate() function, above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldGetPropertiesUsingAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldGetPropertiesUsingAddress(${1:@real dbAddress}, ${2:@integer which})${3:;}$0"
          	description: "This uses a DBAddress (see the DBAddress functions). which: 1:  fieldType, 2: fieldDecimals, 3: fieldUnique, 4: fieldReadOnly, 5:  fieldInvisible, 6: IfFieldID or -1 if error. See the DBFieldCreate()  function, above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldMove"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldMove(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer newFieldIndex})${5:;}$0"
          	description: "Moves field fieldName to newFieldIndex, moving other fields in  the process. Returns a negative when indexes are incorrect."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldRename"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldRename(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@string newFieldName})${5:;}$0"
          	description: "Renames a field. Returns a negative error code if the field already  exists or the old field doesn't exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldSetInitialize"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldSetInitialize(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer initFlag}, ${5:@integer initSimFlag}, ${6:@string value})${7:;}$0"
          	description: "Set the field's initialization parameters.  initFlag: 0 no init (default), 1 init to initDataValue.  initSimFlag: 0 init each run (default), 1 init first run of multisim. value: what value to init the field, real or string for string fields. Returns an error code if bad indexes."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldSetProperties"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldSetProperties(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer which}, ${5:@integer newValue})${6:;}$0"
          	description: "which: 1: fieldType, 2: fieldDecimals, 3: fieldUnique, 4: fieldReadOnly, 5: fieldInvisible, 6: IfFieldID. Returns -1 if index error.  See the DBFieldCreate() function, above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldsGetNum"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldsGetNum(${1:@integer databaseIndex}, ${2:@integer tableIndex})${3:;}$0"
          	description: "Returns number of fields. Returns negative error code if no fields  or no such table index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordExists"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordExists(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex})${5:;}$0"
          	description: "Passing in a database index, table index, field index, record  index, returns TRUE if the record (database cell) exists, FALSE if  it doesn’t exist. Also see DBDatabaseExists(), DBTableExists(),  and DBFieldExists()."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordIDFieldGetIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordIDFieldGetIndex(${1:@integer databaseIndex}, ${2:@string tableName})${3:;}$0"
          	description: "Returns field index of the recordID field, if any.  Returns negative error if no fieldID found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordsGetNum"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordsGetNum(${1:@integer databaseIndex}, ${2:@integer tableIndex})${3:;}$0"
          	description: "Returns number of records in a table. Returns negative if no such  table index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRelationsGetNames"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRelationsGetNames(${1:@integer databaseIndex}, ${2:@integer relationIndex}, ${3:@string relationNames[]})${4:;}$0"
          	description: "Returns zero error code and tableChild, fieldChild, tableParent,  fieldParent in string relationNames[4]."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRelationsGetNum"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRelationsGetNum(${1:@integer databaseIndex})${2:;}$0"
          	description: "Returns number of relations in the DB. Returns negative error  code if no DB."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableExists"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableExists(${1:@integer databaseIndex}, ${2:@integer tableIndex})${3:;}$0"
          	description: "Passing in a database and table index, returns TRUE if the table  exists, FALSE if it doesn’t exist. Also see DBDatabaseExists(),  DBFieldExists(), and DBRecordExists()."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableGetIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableGetIndex(${1:@integer databaseIndex}, ${2:@string tableName})${3:;}$0"
          	description: "Returns table index or negative error if not found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableGetProperties"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableGetProperties(${1:@integer databaseIndex}, ${2:@integer tableIndex})${3:;}$0"
          	description: "Returns the initialization method: 0 is no initialization, 1 is  delete all records for all runs, 2 is delete all records for only the  first run. Returns -1 if error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableGetName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DBTableGetName(${1:@integer databaseIndex}, ${2:@integer tableIndex})${3:;}$0"
          	description: "Gets the name of the table or blank string if bad index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableSetProperties"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableSetProperties(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer initializeMethod})${4:;}$0"
          	description: "Sets the initialization method: 0 is no initialization, 1 is delete all  records for all runs, 2 is delete all records for only the first run.  Returns -1 if error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableRename"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableRename(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@string newTableName})${4:;}$0"
          	description: "Renames a table. Returns a negative error code if the table  already exists or old table doesn't exist."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTablesGetNum"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTablesGetNum(${1:@integer databaseIndex})${2:;}$0"
          	description: "Because table indexes remain constant even if some tables are  deleted, returns number of table slots of which some could be  empty. To count how many actual databases there are, use a loop  and count the tables that have a non-blank name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetAsNumber"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBDataGetAsNumber(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex})${5:;}$0"
          	description: "Reads the value as a number without any formatting. Note that  random distributions in cells will return a different random  number each time that this function is called. Note: Using this function to read a “List of Tables” field returns  the index of the table read."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetAsNumberParentAltField"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBDataGetAsNumberParentAltField(${1:@real childDBAddress}, ${2:@integer altFieldIndex})${3:;}$0"
          	description: "This function, when called with a child DBAddress, allows  returning the value from a different field of the parent record.  Reads the value as a number without any formatting. Note that  random distributions in cells will return a different random  number each time that this function is called. Note: Using this function to read a “List of Tables” field returns  the index of the table read."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetAsNumberUsingAddress"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBDataGetAsNumberUsingAddress(${1:@real dbAddress})${2:;}$0"
          	description: "Using a DBAddress, read the value as a number without any formatting. Note that random distributions in cells will return a  different random number each time that this function is called. Note: Using this function to read a “List of Tables” field returns  the index of the table read."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetAsString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DBDataGetAsString(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex})${5:;}$0"
          	description: "Reads the value as a string at full precision. Percentage format  returns the normalized value as “1.00” for database cells that read  100%. NOTE that if the table is a table of tables, this returns the  table name (see DBGetDataAsNumber() below. Note that random distributions in cells will return a different random number  each time that this function is called. Note: Using this function to read a “List of Tables” field returns  the name of the table read."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetAsStringParentAltField"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DBDataGetAsStringParentAltField(${1:@real childDBAddress}, ${2:@integer altFieldIndex})${3:;}$0"
          	description: "This function, when called with a child DBAddress, allows  returning the value from a different field of the parent record.  Reads the value as a string at full precision. Percentage format  returns the normalized value as “1.00” for database cells that read  100%. NOTE that if the table is a table of tables, this returns the  table name (see DBGetDataAsNumber() below. Note that random distributions in cells will return a different random number  each time that this function is called. Note: Using this function to read a “List of Tables” field returns  the name of the table read."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetAsStringUsingAddress"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DBDataGetAsStringUsingAddress(${1:@real dbAddress})${2:;}$0"
          	description: "Using a DBAddress, read the value as a string at full precision.  Percentage format returns the normalized value as “1.00” for  database cells that read 100%. NOTE that if the table is a table  of tables, this returns the table name (see DBGetDataAsNumber() below. Note that random distributions in cells will return a  different random number each time that this function is called. Note: Using this function to read a “List of Tables” field returns  the name of the table read."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetDateAsSimTime"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBDataGetDateAsSimTime(${1:@integer dbIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@integer timeUnits})${6:;}$0"
          	description: "Reads a database cell as a date, and converts it to a simulation  time value.  This allows the user to read a date value directly as a  simulation time value, avoiding the conversion process."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetDateAsSimTimeUsingAddress"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBDataGetDateAsSimTimeUsingAddress(${1:@real addressValue}, ${2:@integer timeUnits})${3:;}$0"
          	description: "Using a dbAddress, reads a database cell as a date, and converts it  to a simulation time value.  This allows the user to read a date  value directly as a simulation time value, avoiding the conversion  process."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetParent"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataGetParent(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@integer parentArray[3]})${6:;}$0"
          	description: "Get the parent information from a child field. ParentArray can  be declared as a local variable array (can be declared in equation  blocks): integer parentArray[3]; parentArray[0] returns parent Table index parentArray[1] returns parent Field index parentArray[2] returns parent Record index (or zero if no child  value has been set) Note that this function also returns the parent record index (or  zero if no child value has been set) (same as parentArray[2]) or a  negative error code."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetParentUsingAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataGetParentUsingAddress(${1:@real dbAddress}, ${2:@integer parentArray[3]})${3:;}$0"
          	description: "Using a DBAddress, get the parent information from a child  field address. ParentArray can be declared as a local variable array (can be declared in equation blocks): integer parentArray[3]; parentArray[0] returns parent Table index parentArray[1] returns parent Field index parentArray[2] returns parent Record index (or zero if no child  value has been set) Note that this function also returns the parent record index (or  zero if no child value has been set) (same as parentArray[2]) or a  negative error code."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsNumber"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsNumber(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@real valueDouble})${6:;}$0"
          	description: "Write value of field as number to a record. Returns a negative  error code. Only sends LINKCONTENT message to block if  value has changed. If setting a unique field cell to a non-unique  value, returns the record index of the original unique value. This  function does not work with reserved databases. See DBDataSetAsNumberReserved(), which works only with reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsNumberReserved"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsNumberReserved(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@real valueDouble})${6:;}$0"
          	description: "This function works only with reserved databases. Otherwise, it  is the same as DBDataSetAsNumber(), which works only with  non-reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsNumberUsingAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsNumberUsingAddress(${1:@real dbAddress}, ${2:@real valueDouble})${3:;}$0"
          	description: "Using a DBAddress, write value of field as number to a record.  Returns a negative error code. Only sends LINKCONTENT  message to block if value has changed.If setting a unique field  cell to a non-unique value, returns the record index of the original unique value. See DBDataSetAsNumberUsingAddressReserved(), which works only with reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsNumberUsingAddressReserved"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsNumberUsingAddressReserved(${1:@real dbAddress}, ${2:@real valueDouble})${3:;}$0"
          	description: "This function works only with reserved databases. Otherwise, it  is the same as DBDataSetAsNumberUsingAddress(), which  works only with non-reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsParentIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsParentIndex(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@integer parentIndex})${6:;}$0"
          	description: "For a child field, sets the parent index directly rather than with  DBPutDataAs... functions trying to set the parent index by finding the data value in the parent. Only sends LINKCONTENT  msg to block if value changed. Note that you can set the parentIndex to zero if you want to set the child value to 'no value  yet'. See DBDataSetAsParentIndexReserved(), which works  only with reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsParentIndexReserved"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsParentIndexReserved(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@integer parentIndex})${6:;}$0"
          	description: "This function works only with reserved databases. Otherwise, it  is the same as DBDataSetAsParentIndex(), which works only  with non-reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsParentIndexUsingAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsParentIndexUsingAddress(${1:@real dbAddress}, ${2:@integer parentIndex})${3:;}$0"
          	description: "Using a DBAddress for a child field, sets the parent index  directly rather than with DBPutDataAs... functions trying to set  the parent index by finding the data value in the parent. Only  sends LINKCONTENT msg to block if value changed. Note  that you can set the parentIndex to zero if you want to set the  child value to <no value yet>. See DBDataSetAsParentIndexUsingAddressReserved(), which works only with reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsParentIndexUsingAddressReserved"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsParentIndexUsingAddressReserved(${1:@real dbAddress}, ${2:@integer parentIndex})${3:;}$0"
          	description: "This function works only with reserved databases. Otherwise, it  is the same as DBDataSetAsParentIndexUsingAddress(), which  works only with non-reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsString"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsString(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@string valueString})${6:;}$0"
          	description: "Write value of field as string to a record. Percentage format  expects the normalized value as “1.00” for database cells that  read 100%. Returns a negative error code. Only sends LINKCONTENT message to block if value has changed.If setting a  unique field cell to a non-unique value, returns the record index  of the original unique value. See DBDataSetAsStringReserved(),  which works only with reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsStringReserved"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsStringReserved(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@string valueString})${6:;}$0"
          	description: "This function works only with reserved databases. Otherwise, it  is the same as DBDataSetAsString(), which works only with  non-reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsStringUsingAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsStringUsingAddress(${1:@real dbAddress}, ${2:@string valueString})${3:;}$0"
          	description: "Using a DBAddress, write value of field as string to a record. Percentage format expects the normalized value as “1.00” for database cells that read 100%. Returns a negative error code. Only  sends LINKCONTENT message to block if value has  changed.If setting a unique field cell to a non-unique value,  returns the record index of the original unique value. See DBDataSetAsStringUsingAddressReserved(), which works only with  reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetAsStringUsingAddressReserved"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetAsStringUsingAddressReserved(${1:@real dbAddress}, ${2:@string valueString})${3:;}$0"
          	description: "This function works only with reserved databases. Otherwise, it  is the same as DBDataSetAsStringUsingAddress(), which works  only with non-reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetDateAsSimTime"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetDateAsSimTime(${1:@integer dbIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@real simTimeVal}, ${6:@integer timeUnits})${7:;}$0"
          	description: "Takes a simulation time value, converts it to a date, and sets a  DB cell with that date value. See DBDataSetDateAsSimTimeReserved(), which works only with reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetDateAsSimTimeReserved"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetDateAsSimTimeReserved(${1:@integer dbIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@real simTimeVal}, ${6:@integer timeUnits})${7:;}$0"
          	description: "This function works only with reserved databases. Otherwise, it  is the same as DBDataSetDateAsSimTime(), which works only  with non-reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetDateAsSimTimeUsingAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetDateAsSimTimeUsingAddress(${1:@real addressValue}, ${2:@real simTimeVal}, ${3:@integer timeUnits})${4:;}$0"
          	description: "Using a dbAddress, takes a simulation time value, converts it to a  date, and sets a DB cell with that date value. See DBDataSetDateAsSimTimeUsingAddressReserved(), which works only  with reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetDateAsSimTimeUsingAddressReserved"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetDateAsSimTimeUsingAddressReserved(${1:@real addressValue}, ${2:@real simTimeVal}, ${3:@integer timeUnits})${4:;}$0"
          	description: "This function works only with reserved databases. Otherwise, it  is the same as DBDataSetDateAsSimTimeUsingAddress() which  works only with non-reserved databases."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataGetCurrentSeed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataGetCurrentSeed(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex})${5:;}$0"
          	description: "Returns current running seed value from a random cell specified  by indexes. Returns zero if bad cell."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDataSetCurrentSeed"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDataSetCurrentSeed(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@integer seedValue})${6:;}$0"
          	description: "Sets current running seed value for a random cell specified by  indexes. Returns 0 if bad cell."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRandomDistributionGet"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DBRandomDistributionGet(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@string distName}, ${6:@real params[]}, ${7:@real empTable[][2]})${8:;}$0"
          	description: "Gets the cell's distribution, if any assigned. Returns the info on  the distribution in the returnParams array. Can use locally or statically declared returnParams (Real returnParams[10]) and empTable (Real empTable[maxEmpiricalrows][2]) or dynamic arrays  for returnParams[], empTable[][2]; If using dynamic arrays, no  Makearray() needed. You can dispose dynamic arrays after the  call if not needed (Local arrays allow use in an Equation block).  Case: All database indexes good (ignores distName), return info  for a DB cell: 1) Return all info in arrays. Function returns name of distribution or blank if not named. 2) Return distributionIndex of 0 in array if not a random cell. Case: Only databaseIndex is good, rest are zero. Return info for  distName named distribution, if it exists: 1) If distName is good name: Return all info for that distribution (useSeed and seedInit will be zero as it is defined for each DB  cell). 2) distName doesn’t exist: Return string “-1” Note that the returned distributionIndex values are the same as used  in the RandomCalculate() function, with these additions: EmpiricalDiscrete 200 EmpiricalStepped 201 EmpiricalInterpolated 202 returnParams[0] = distributionIndex; returnParams[1] = meanDistParam1; returnParams[2] = argDistParam2; returnParams[3] = modeParam3; returnParams[4] = locationParam4; returnParams[5] = lowerLimit; returnParams[6] = upperLimit; returnParams[7] = useSeed; returnParams[8] = seedInit; returnParams[9] = empiricNumRows; empTable contains the empirical distribution array, if any."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRandomDistributionSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRandomDistributionSet(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex}, ${5:@string distName}, ${6:@integer distributionIndex}, ${7:@real param1}, ${8:@real param2}, ${9:@real param3}, ${10:@real param4}, ${11:@real lowerLimit}, ${12:@real upperLimit}, ${13:@integer useSeed}, ${14:@integer seedInit}, ${15:@real empTable[][2]})${16:;}$0"
          	description: "This can be used in several cases: 1) Define or modify a named random distribution without setting a DB cell to it (must use this for empirical distributions): a) Set databaseIndex, other DB indexes should be zero: b) Use distributionIndex to set the distribution type. c) Set remaining params for this distribution. d) Fill empTable if this is an empirical distribution. 2) Set a DB cell to a named random distribution (must use this  for empirical distributions): a) Set all DB indexes to point to a DB cell. b) Set distribution name as it is defined in database or via case 1  above.  c) Set useSeed and seedInit for this DB cell. Other parameters  are ignored as name defines distribution to use. 3) Set a DB cell to an unnamed non-empirical random distribution: a) Set all DB indexes to point to a DB cell. b) Set distribution name to ““ (blank string). c) Set distribution index and parameters as in case 1 above. 4) Remove the random distribution from a cell and make it a  constant: a) Set all DB indexes to point to a DB cell. b) Set distribution name to ““ (blank string). c) Set distribution index to zero. Note that the distributionIndex values are the same as used in the  RandomCalculate() function, with these additions: EmpiricalDiscrete 200 EmpiricalStepped 201 EmpiricalInterpolated 202 Returns -1 as error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordFind"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordFind(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer notRecordIDFieldIndex}, ${4:@integer startingRecordIndex}, ${5:@integer exactMatch}, ${6:@string findValue})${7:;}$0"
          	description: "Finds a record and returns index of record found. If fieldIndex is  zero, uses RecordID field for search. startingRecordIndex can be  zero or one to start at the first record. To keep searching for more  matches, increment the returned record index by one for startingRecordIndex. If exactMatch is FALSE, finds record containing  findValue without having to match entire field value. Returns 0 if record not found. Returns negative error if index  error.  NOTE: Different find functions return different error codes  because of legacy concerns."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordFindMultipleFields"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordFindMultipleFields(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer startingRecordIndex}, ${4:@integer fieldIndex1}, ${5:@string findValue1}, ${6:@integer exactMatch1}, ${7:@integer fieldIndex2}, ${8:@string findValue2}, ${9:@integer exactMatch2}, ${10:@integer fieldIndex3}, ${11:@string findValue3}, ${12:@integer exactMatch3})${13:;}$0"
          	description: "Finds a record and returns index of record found. Up to 3 fields  can be searched. If only one is searched, make both fieldIndex2,  fieldIndex3 zero. If only two are searched, make fieldIndex3 zero.  StartingRecordIndex can be zero or one to start at the first  record. To keep searching for more matches, increment the  returned record index by one for startingRecordIndex. If exactMatch is FALSE, finds record containing findValue without having to match the entire field value. Returns -1 if record not found or index error. NOTE: Different find functions return different error codes  because of legacy concerns."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordFindMultipleFieldsArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordFindMultipleFieldsArray(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer startingRecordIndex}, ${4:@integer fieldIndexArray[]}, ${5:@string findValueArray[]}, ${6:@integer exactMatchArray[]})${7:;}$0"
          	description: "Finds a record and returns index of record found. Any number of  fields can be searched. Create three arrays that can be local, static  or dynamic. For example, to declare local arrays in an Equation  block to search 4 fields: integer fieldIndexArray[4], exactMatchArray[4]; string findValueArray[4]; The arrays can be larger than you need as only nonzero fieldIndexArray members will be searched. The first zero fieldIndex will  end the fields searched. StartingRecordIndex can be zero or one  to start at the first record. To keep searching for more matches,  increment the returned record index by one for startingRecordIndex. If exactMatch is FALSE, finds record containing  findValue without having to match the entire field value. Returns -1 if record not found or index error. NOTE: Different find functions return different error codes  because of legacy concerns."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordFindNumericalRange"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordFindNumericalRange(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer notRecordIDFieldIndex}, ${4:@integer startingRecordIndex}, ${5:@real lowerDouble}, ${6:@real upperDouble})${7:;}$0"
          	description: "Finds a record and returns index of record found where number  >= lowerDouble and <= upperDouble. To find exactly, make  lowerDouble and upperDouble the same. If fieldIndex is zero,  uses RecordID field for search. StartingRecordIndex can be zero  or one to start at the first record. To keep searching for more  matches, increment the returned record index by one for startingRecordIndex. Returns 0 if record not found or index error.  NOTE: Different find functions return different error codes  because of legacy concerns."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordFindParentRecordIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordFindParentRecordIndex(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer childFieldIndex}, ${4:@integer startingRecordIndex}, ${5:@integer findParentIndexValue})${6:;}$0"
          	description: "Returns the index of the child record found pointing to startingParentIndex. StartingRecordIndex can be 0 or 1 to start at the first  record. To keep searching for more matches, increment the  returned record index by 1 for startingRecordIndex. Returns index  of found record or 0 for record not found, -1 for indexing error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableSort"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableSort(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex1}, ${4:@integer direction1}, ${5:@integer fieldIndex2}, ${6:@integer direction2}, ${7:@integer fieldIndex3}, ${8:@integer direction3})${9:;}$0"
          	description: "Sorts the table using up to three fields and directions. Set the  fieldIndexes of the fields you need sorted, and set the other fieldIndexes to zero. For example, if you want to sort only one field,  set fieldIndex1 to that field index and set fieldIndex2 and 3 to  zero. The direction arguments are TRUE for ascending and  FALSE for descending. Returns -1 if there is an error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBAddressCreate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBAddressCreate(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex})${5:;}$0"
          	description: "Returns a DBAddress value from the indexes."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBAddressGetAllIndexes"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBAddressGetAllIndexes(${1:@real addressValue}, ${2:@integer returnIndexesArray[4]})${3:;}$0"
          	description: "Return the indexes from a DBAddress value. ReturnIndexesArray can be declared as a local variable array (can be declared in  equation blocks): integer returnIndexesArray[4]; returnIndexesArray[0] returns Database index returnIndexesArray[1] returns Table index returnIndexesArray[2] returns Field index returnIndexesArray[3] returns Record index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBAddressGetAsString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DBAddressGetAsString(${1:@real addressValue})${2:;}$0"
          	description: "Returns the string representation of a DBAddress value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBAddressGetDlg"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBAddressGetDlg(${1:@real theInitVal})${2:;}$0"
          	description: "Puts up a dialog for the user to specify the coords of a DBAddress. theInitVal is a starting value. BLANK leaves all blank."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBAddressGetDlg2"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBAddressGetDlg2(${1:@integer DBIndex}, ${2:@integer tableIndex}, ${3:@integer fieldIndex}, ${4:@integer recordIndex})${5:;}$0"
          	description: "Similar to DBAddressGetDlg. Displays a dialog so the user can  enter a database address. Note that in addition to entering the  DB coordinates as separate values, you can also pass -2 for a DB  coordinate, and this will hide that coordinate on the dialog. This  allows you to enter just a DB index, for example, or just a DB  and table index. Returns a database address."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBAddressGetFromString"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBAddressGetFromString(${1:@string dbAddressStr})${2:;}$0"
          	description: "Returns the real database address when the string argument is of  the form “D:T:F:R” where D, T, F, and R are the numerical  indexes of the address."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBAddressIncrementIndex"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBAddressIncrementIndex(${1:@real addressValue}, ${2:@integer whichElement}, ${3:@integer incrementValue})${4:;}$0"
          	description: "Increments or decrements (negative incrementValue) a DBAddress. whichElement: 1: database, 2: table, 2: field, 4: record."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBAddressReplaceIndex"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DBAddressReplaceIndex(${1:@real addressValue}, ${2:@integer whichElement}, ${3:@integer newValue})${4:;}$0"
          	description: "Replaces part of a DBAddress with newValue. whichElement: 1:  database, 2: table, 3: field, 4: record."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseGetIndexFromAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseGetIndexFromAddress(${1:@real addressValue})${2:;}$0"
          	description: "Returns a dabase index from the DBAddress value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBFieldGetIndexFromAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBFieldGetIndexFromAddress(${1:@real addressValue})${2:;}$0"
          	description: "Returns a field index from the DBAddress value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBRecordGetIndexFromAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBRecordGetIndexFromAddress(${1:@real addressValue})${2:;}$0"
          	description: "Returns a record index from the DBAddress value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTableGetIndexFromAddress"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTableGetIndexFromAddress(${1:@real addressValue})${2:;}$0"
          	description: "Returns a table index from the DBAddress value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseOpenViewer"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseOpenViewer(${1:@integer databaseIndex}, ${2:@string tableName})${3:;}$0"
          	description: "Open the table data viewer. If tableName is blank or doesn't  exist, open the default database viewer. Returns table index if  successful or -1 if error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseOpenViewerToTab"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseOpenViewerToTab(${1:@integer databaseIndex}, ${2:@Str255 tableName}, ${3:@Str255 openTabName})${4:;}$0"
          	description: "Opens the table data viewer. If tableName is blank or doesn't  exist, open the default database viewer. If openTabName exists,  opens to that tab. If it is blank or doesn't exist, opens the last  clicked tab. Returns table index if successful or -1 if error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatabaseCloseViewer"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatabaseCloseViewer(${1:@integer databaseIndex}, ${2:@string tableName})${3:;}$0"
          	description: "Close the table data viewer. If tableName is blank or doesn't  exist, close the database viewer. Returns table index if successful  or -1 if error."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBBlockRegisterContent"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBBlockRegisterContent(${1:@integer blockNumber}, ${2:@integer databaseIndex}, ${3:@integer tableIndex}, ${4:@integer fieldIndex}, ${5:@integer recordIndex})${6:;}$0"
          	description: "This will register the block with the selected part of the database  so it will get LINKCONTENT messages when that data is  changed. Returns negative code if block not found. Note that for  content registration, individual cells as well as whole databases,  tables, fields, and records can be registered. If databaseIndex is negative, register all databases. If tableIndex is negative, register all tables. If fieldIndex is negative and recordIndex is negative, register all  cells in table. If fieldIndex is negative and recordIndex is good, register whole  record. If fieldIndex is good and recordIndex is negative, register whole  field."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBBlockRegisterStructure"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBBlockRegisterStructure(${1:@integer blockNumber}, ${2:@integer databaseIndex}, ${3:@integer tableIndex})${4:;}$0"
          	description: "This will register the block with the selected part of the database  so it will get a LINKSTRUCTURE message when the database  or table structure is changed. Returns negative code if block not  found. Note for structure registration, only whole databases or  whole tables can be registered. If databaseIndex is negative, register all databases for structure  changes. If tableIndex is negative, register all tables for structure changes."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBBlockUnregisterContent"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBBlockUnregisterContent(${1:@integer blockNumber}, ${2:@integer databaseIndex}, ${3:@integer tableIndex}, ${4:@integer fieldIndex}, ${5:@integer recordIndex})${6:;}$0"
          	description: "For non-user-linked data, take it out of the registered block list.  Return negative code if block not found.  If databaseIndex is negative, unregister all databases. If tableIndex is negative, unregister all tables. If fieldIndex is negative and recordIndex is negative, unregister  all cells in table. If fieldIndex is negative and recordIndex is good, unregister  whole record. If fieldIndex is good and recordIndex is negative, unregister  whole field."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBBlockUnregisterStructure"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBBlockUnregisterStructure(${1:@integer blockNumber}, ${2:@integer databaseIndex})${3:;}$0"
          	description: "For non-user-linked data, take it out of the registered block list.  Return negative code if block not found.  If databaseIndex is negative, unregister all databases. If tableIndex is negative, unregister all tables."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBDatatable"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBDatatable(${1:@integer blockNumber}, ${2:@string datatableName}, ${3:@integer databaseIndex}, ${4:@integer tableIndex}, ${5:@integer showFieldNames})${6:;}$0"
          	description: "Link a database table with a data table."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBParameter"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBParameter(${1:@integer blockNumber}, ${2:@string dialogItemName}, ${3:@integer databaseIndex}, ${4:@integer tableIndex}, ${5:@integer fieldIndex}, ${6:@integer recordIndex})${7:;}$0"
          	description: "Link a parameter with a Database cell."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ArrayDataMove"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ArrayDataMove(${1:@array y[]}, ${2:@integer StartIndex}, ${3:@integer rowsToMove}, ${4:@integer targetIndex}, ${5:@integer clearData})${6:;}$0"
          	description: "This function moves a specified number of rows of data (rowsToMove) from a specified location (startIndex) in the array to  another specified location in the array (targetIndex). If the clearData  flag is set to TRUE (1), it will clear out the old data locations in the  array. Returns 0 if successful."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DisposeArray"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DisposeArray(${1:@array array})${2:;}$0"
          	description: "Dynamic arrays only. Releases the memory used by a dynamic array.  Use this when you have finished using a dynamic array to save memory and model file space. Call this function with the original static  declared name of the array (see notes above)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FindMinimum"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "FindMinimum(${1:@real RealArray}, ${2:@integer ResultArray})${3:;}$0"
          	description: "Accepts two dynamic arrays; one real, one integer. It searches the  RealArray for the minimum values and returns the minimum value.  The ResultArray is filled with the position numbers of the elements  that contain the minimum value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FindMinimumWithThreshhold"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "FindMinimumWithThreshhold(${1:@realArray y}, ${2:@integerArray y2}, ${3:@real threshhold})${4:;}$0"
          	description: "This function is identical to the FindMinimum function defined in  the above, with the addition of the threshhold argument. This argument specifies a threshhold below which the real values will be  ignored. I.e. the minimum value found will always be at the threshhold, or above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDimension"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDimension(${1:@array array})${2:;}$0"
          	description: "The size of the first dimension (rows). If array is a dynamic array,  this function will return the size of the dynamic dimension. This is  useful for determining the maximum subscript (the returned value  minus 1) of an array when it is passed to a user-defined function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDimensionByName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDimensionByName(${1:@integer blockNumber}, ${2:@string arrayName})${3:;}$0"
          	description: "This function is a variation of the GetDimension function that has  two differences.  The first is that it takes a block number argument,  which specifies which block contains the array, and the second is that  it takes the arrayname of the array as an argument rather than the  array itself.  The combination of these two differences mean that you  can call the function from a remote block, query the number of rows  in a array, and also pass in a string variable for the arrayname if  desired."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDimensionColumns"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDimensionColumns(${1:@array array})${2:;}$0"
          	description: "Returns the number of columns (second dimension in a two dimensional array) in the specified array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetDimensionColumnsByName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetDimensionColumnsByName(${1:@integer blockNumber}, ${2:@string arrayName})${3:;}$0"
          	description: "Has the same behavior as the getDimensionColumns  function, with  the exception that it can be called from an outside block, and doesn't  have to be called from within the block that contains the array.  Note  that the arrayName argument is the name of the array as a string, not  the array name itself.  This also means that the function can be called  with a string variable as the second argument, and not a hard coded  array name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MakeArray"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MakeArray(${1:@array array}, ${2:@integer i})${3:;}$0"
          	description: "Dynamic arrays only. Allocates a dynamic array. i is the desired value  of the first (blank) dimension. MakeArray does not clear or disturb  data already in the array and can be used to make an array larger or  smaller. If you need to initialize an array to 0 or BLANK, this must  be done by the block’s code. Call this function with the original  static declared name of the array (see notes above)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "MakeArray2"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "MakeArray2(${1:@integer blockNumber}, ${2:@string arrayName}, ${3:@integer dim})${4:;}$0"
          	description: "Has the same behavior as the MakeArray function, with the exception that it can be called from an outside block, and doesn't have to  be called from within the block that contains the array.  Note that  the arrayName argument is the name of the array as a string, not the  array name itself. This allows resizing of dynamic arrays passed in to  functions as a string name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SortArray"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SortArray(${1:@array array}, ${2:@integer numRows}, ${3:@integer keyColumn}, ${4:@integer increase}, ${5:@integer sortStringAsNumbers})${6:;}$0"
          	description: "Sorts the array up to numRows. Uses the keyColumn as the sorting  column. If increase is TRUE, sorts in ascending order (note that, for  purposes of sorting, NoValues are considered larger than any number). If this is a string array and  sortStringAsNumbers is TRUE, sorts strings as numbers in keyColumn. This function works with any kind of array, including data  tables and text tables."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetPassedArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetPassedArray(${1:@real realVar}, ${2:@array array})${3:;}$0"
          	description: "Gives access to array values from the input connector or real number  realVar that holds the location of a passed array. array must be  declared in this block as a dynamic array of the same type as the  passed array. After this function is called, array can be used to access  and change the values in the passed array. This function returns  TRUE if realVar is a passed array from another block and returns  FALSE if it is not a passed array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PassArray"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "PassArray(${1:@array array})${2:;}$0"
          	description: "Returns the real value that represents the location of a dynamic array  declared in this block. This is used to pass the array to an output  connector or real variable (such as a global variable). Do not call PassArray to pass an array that has been received by GetPassedArray; see  “Passing arrays” on page 952, for more information."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PointerFromDynamicArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PointerFromDynamicArray(${1:@array dynamicarray})${2:;}$0"
          	description: "Copies data from any type of dynamic array to a new pointer  created by “malloc()” and returns the pointer. If you pass the pointer to an external DLL, the first integer in  the pointer's data is the size of the pointer's data in bytes.  Including the size data, the pointer is actually that size plus 4."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PointerDispose"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PointerDispose(${1:@integer pointer})${2:;}$0"
          	description: "Frees the memory used by the pointer using “free()”. The  pointer is now invalid and can cause a crash if used."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PointerToDynamicArray"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PointerToDynamicArray(${1:@integer pointer}, ${2:@array dynamicarray})${3:;}$0"
          	description: "Takes a pointer created by PointerFromDynamicArray() and  copies it to a dynamic array, so ModL code can access it. This  action writes over any old data in that dynamic array. The  dynamic array must be the same type as the array in the pointer.  The pointer must still be disposed of by PointerDispose()."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DBTabletoGA"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "DBTabletoGA(${1:@integer databaseIndex}, ${2:@integer tableIndex}, ${3:@integer GAIndex})${4:;}$0"
          	description: "Copies data from the specified Database table to the specified Global  Array.  The function makes its best attempt to copy the data over. If  the DB table defines multiple fields in different formats, not all the  data may be copyable."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GABlockRegisterContent"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GABlockRegisterContent(${1:@integer blockNumber}, ${2:@integer GAIndex}, ${3:@integer row}, ${4:@integer col})${5:;}$0"
          	description: "This function is used in conjunction with the Dynamic Linking  functionality in version 7. This function will set up a registration  entry for the specified Global Array, such that whenever there is a  change in the Global Array, the block will receive ContentChanged  messages informing it of the change. This works similarly to the way  a dialog item linked to the Global Array would work, except that by  calling this function you can establish this kind of link through code  without a specific dialog item involved. If you specify the row and  column, then the message will only be sent when the specific cell is  affected by the change. (Specify -1 if you want the entire array.)  See  the GABlockRegisterStructure() function below to register to receive  structure changes."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GABlockRegisterStructure"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GABlockRegisterStructure(${1:@integer blockNumber}, ${2:@integer GAIndex}, ${3:@integer row}, ${4:@integer col})${5:;}$0"
          	description: "This function is similar to the GABlockRegisterContent function,  except that it registers to receive StructureChanged messages when  the structure of the GA changes, not when the content changes."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GABlockUnregisterContent"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GABlockUnregisterContent(${1:@integer blockNumber}, ${2:@integer GAIndex}, ${3:@integer row}, ${4:@integer col})${5:;}$0"
          	description: "Unregisters the specified GA from the Block’s dynamic link registry.   See GABlockRegister above for information about what it means for  a Global Array to be listed in the registry."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GABlockUnregisterStructure"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GABlockUnregisterStructure(${1:@integer blockNumber}, ${2:@integer GAIndex}, ${3:@integer row}, ${4:@integer col})${5:;}$0"
          	description: "Unregisters the specified GA from the Block’s dynamic link registry.   See GABlockRegister above for information about what it means for  a Global Array to be listed in the registry."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAClipboard"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "GAClipboard(${1:@integer arrayIndex})${2:;}$0"
          	description: "Copies the array with the specified index into the clipboard, where it  will be inserted into the selected model with the next paste."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GACopyArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GACopyArray(${1:@integer arrayIndex}, ${2:@string newName})${3:;}$0"
          	description: "Creates a new Global Array that is a duplicate of the array specified  by arrayIndex, with the name newName. The return value of the  function is the arrayindex of the new Global Array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GACreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GACreate(${1:@string name}, ${2:@integer type}, ${3:@integer columns})${4:;}$0"
          	description: "This function creates an array with the specified name, and type.  Arrays are created with zero rows. Returns the index number."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GACreateQuick"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GACreateQuick(${1:@string name}, ${2:@integer type}, ${3:@integer columns})${4:;}$0"
          	description: "This function behaves the same way as the GACreate function, with  the exception that it will not check the name to see if a global array  already exists with that name. The only case where you would want  to use this function is where you are creating a large number of GA’s,  speed is of the essence, and you are sure that there will be no duplication of names. If you do create an array with the same name as an  existing array, referencing that array by name will only access the  older array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GACreateRandom"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GACreateRandom(${1:@integer type}, ${2:@integer columns})${3:;}$0"
          	description: "Creates a Global Array with a random name. Useful for quick creation of global arrays in cases where you need to create many arrays  quickly."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GADataTable"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GADataTable(${1:@integer blockNumber}, ${2:@string dtName}, ${3:@integer arrayIndex})${4:;}$0"
          	description: "Associates a Global Array with a dialog data table in the same way  the DynamicDatatable function associates a dynamic array with one.  See the DynamicDatable() function description for more information."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GADeleteRow"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GADeleteRow(${1:@integer arrayIndex}, ${2:@integer row})${3:;}$0"
          	description: "Deletes a row in the specified Global Array. This will move down the  data on rows after the specified row."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GADispose"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GADispose(${1:@string name})${2:;}$0"
          	description: "Disposes the named Array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GADisposeByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GADisposeByIndex(${1:@integer arrayIndex})${2:;}$0"
          	description: "Disposes the Global Array referenced by arrayIndex."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAExport"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAExport(${1:@string pathName}, ${2:@string userPrompt}, ${3:@string format}, ${4:@integer GAIndex}, ${5:@integer rows}, ${6:@integer columns})${7:;}$0"
          	description: "Exports data from the Global Array specified by GAIndex directly  into a text file. See the Export() function for information about the  other arguments."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAFindStringAny"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAFindStringAny(${1:@integer arrayIndex}, ${2:@string findString}, ${3:@integer column}, ${4:@integer numRows}, ${5:@integer numChars}, ${6:@integer caseSensitivity})${7:;}$0"
          	description: "This function searches a specific string Global Array, referrenced by  arrayIndex, for the first string that matches the findString. The return  value is the index of the array element that contains the first string  found. A -1 will be returned if the string is not found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetArray(${1:@integer arrayIndex}, ${2:@integer row}, ${3:@array y})${4:;}$0"
          	description: "Sets the contents of the array y to the values in the Global Array with  the specified index. This will copy the contents of the specified row  of the Global Array into the array y. (You need to make sure that the  number of elements in the dynamic array match the number of columns in the row of the global array.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetColumns"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetColumns(${1:@string name})${2:;}$0"
          	description: "Returns the number of columns defined for the named array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetColumnsByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetColumnsByIndex(${1:@integer arrayIndex})${2:;}$0"
          	description: "Returns the number of columns defined for the Global Array referrenced by arrayIndex."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetIndex(${1:@string name})${2:;}$0"
          	description: "Returns the Index value of the named array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetInfo(${1:@integer ArrayIndex}, ${2:@integer Which})${3:;}$0"
          	description: "This Global Array function returns the value of some of the Global  Array flags for the specified array. Values for Which are: 0:non saving, 1:initializing."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetInitValue"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GAGetInitValue(${1:@integer arrayIndex})${2:;}$0"
          	description: "Gets the initialization value for the global array. This value is set by  GASetInitValue(), and is used during array initialization."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetInteger"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetInteger(${1:@integer arrayIndex}, ${2:@integer row}, ${3:@integer column})${4:;}$0"
          	description: "Returns the integer value stored at the specific row and column of  the array with the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetLong"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetLong(${1:@integer arrayIndex}, ${2:@integer row}, ${3:@integer column})${4:;}$0"
          	description: "This function is also known as GAGetInteger. See  GAGetInteger for description."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GAGetName(${1:@integer arrayIndex})${2:;}$0"
          	description: "Returns the Name of the array with the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetReal"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GAGetReal(${1:@integer arrayIndex}, ${2:@integer row}, ${3:@integer column})${4:;}$0"
          	description: "Returns the real value stored at the specific row and column of the  array with the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetRows"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetRows(${1:@string name})${2:;}$0"
          	description: "Returns the number of rows defined for the named array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetRowsByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetRowsByIndex(${1:@integer arrayIndex})${2:;}$0"
          	description: "Returns the number of rows defined for the Global Array referrenced  by arrayIndex."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GAGetString(${1:@integer arrayIndex}, ${2:@integer row}, ${3:@integer column})${4:;}$0"
          	description: "Returns the string value stored at the specific row and column of the  array with the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetString15"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GAGetString15(${1:@integer arrayIndex}, ${2:@integer row}, ${3:@integer column})${4:;}$0"
          	description: "Returns the string value stored at the specific row and column of the  array with the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetString31"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GAGetString31(${1:@integer arrayIndex}, ${2:@integer row}, ${3:@integer column})${4:;}$0"
          	description: "Returns the string value stored at the specific row and column of the  array with the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetString63"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GAGetString63(${1:@integer arrayIndex}, ${2:@integer row}, ${3:@integer column})${4:;}$0"
          	description: "Supports the string 63 type, otherwise the same as the GAGetString() function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetType(${1:@string name})${2:;}$0"
          	description: "Returns the type of the named Array. See table above for type values."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAGetTypeByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAGetTypeByIndex(${1:@integer arrayIndex})${2:;}$0"
          	description: "Returns the type of the Global Array referrenced by  arrayIndex."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAImport"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAImport(${1:@string pathName}, ${2:@string userPrompt}, ${3:@string format}, ${4:@integer GAIndex})${5:;}$0"
          	description: "Imports data from a text file directly into the Global Array specified  by GAIndex. See the Import() function for information about the  other arguments."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAInitializing"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAInitializing(${1:@integer ArrayIndex}, ${2:@integer Initializing})${3:;}$0"
          	description: "Sets the initializing flag for the specified global array. The flag determines if the array is automatically initialized during initsim of a  model run or not. The Initializing flag takes the following values: 0:  don't initialize (default), 1: initialize to 0, 2: initialize to blank (real  numbers only.), 3: initialize to specified value. See GASetInitValue(),  below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAInsertRow"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAInsertRow(${1:@integer arrayIndex}, ${2:@integer row})${3:;}$0"
          	description: "Inserts a row in the specified Global Array.  This will cause all the  data on rows after the specified row to be moved up a row."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GALastUsedIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GALastUsedIndex()${1:;}$0"
          	description: "Returns the GAIndex of the last defined Global Array.  This can be  used to loop through all the Global Arrays in a model."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAMultisim"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAMultisim(${1:@integer arrayIndex}, ${2:@integer multisim})${3:;}$0"
          	description: "Sets a flag on the Global Array that determines how the initialization  deals with multiple simulation runs. 0: initialize at beginning of each  run, 1: initialize at beginning of first run of a multiple run only."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GANonSaving"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GANonSaving(${1:@integer arrayIndex}, ${2:@integer nonSavingArray})${3:;}$0"
          	description: "This function flags the specific array as a non saving array. The array  will not be written out to the model file when the file is closed. (By  default Global arrays are “saving” arrays.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAParameter"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAParameter(${1:@integer blockNumber}, ${2:@string StringdialohItemNaùe}, ${3:@integer arrayIndex}, ${4:@integer colIndex}, ${5:@integer rowIndex})${6:;}$0"
          	description: "Link a parameter with a Global Array cell."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAPopupMenu"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAPopupMenu(${1:@integer arrayIndex}, ${2:@string name}, ${3:@integer rows}, ${4:@integer init}, ${5:@integer flying})${6:;}$0"
          	description: "This function copies the strings in the specified Global array into the  named Popup menu. This is a utility that allows quick construction  of a popup menu. The flying argument is true if the menu is being  created “on the fly,” as opposed to adding the array to the existing  menu. See the code that controls the Animation tab of any Item  library block as an example."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAPtr"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAPtr(${1:@integer arrayIndex})${2:;}$0"
          	description: "Returns the memory pointer to the data associated with a particular  global array. (For passing data to dll's only, and it should be called  only immediately before the DLL call, as memory can move, making  the pointer invalid.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAResize"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAResize(${1:@string name}, ${2:@integer rows})${3:;}$0"
          	description: "Changes the number of rows defined for a global array."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAResizeByIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAResizeByIndex(${1:@integer arrayIndex}, ${2:@integer size})${3:;}$0"
          	description: "Changes the number of rows defined for the Global Array referrenced by arrayIndex."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASearch"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASearch(${1:@integer GAIndex}, ${2:@integer lValue}, ${3:@real rValue}, ${4:@string sValue}, ${5:@integer whichCol}, ${6:@integer startIndex})${7:;}$0"
          	description: "Searches a Global array for the occurrence of the specified value and  returns the first index where found. This function can be used to  search any type of Global Array. It will search for the value lValue,  rValue, or sValue, as appropriate, based on the type of the Global  Array and will search in the column specified by the whichCol  parameter. The startIndex parameter specifies which row to begin  searching on.  For second and subsequent searches, just pass the last  value returned by the function plus one as the startIndex parameter.  You should end the search when the function returns a negative 1, as  this will mean that the desired element was not found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASearchCount"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASearchCount(${1:@integer GAIndex}, ${2:@integer lValue}, ${3:@real rValue}, ${4:@string sValue}, ${5:@integer whichCol}, ${6:@integer startIndex})${7:;}$0"
          	description: "Returns the number of occurrences in a Global array of the specified  value.  This function can be used to search any type of Global Array.   It will search for the value lValue, rValue, or sValue, as appropriate,  based on the type of the Global Array and will search in the column  specified by the whichCol parameter.  The startIndex parameter  specifies which row to begin searching on. You should end the search  when the function returns a negative 1, as this will mean that the  desired element was not found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASetArray"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASetArray(${1:@integer arrayIndex}, ${2:@integer row}, ${3:@array y})${4:;}$0"
          	description: "Sets the contents of the Global Array with the specified index to the  values in the array y. This will copy the contents of the array y into  the specified row of the Global Array. (You need to make sure that  the number of elements in the dynamic array match the number of  columns in the row of the global array.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASetInitValue"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASetInitValue(${1:@integer arrayIndex}, ${2:@real value})${3:;}$0"
          	description: "Sets the initialization value for the specified global array. This value  is used during array initialization."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASetInteger"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASetInteger(${1:@integer value}, ${2:@integer arrayIndex}, ${3:@integer row}, ${4:@integer column})${5:;}$0"
          	description: "Sets the integer value at the specific row and column of the array  with the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASetLong"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASetLong(${1:@integer value}, ${2:@integer arrayIndex}, ${3:@integer row}, ${4:@integer column})${5:;}$0"
          	description: "This function is alos known as GASetInteger. See GASetInteger for  description."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASetReal"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASetReal(${1:@real value}, ${2:@integer arrayIndex}, ${3:@integer row}, ${4:@integer column})${5:;}$0"
          	description: "Sets the real value at the specific row and column of the array with  the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASetString"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASetString(${1:@string value}, ${2:@integer arrayIndex}, ${3:@integer row}, ${4:@integer column})${5:;}$0"
          	description: "Sets the string value at the specific row and column of the array with  the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASetstring15"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASetstring15(${1:@string value}, ${2:@integer arrayIndex}, ${3:@integer row}, ${4:@integer column})${5:;}$0"
          	description: "Sets the str15 value at the specific row and column of the array with  the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASetstring31"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASetstring31(${1:@string value}, ${2:@integer arrayIndex}, ${3:@integer row}, ${4:@integer column})${5:;}$0"
          	description: "Sets the str31 value at the specific row and column of the array with  the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASetString63"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASetString63(${1:@string value}, ${2:@integer arrayIndex}, ${3:@integer row}, ${4:@integer column})${5:;}$0"
          	description: "Supports the string 63 type, otherwise the same as the GASetString()  function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GASort"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GASort(${1:@integer arrayIndex}, ${2:@integer numRows}, ${3:@integer keyColumn}, ${4:@integer increase}, ${5:@integer sortstringAsNumbers})${6:;}$0"
          	description: "Sorts the Array with the specified index. Sorts the array up to numRows. Uses the keyColumn as the sorting column. If increase is  TRUE, sorts in ascending order (note that, for purposes of sorting,  NoValues are considered larger than any number). If this is a string  array and sortStringAsNumbers is TRUE, sorts strings as numbers in  keyColumn."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GAtoDBTable"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GAtoDBTable(${1:@integer GAIndex}, ${2:@integer databaseIndex}, ${3:@integer tableIndex})${4:;}$0"
          	description: "Copies data from the specified GA to the specified Database table.   The function makes its best attempt to copy the data over.  If the DB  table defines multiple fields in different formats, not all the data may  be copyable."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListAddElement"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListAddElement(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer where})${4:;}$0"
          	description: "Adds an element previously created with ListCreateElement to the  specified queue. where:-2 sorted by preset sortType and field index value where:-1 the front of the list Otherwise, where is an index value and the item will be added after  the specified index item. Returns zero for success."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListAddString63s"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListAddString63s(${1:@integer blockN}, ${2:@integer listIndex}, ${3:@integer string63Count})${4:;}$0"
          	description: "This function should be called right after ListCreate, if you wish  your linked list to contain String63s.  It has the same effect as specifying, for example, n String15s in the ListCreate function, it defines  the number of string63s that will be present in each element of the  Linked List."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListCopyElement"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListCopyElement(${1:@integer blockN}, ${2:@integer listIndex}, ${3:@integer fromIndex}, ${4:@integer targetBlockN}, ${5:@integer targetListIndex}, ${6:@integer targetIndex})${7:;}$0"
          	description: "Copies an element from one linked list to another. The first three  parameters specify the element in the first list, the next two specify  the target list, and the last one specifies where in the new list to copy  the element. As with any linked list function that adds an element,  you can specify a -2 to mean that the new element should be added  in its sorted order."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListCreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListCreate(${1:@integer blockNumber}, ${2:@integer longCount}, ${3:@integer realCount}, ${4:@integer str15Count}, ${5:@integer str31Count}, ${6:@integer strCount}, ${7:@integer sortType}, ${8:@integer fieldIndex})${9:;}$0"
          	description: "Creates a new list with the specified attributes. LongCount, realCount, etc are counts of the number of fields of each of the specified  types each list element contains. SortType and fieldIndex determine  which field is to be used as the sorting field for the list. sortType:0 don’t sort sortType:1 real field is key sortType:2 integer field is key sortType:3 str255 field is key sortType:4 str15 field is key sortType:5 str31 field is key FieldIndex is used to determine which index of the specified type is  the key field. Zero is the first field."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListCreateElement"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListCreateElement(${1:@integer blockNumber}, ${2:@integer listIndex})${3:;}$0"
          	description: "Creates a new empty element for a list. The normal sequence is  ListCreateElement(…); // creates a new empty element ListSetxxx(…); // sets a field in the element ListSetxxx(…); // sets another field in the element … // set the rest of the fields in the element ListAddElement(…); // adds the new element to the list."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListDeleteElement"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListDeleteElement(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer indexToDelete})${4:;}$0"
          	description: "Deletes the specified element. Zero is the first element."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListDispose"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListDispose(${1:@integer blockNumber}, ${2:@integer listIndex})${3:;}$0"
          	description: "Disposes of the specified list and recovers its memory."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListDisposeAll"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListDisposeAll(${1:@integer blockNumber})${2:;}$0"
          	description: "Disposes all linked lists in a block. Returns TRUE if the block  doesn’t exist or the lists have already been disposed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListElementMinMax"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListElementMinMax(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer compareType}, ${4:@integer compareIndex}, ${5:@integer max})${6:;}$0"
          	description: "This function searches the list for the maximum or minimum value  of the specified value.  If the Max flag is true, it will return the index  of the element that contains the maximum value of that entry, otherwise it will return the minimum. (Currently just integer and real are  implemented.  string comparisons are not yet implemented.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListGetCount"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListGetCount(${1:@integer blockN})${2:;}$0"
          	description: "Returns the count of the number of linked lists the block has  defined.  Please note that in a similar way to the way GetNumBlocks  works for the model worksheet, the number returned by this function can contain 'empty slots'. An 'empty slot' is defined as a list  index that specifies a list that has been disposed, or is otherwise not  defined.  This function can be used to execute a loop that looks at all  the linked lists in a block, but you should check each list to confirm  that it exists.  Because of this aspect of how this functions, you  should not call ListGetCount, and assume that the returned value is  exactly the number of lists the block supports."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListGetDouble"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "ListGetDouble(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer elementIndex}, ${4:@integer fieldIndex})${5:;}$0"
          	description: "Returns the real (double) value at that element and field index. If  elementIndex is passed in as a value less than zero, it refers to the  current newly created, but not yet added, item. If  elementIndex is zero or greater it is used as an index value into the  specified list."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListGetElements"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListGetElements(${1:@integer blockNumber}, ${2:@integer listIndex})${3:;}$0"
          	description: "Returns the number of elements in the specified list."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListGetIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListGetIndex(${1:@integer blockN}, ${2:@string name})${3:;}$0"
          	description: "Gets the index of a linked list by its name.  Linked lists do not automatically have names.  If the name specified is not found, the function will return a negative value as an error code."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListGetInfo"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListGetInfo(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer infoType})${4:;}$0"
          	description: "Returns the specified info about the specified Linked List. InfoType  takes the following values: 1: returns the number of real values in the specified list 2: returns the number of integer values in the specified list 3: returns the number of string values in the specified list 4: returns the number of string15 values in the specified list 5: returns the number of string31 values in the specified list 6: returns the number of string63 values in the specified list 10: returns TRUE if this list exists, FALSE if it doesn’t."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListGetLong"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListGetLong(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer elementIndex}, ${4:@integer fieldIndex})${5:;}$0"
          	description: "Returns the integer (integer) value at that element and field index. If  elementIndex is passed in as a value less than zero, it refers to the  current newly created, but not yet added, item. If elementIndex is  zero or greater it is used as an index value into the specified list."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListGetName"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "ListGetName(${1:@integer blockN}, ${2:@integer listIndex})${3:;}$0"
          	description: "Returns the name of the linked list.  List names are new in version 7.   Lists do not have a name by default, and will not have a name, until  one has been set with the ListSetName function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListGetString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "ListGetString(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer elementIndex}, ${4:@integer stringType}, ${5:@integer fieldIndex})${6:;}$0"
          	description: "Returns the string value at that element and field index. If elementIndex is passed in as a value less than zero, it refers to the current newly created, but not yet added, item. If  elementIndex is zero or greater it is used as an index value into the  specified list. StringType takes the following values: 3: string (str255) field 4: str15 field 5: str31 field."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListLastElementIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListLastElementIndex(${1:@integer blockN}, ${2:@integer listIndex})${3:;}$0"
          	description: "Return the index value of the last item added to the specified list (not the end of the list, the last item actually added)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListLocked"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListLocked(${1:@integer blockN}, ${2:@integer listIndex}, ${3:@integer locked})${4:;}$0"
          	description: "If Locked is true, this function call marks the specified Linked List as  locked.  This has the effect of making that List not be disposed if  ListDisposeAll is called.  If the function ListDispose is called explicitly on this list, it will still be disposed, this function only prevents  accidental disposal of the list through the ListDisposeAll call.  Returns a zero of the call succeeds.  Returns a negative error code  value if the function fails."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSearch"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListSearch(${1:@integer blockN}, ${2:@integer listIndex}, ${3:@integer searchType}, ${4:@integer searchIndex}, ${5:@integer lVal}, ${6:@real rVal}, ${7:@string sVal}, ${8:@integer startIndex})${9:;}$0"
          	description: "Searches the list for the specified value.  Search type determines  which type to search for, and also which value string is used. StartIndex specifies where in the list to start searching.  This function  returns the index number of the first list element that matches the  search criteria.  If you want to search for multiple elements in the  same list, just call the function multiple times, using the last index  found plus one as the ‘startIndex’ parameter of the next search.  You  should end the search when the function returns a negative 1, as this  will mean that the desired element was not found."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSearchCount"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListSearchCount(${1:@integer blockN}, ${2:@integer listIndex}, ${3:@integer searchType}, ${4:@integer searchIndex}, ${5:@integer lVal}, ${6:@real rVal}, ${7:@string sVal}, ${8:@integer startIndex})${9:;}$0"
          	description: "Similar to the ListSearch function, except that this function returns  the number of occurrences of the specified value in the list."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSearchCountLongs"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListSearchCountLongs(${1:@integer blockN}, ${2:@integer listIndex}, ${3:@integerArray y}, ${4:@integer startIndex})${5:;}$0"
          	description: "Functions similarly to the ListSearchCount function, except that the  integer Array Y argument is similar to the ListSearchLongs function,  below.  (I.e. this function will count the  number of elements in the  list that contain matches for all the integer elements in the integer  Array.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSearchLongs"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListSearchLongs(${1:@integer blockN}, ${2:@integer listIndex}, ${3:@integerArray y}, ${4:@integer startIndex})${5:;}$0"
          	description: "Similar to the ListSearch function, except that the type to be  searched for is longs, and the function will search for more than one  integer at a time within a single element of the list.  The integer  Array Y argument is a two column array by any number of rows  long. These longs are in pair of index followed by search value. This  allows you to search a linked list for more than one integer condition  at a time. The search will match only list elements where all the  longs in the array match."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSetDouble"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListSetDouble(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer elementIndex}, ${4:@integer fieldIndex}, ${5:@real value})${6:;}$0"
          	description: "Sets the real (double) value at that element and field index. If elementIndex is passed in as a value less than zero, it refers to the current newly created, but not yet added, item.  If elementIndex is zero or greater it is used as an index value into the  specified list."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSetLong"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListSetLong(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer elementIndex}, ${4:@integer longIndex}, ${5:@integer value})${6:;}$0"
          	description: "Sets the integer (long) value at that element and field index. If elementIndex is passed in as a value less than zero, it refers to the current newly created, but not yet added, item. If elementIndex is zero  or greater it is used as an index value into the specified list."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSetName"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListSetName(${1:@integer blockN}, ${2:@integer listIndex}, ${3:@string name})${4:;}$0"
          	description: "Sets the name of the specified linked list to the name defined by the  ‘name’ parameter."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSetSort"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListSetSort(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer sortType}, ${4:@integer fieldIndex})${5:;}$0"
          	description: "ListSetSort allows you to change the sort criteria for the list.  SortType and fieldIndex are defined as described above in the ListCreate  function. The list will be resorted by this call."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSetSort2"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ListSetSort2(${1:@integer blockN}, ${2:@integer listIndex}, ${3:@integer sortType}, ${4:@integer sortIndex}, ${5:@integer sortType2}, ${6:@integer sortIndex2}, ${7:@integer sortType3}, ${8:@integer sortIndex3})${9:;}$0"
          	description: "Sets the sorting criteria for the specified list.  This function enhances  the existing ListSetSort() function in that there are now multiple  sorting criteria.  I.e. there is a secondary, and tertiary sort."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ListSetString"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ListSetString(${1:@integer blockNumber}, ${2:@integer listIndex}, ${3:@integer elementIndex}, ${4:@integer stringType}, ${5:@integer stringIndex}, ${6:@string newString})${7:;}$0"
          	description: "Sets the string newString at that element and field index. If elementIndex is passed in as a value less than zero, it refers to the current newly created, but not yet added, item.  If elementIndex is zero or greater it is used as an index value into the  specified list. StringType takes the following values: 3: string (str255) field 4: str15 field 5: str31 field."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLClear"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLClear(${1:@string slName})${2:;}$0"
          	description: "Clears the specified lookup of all strings, and sets it to not be a string  lookup, until SLSet is called on it again."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLCreate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLCreate(${1:@string slName})${2:;}$0"
          	description: "Creates a string lookup table with the specified name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLDelete"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLDelete(${1:@string slName})${2:;}$0"
          	description: "Deletes a string lookup table with the specified name."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLFlagGet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLFlagGet(${1:@string slName}, ${2:@integer which})${3:;}$0"
          	description: "Returns one of the twenty user defined flag values for the specified  string lookup.   Each string lookup has twenty flags associated with  it.  ‘Which’ should take a value from 0 to 19."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLFlagRealGet"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "SLFlagRealGet(${1:@string slName}, ${2:@integer which})${3:;}$0"
          	description: "Returns one of the twenty real user defined flag values for the specified string lookup.   Each string lookup has twenty real flags associated with it.  ‘Which’ should take a value from 0 to 19."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLFlagRealSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLFlagRealSet(${1:@string slName}, ${2:@integer which}, ${3:@integer tableAttribute})${4:;}$0"
          	description: "Sets one of the twenty real user defined flag values for the specified  string lookup.   Each string lookup has twenty real flags associated  with it. ‘Which’ should take a value from 0 to 19."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLFlagSet"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLFlagSet(${1:@string slName}, ${2:@integer which}, ${3:@integer tableAttribute})${4:;}$0"
          	description: "Sets one of the twenty user defined flag values for the specified string  lookup.   Each string lookup has twenty flags associated with it.   ‘Which’ should take a value from 0 to 19.  Note that these flags are  stored internally as a single byte of data, which means that you can  only store values from zero to 127 in the flag.  This is normally  intended to store Boolean (True/False) values, but you can store values up to 127 if you wish. (Negative values will not be stored.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLGetCount"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLGetCount()${1:;}$0"
          	description: "Returns the count of the number of string Lookups defined in a  model."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLGetCountStrings"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLGetCountStrings(${1:@string slName})${2:;}$0"
          	description: "Returns the count of the number of strings that are associated with  the specified lookup."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLIs"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLIs(${1:@string slName})${2:;}$0"
          	description: "Returns a true value if the specified name is a string lookup."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLPopupMenu"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLPopupMenu(${1:@string slName}, ${2:@string dialogItem}, ${3:@integer init}, ${4:@integer flying})${5:;}$0"
          	description: "Either fills a popup menu with the lookup string values, or creates a  flying popup menu at the location of the last click, based on whether  or not the flying flag is set."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLSort"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLSort(${1:@string slName})${2:;}$0"
          	description: "Sorts the strings for the specified lookup alphabetically."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLStringAppend"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLStringAppend(${1:@string slName}, ${2:@string stringVal})${3:;}$0"
          	description: "Sets a string value for the specified lookup.  By default the first string  will have value one, the second one value two, and so on.  This can  be revised by changing the order of the list by either calling SLSort,  to sort the list alphabetically, or calling SLRemove to remove a string  from the list.  The first time this function is called, It will create a  string lookup table with the name slName if that string lookup table  does not already exist.   This is an alternative to calling SLCreate."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLStringGet"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "SLStringGet(${1:@string slName}, ${2:@integer index})${3:;}$0"
          	description: "Returns the string value of the specified index on a string lookup."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLStringGetIndex"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLStringGetIndex(${1:@string slName}, ${2:@string string})${3:;}$0"
          	description: "This function is the inverse of the SLStringGet, it returns the index  value of a string on a string lookup."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLStringInsert"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLStringInsert(${1:@string slName}, ${2:@string stringVal}, ${3:@integer index})${4:;}$0"
          	description: "Inserts the specified string at the specified index."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SLStringRemove"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SLStringRemove(${1:@string slName}, ${2:@string string})${3:;}$0"
          	description: "Removes the specified string from the list of strings associated with  the specified lookup."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetFront"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetFront(${1:@real array[]})${2:;}$0"
          	description: "Removes and returns item 0 from the front of the queue. If the  queue is empty, NoValue is returned."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetRear"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetRear(${1:@real array[]})${2:;}$0"
          	description: "Removes and returns item n-1 from the rear of the queue. If the  queue is empty, NoValue is returned."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PutFront"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PutFront(${1:@real array[]}, ${2:@real x})${3:;}$0"
          	description: "Adds x to the front of the queue."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PutRear"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PutRear(${1:@real array[]}, ${2:@real x})${3:;}$0"
          	description: "Adds x to the rear of the queue."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "QueGetN"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "QueGetN(${1:@real array[]}, ${2:@integer i})${3:;}$0"
          	description: "Removes and returns the ith member of a queue. If the ith member  does not exist, noValue is returned. This compacts the queue after  the ith member is removed so that the i+1st member becomes the  new ith member."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "QueInit"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "QueInit(${1:@real array[]})${2:;}$0"
          	description: "Allocates and initializes the array for the queuing functions. Call this  procedure in the InitSim message handler for each queue."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "QueLength"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "QueLength(${1:@real array[]})${2:;}$0"
          	description: "Length of the queue. If the queue is empty, the function returns 0."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "QueSetAlloc"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "QueSetAlloc(${1:@integer alloc}, ${2:@integer realloc})${3:;}$0"
          	description: "Specifies the allocation and reallocation constants for the queueing  functions.  This function allows the user to control how much memory is allocated by the queueing functions to initially allocate memory for item storage, and how much additional to add each time they  need to be resized bigger.  The default values are 200 for alloc, and  500 for realloc."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "QueLookN"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "QueLookN(${1:@real array[]}, ${2:@integer i})${3:;}$0"
          	description: "Value of the ith member of a queue without changing the queue  order. If the ith member does not exist, noValue is returned."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "QueSetN"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "QueSetN(${1:@real array[]}, ${2:@integer i}, ${3:@real x})${4:;}$0"
          	description: "Sets the value of the ith member of a queue to x without changing  the queue order. If i is greater than the length of the queue, an error  message informs you and aborts the operation."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Delay"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "Delay(${1:@real array[]}, ${2:@real x})${3:;}$0"
          	description: "Inserts a new value x, and returns a delayed value from a delay line.  The returned value will be the value inserted DelayTime ago."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DelayInit"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DelayInit(${1:@real array[]}, ${2:@real DelayTime})${3:;}$0"
          	description: "Initializes a dynamic array delay line to DelayTime. Call this procedure in the InitSim message handler for each delay line."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ArrayLabelParse"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "ArrayLabelParse(${1:@integer item}, ${2:@string array})${3:;}$0"
          	description: "Parses an array of semicolon delimited strings and treats it as a single  long string so you can get the nth label. This is the same parsing that  ExtendSim does internally with both the data table labels, and the  popup menu strings."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FormatString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "FormatString(${1:@integer numArgs}, ${2:@string formatString}, ${3:@string value1}, ${4:@string value2}, ${5:@string value3}, ${6:@string value4}, ${7:@string value5}, ${8:@string value6}, ${9:@string value7}, ${10:@string value8})${11:;}$0"
          	description: "This function creates formatted strings using string value arguments.  The formatString argument is used to define the format of the  returned output string. The definition of the format string is based  on the C function sprintf. Please refer to a standard C reference for  more information on how to define the format string. NumArgs  defines the number of value arguments that contain meaningful values."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FormatStringReal"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "FormatStringReal(${1:@integer numArgs}, ${2:@string formatString}, ${3:@real value1}, ${4:@real value2}, ${5:@real value3}, ${6:@real value4}, ${7:@real value5}, ${8:@real value6}, ${9:@real value7}, ${10:@real value8})${11:;}$0"
          	description: "This function creates formatted strings using real value arguments.  The formatString argument is used to define the format of the  returned output string. The definition of the format string is based  on the C function sprintf. Please refer to a standard C reference for  more information on how to define the format string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "NumToFormat"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "NumToFormat(${1:@real x}, ${2:@integer maxchar}, ${3:@integer sigFigs}, ${4:@integer format})${5:;}$0"
          	description: "Returns the number formatted as a string. X is the input number,  maxchar is the maximum number of characters in the returned  string, sigFigs is the number of significant figures desired. Format is 0  for general, 1 for currency, 2 for integer, 3 for scientific notation. NOTE: if -1 is used for maxchar, format is ignored and no scientific  notation is used even if the value is very small or large. This special  output format is needed to be compatible with Proof Animation."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RandomString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "RandomString(${1:@integer n})${2:;}$0"
          	description: "Returns a randomly generated string of n upper case alphabetic characters."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RealToStr"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "RealToStr(${1:@real value}, ${2:@integer sigFigs})${3:;}$0"
          	description: "Converts the value, rounded to sigFigs significant figures, to a string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RealToStrShortest"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "RealToStrShortest(${1:@real value}, ${2:@integer sigFigs}, ${3:@integer alwaysPadZeroes})${4:;}$0"
          	description: "Converts a double or real variable to a string value, like the RealToStr function.  The alwaysPadZeros argument specifies if you want  the zero trimming behavior.  What this does is to remove any trailing  zeros that may have appeared in the string from the sigfigs being  higher than the number of actual digits in the resulting value.  If you  call this function with alwaysPadZeros TRUE, it will behave exactly  the same as RealToString."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrFind"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "StrFind(${1:@string s}, ${2:@string findString}, ${3:@integer caseSens}, ${4:@integer diacSens})${5:;}$0"
          	description: "Character position of findString within string s. The first position of  a string is 0, so if the findString is not found, StrFind returns -1. If  caseSens is TRUE, case is considered in the search. If diacSens is  TRUE, diacritical marks are considered in the search."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrGetAscii"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "StrGetAscii(${1:@string s})${2:;}$0"
          	description: "First character of s as an integer value corresponding to the ASCII  value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StringCase"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "StringCase(${1:@string str}, ${2:@integer lowerCase})${3:;}$0"
          	description: "Returns str converted to lower case if lowerCase is TRUE, upper case  if lowerCase is FALSE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StringCompare"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "StringCompare(${1:@string s1}, ${2:@string s2}, ${3:@integer caseSens}, ${4:@integer diacritical})${5:;}$0"
          	description: "Returns -1 if s1 < s2, 0 if s1 == s2, 1 if s1 > s2. If caseSens is TRUE,  uses case. If diacritical is TRUE, uses diacritical marks (ä, é, ö, etc.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StringTrim"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "StringTrim(${1:@string input}, ${2:@integer which})${3:;}$0"
          	description: "This function trims leading and trailing blank spaces off the input  string. Spaces, CR, LF, *and TAB characters will be trimmed. The  resulting string is returned. The argument, “which,” takes the following values: 0-both leading and trailing blanks trimmed. 1-leading blanks trimmed. 2-trailing blanks trimmed."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrLen"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "StrLen(${1:@string s})${2:;}$0"
          	description: "Number of characters in the string s."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrPart"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "StrPart(${1:@string s}, ${2:@integer start}, ${3:@integer i})${4:;}$0"
          	description: "Substring of string s, starting at character position start, i characters  long. Note that string length is 255 character maximum."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrPutAscii"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "StrPutAscii(${1:@integer i})${2:;}$0"
          	description: "String of length 1 corresponding to the ASCII value of i. This is useful for putting non-printing control characters into a string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrReplace"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "StrReplace(${1:@string s}, ${2:@integer start}, ${3:@integer i}, ${4:@string replaceString})${5:;}$0"
          	description: "The substring of string s starting at start of length i is replaced with  replaceString."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrToReal"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "StrToReal(${1:@string s})${2:;}$0"
          	description: "Real value converted from string s, ending with the first space or letter found that is not part of the number. If s does not represent a  number, the function returns a NoValue."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "TextWidth"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "TextWidth(${1:@string theString}, ${2:@integer font}, ${3:@integer face}, ${4:@integer size})${5:;}$0"
          	description: "This function returns the width the specified string would draw at in  pixels. If font, face, and size are all zero the function will use the  default values for the animation text functions."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StrPartDynamic"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "StrPartDynamic(${1:@stringArray stringArray}, ${2:@integer start}, ${3:@integer numChars})${4:;}$0"
          	description: "Same as the strPart function, on a dynamicText dialog item.  See  “Dynamic text items” on page 1158."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetAttributeValue"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetAttributeValue(${1:@string attrString}, ${2:@string attrName})${3:;}$0"
          	description: "Returns the value of the attribute attrName or NoValue if attrName  isn’t found. If you pass in a blank (empty) string for the attrName  variable, function returns the value of the first attribute in the attribute string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "RemoveAttribute"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "RemoveAttribute(${1:@string attrString}, ${2:@string attrName})${3:;}$0"
          	description: "Returns the attribute string after removing attribute attrName."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetAttribute"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "SetAttribute(${1:@string attrString}, ${2:@string attrName}, ${3:@real value})${4:;}$0"
          	description: "Adds attrName and value or, if it already exists, changes the  attrName to value. Returns the attribute string after adding or  changing the attribute value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConvertTimeUnits"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "ConvertTimeUnits(${1:@real value}, ${2:@integer fromType}, ${3:@integer toType})${4:;}$0"
          	description: "Converts a value from one type of time unit to another."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetTimeUnits"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetTimeUnits()${1:;}$0"
          	description: "Returns the currently selected Time Units from the Simulation  Setup dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetTimeConstants"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SetTimeConstants(${1:@real hInADay}, ${2:@real dInAWeek}, ${3:@real dInAMonth}, ${4:@real dInAYear})${5:;}$0"
          	description: "Sets the time unit conversion values. These are specified in the Simulation Setup dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SetTimeUnits"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "SetTimeUnits(${1:@integer value})${2:;}$0"
          	description: "Sets the Time Unit parameter in the Simulation Setup dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDCalcDate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EDCalcDate(${1:@integer year}, ${2:@integer month}, ${3:@integer day}, ${4:@integer hour}, ${5:@integer minute}, ${6:@integer second})${7:;}$0"
          	description: "Construct a date value from its individual components."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDCalendarDateGet"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EDCalendarDateGet(${1:@real startDate})${2:;}$0"
          	description: "Opens the calendar input dialog for the user to input a date value  and returns that date value. The input dialog will show the value of  the parameter startDate as a starting point."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDCalendarDates"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EDCalendarDates()${1:;}$0"
          	description: "Returns the value of the CalendarDates checkbox in the simulation  setup dialog box: FALSE is unchecked, TRUE is checked."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDCalendarShow"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EDCalendarShow(${1:@integer true/false})${2:;}$0"
          	description: "This function opens or closes the calendar window."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDConvertDate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EDConvertDate(${1:@integer value}, ${2:@integer fromType}, ${3:@real startDate})${4:;}$0"
          	description: "Modifies a date value by adding additional time.  The additional  time added to the date value will be in the value parameter, and what  time units it is in will be in the fromType parameter. Note that this  function returns a date value, not a number of time units."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDDateToSimTime"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EDDateToSimTime(${1:@real currentDate}, ${2:@integer timeUnits})${3:;}$0"
          	description: "Converts from a date value to a simulation time value (e.g. a possible  value of currentTime). Putting in a zero for the timeUnits argument  will make the function use the currently specified model time units. (see Time Units)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDDateToString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "EDDateToString(${1:@real dateValue}, ${2:@integer format})${3:;}$0"
          	description: "Converts an ExtendSim date value to a string according to format:  0 : date and time, 1 : Just date (Ignore Time), 2 : Just Time (Ignore  Date), 3 : tight format (two digit year, don’t show time value if zero.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDDateValue"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EDDateValue(${1:@real value}, ${2:@integer which})${3:;}$0"
          	description: "Gets one part of a date value. Which is the time unit value (see  “Time units” on page 1226, above). NOTE: Week information is  not available in this function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDDayOfTheWeek"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "EDDayOfTheWeek(${1:@real currentDate})${2:;}$0"
          	description: "Converts from an ExtendSim Date value to an integer value representing the day of the week.  Returns a zero for Sunday."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDGetCurrentDate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EDGetCurrentDate()${1:;}$0"
          	description: "Returns the current date equivalent for the CurrentTime simulation  variable during a simulation run."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDGetStartDate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EDGetStartDate()${1:;}$0"
          	description: "Returns the date value of start time in the Simulation Setup Dialog."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDNow"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EDNow()${1:;}$0"
          	description: "Returns the real time current date and time like the Now() function,  but as an ExtendSim date."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDSimTimeToDate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EDSimTimeToDate(${1:@real simTime}, ${2:@integer timeUnits})${3:;}$0"
          	description: "Converts a simulation time value to a date value.  A simTime value is  a time number in simulation time format. Putting in a zero for the  timeUnits argument will make the function use the current model  time units. For example in most models, the simTime value for startTime is zero.  Calling with a zero value of simTime will return the  ExtendSim Date value for the StartDate value of the model."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "EDStringToDate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "EDStringToDate(${1:@string dateString})${2:;}$0"
          	description: "Parses a string to retrieve an ExtendSim Date value."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CalcDate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "CalcDate(${1:@integer year}, ${2:@integer month}, ${3:@integer day}, ${4:@integer hour}, ${5:@integer minute}, ${6:@integer second})${7:;}$0"
          	description: "Returns the numeric time value for the specified information. The  arguments are all integers. The year argument is entered as the entire  year (e.g. 1993) where years range from 1904 to 2040; months are  entered from 1 to 12 (4 for April); days are 1-31; hours are based on  the 24-hour clock and go from 0 to 23 (2 in the afternoon would be  14); minutes and seconds are 0-59. For example, February 1, 1994 at  2:00 PM would be (1994, 2, 1, 14, 0, 0)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DateToString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DateToString(${1:@integer i})${2:;}$0"
          	description: "String containing the date in the localized date format (usually MM/ DD/YY) corresponding to integer i."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DiffDate"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "DiffDate(${1:@integer firstDate}, ${2:@integer secondDate})${3:;}$0"
          	description: "Returns the difference between two date values as a real number  which represents the number of days between the two dates."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetBlockDates"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetBlockDates(${1:@integer blockNumber}, ${2:@integer whereFrom}, ${3:@integer whichDate})${4:;}$0"
          	description: "Returns the modified and created dates of the block. The whereFrom  argument takes a zero for the block or a one for the library. The  whichDate argument takes a zero for created or a one for modified.  Use the dateToString & timeToString functions to get the string values of the date & time."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ModifyDate"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ModifyDate(${1:@integer oldDate}, ${2:@real dateModifier})${3:;}$0"
          	description: "Returns the old date value plus the date modifier value. The oldDate  value is an ExtendSim integer date value, similar to that returned  from the GetBlockDates function, and the dateModifier value is a  real number representing a number of days."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Now"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "Now()${1:;}$0"
          	description: "Number of the current date and time"
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "TimeToString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "TimeToString(${1:@integer timeVal})${2:;}$0"
          	description: "String containing the time in the localized time format (usually  Hour:Minute:Second) corresponding to integer timeVal."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "WaitNTicks"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "WaitNTicks(${1:@integer numTicks})${2:;}$0"
          	description: "Waits for the number of ticks (60ths of a second) before returning.  This is useful for slowing simulations down and for synchronizing  communication protocols with real time."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PrecisionTimer"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "PrecisionTimer()${1:;}$0"
          	description: "Returns the current timer count of the highest resolution timer  found on the system. Used in conjunction with PrecisionTimerScale(), below."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PrecisionTimerScale"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "PrecisionTimerScale()${1:;}$0"
          	description: "Returns the numbers of counts per second of the timer made available in the PrecisionTimer function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StartTimer"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "StartTimer(${1:@integer blockNumber}, ${2:@integer waitTicks})${3:;}$0"
          	description: "Starts a timer chore that will periodically send messages to either the  specified block, or every block in the active model if the blockNumber is zero. This chore is performed when the CPU is idle, so you  cannot count on it happening exactly every period, unless the CPU  is idle. (e.g. other user/program actions will potentially interrupt the  execution of the chore.) If the CPU is idle, the chore will be performed every waitTicks time intervals. Ticks are 60ths of a second,  so if you enter 60 the chore will attempt to send out its message  every second.  The message sent is TIMERTICK. See the Breakout.mox model for an example of timer events."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StartTimerID"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "StartTimerID(${1:@integer blockNumber}, ${2:@integer waitTicks}, ${3:@integer index})${4:;}$0"
          	description: "Starts a timer with an ID tag, which can range from 0 to 199.  As  with the StartTimer() function, blockNumber specifies which block  should receive the TIMERTICK message, and waitTicks specifies  how often it should be sent."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "Stoptimer"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "Stoptimer()${1:;}$0"
          	description: "This procedure stops the idle timer chore started by startTimer  above."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "StopTimerID"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "StopTimerID(${1:@integer index})${2:;}$0"
          	description: "Stops a timer with an ID tag, which can range from 0 to 199."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "TickCount"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "TickCount()${1:;}$0"
          	description: "Clock count (in 60ths of a second) since the computer was powered  up. This is useful for timing operations."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "TimerID"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "TimerID()${1:;}$0"
          	description: "This function is to be used in the TimerTick message handler to find  which timer is responsible for triggering the message. Returns the ID  number of the timer that is currently activating the message."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AbortAllSims"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AbortAllSims()${1:;}$0"
          	description: "Aborts the simulation and all multiple simulations. Note that the  Abort statement only aborts the current simulation."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AbortAllSimsSilent"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "AbortAllSimsSilent()${1:;}$0"
          	description: "Aborts a multiSim run without an error message."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "AbortSilent"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "AbortSilent()${1:;}$0"
          	description: "Aborts the simulation run without giving any error messages."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DebuggerBreakpoint"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DebuggerBreakpoint(${1:@integer trueFalse})${2:;}$0"
          	description: "If called with a true value will act as if a source debugger breakpoint  has been set at the line of code where the function is called. This  function is useful in debugging the CreatBlock message and in putting a global breakpoint for all blocks of a type."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DebugMsg"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DebugMsg(${1:@string errorString})${2:;}$0"
          	description: "Operates like the UserError function. The difference is that this  function flags the block as having debugging code – the next time a  library is opened that contains any blocks having this function,  ExtendSim will issue a warning message. This function automatically displays the simulation time and the block number of the block  from which the function was called."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DebugWrite"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "DebugWrite(${1:@integer fileNum}, ${2:@string errorString}, ${3:@string delimStr}, ${4:@integer tabCR})${5:;}$0"
          	description: "Operates like the FileWrite function. The difference is that this function flags the block as having debugging code – the next time a  library is opened that contains any blocks having this function,  ExtendSim will issue a warning message."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "FreeMemory"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "FreeMemory(${1:@integer memoryType})${2:;}$0"
          	description: "Returns the amount of memory available to ExtendSim. The memoryType argument determines what type of memory will be checked.  Windows: 1 - Total memory 2 - Resources (only for Windows 3.1 and Windows 95) Mac OS: 1 - Total memory 2 - Contiguous memory."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "PauseSim"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "PauseSim()${1:;}$0"
          	description: "Pauses the simulation until you choose Run > Resume or click the  Resume button."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ProfileBlockGet"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "ProfileBlockGet(${1:@integer blockNumber})${2:;}$0"
          	description: "Returns the block profile results for the specified block. This will  only return a meaningful number if the command Profile Block  Code is selected. Can be called in finalCalc to get the total profile  results for that block or during the simulation to get partial results."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SelectBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SelectBlock(${1:@integer trueFalse})${2:;}$0"
          	description: "Selects the block and scrolls to it if the argument is TRUE, unselects  it if the argument is FALSE."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "SelectBlock2"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "SelectBlock2(${1:@integer block}, ${2:@integer trueFalse})${3:;}$0"
          	description: "This is same as SelectBlock(), except it refers to a global block number."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "TraceModeEnableDisable"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "TraceModeEnableDisable(${1:@integer enableIfTRUE})${2:;}$0"
          	description: "Call to enable or disable the current trace when desired. Trace mode  must be on for this function to work. It returns zero if no error and 1 if trace mode is not on."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "CallHelp"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "CallHelp(${1:@string fileName}, ${2:@integer command}, ${3:@integer data}, ${4:@integer fileType})${5:;}$0"
          	description: "Used to load a WinHelp file, an HTML Help file, or a pdf file.(For the WinHelp and HTMLHelp Windows API calls, see the  Microsoft documentation for more information.) The fileType flag takes the following values: 0: Calls the WinHelp function (Windows only. Opens compiled  Help files. Typically have an extension of .hlp.) 1: Calls HTMLHelp. (Opens compiled Html help files. Typically  have an extension of .chm.) 2: Opens a file with a .pdf extension. This function is used to bypass the standard ExtendSim Help system  via the following code in the “on helpbutton” message handler: On helpbutton { CallHelp('C:\helpfile.chm', 1,1,1); Abort; }"
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "OpenURL"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "OpenURL(${1:@string theURL})${2:;}$0"
          	description: "Access the specified URL using your computer’s default browser.  Returns non-zero error code if it fails."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ShowBlockHelp"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ShowBlockHelp(${1:@integer block})${2:;}$0"
          	description: "Opens the Help dialog, showing the online Help for any global  block. For example, use the function GetEnclosingHBlockNum to  get the global block number of an enclosing hierarchical block to  show its Help under ModL code control."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ShowHelp"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ShowHelp()${1:;}$0"
          	description: "Opens the Help dialog, showing the online Help for the block."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetCurrentPlatform"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetCurrentPlatform()${1:;}$0"
          	description: "Determines the operating system under which ExtendSim is currently running. This function returns 0 for 68K Mac OS, 1 for  Power Mac OS or Mac OSX, 2 for Windows 3.1/Win32s, 3 for  Windows NT or XP, and 4 for Windows 95, 98, and ME."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetExtendVersion"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetExtendVersion(${1:@integer which})${2:;}$0"
          	description: "Returns a real number in the format 701.1 where 7 is the major version, 1 is the minor version, and 0 is the middle. The value after the  point is 1 for an a, 2 for a b, and so on.  This final  value is always  zero for a file read version. Which: 0 : application version 1 : file version."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetExtendVersionString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetExtendVersionString()${1:;}$0"
          	description: "Returns the version number of ExtendSim as a string."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetExtendType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "GetExtendType()${1:;}$0"
          	description: "Returns the type of the ExtendSim application. Normal: 0 LT/RunTime: 2 Demo/Player: 4."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetFileReadVersion"
          	leftLabel: "real"
          	rightLabel: "ModL"
          	snippet: "GetFileReadVersion()${1:;}$0"
          	description: "Returns the version of the file being read, or previously read. It can  be used in the On BlockRead message handler to determine the version of the file that is currently in the process of being read. In conjunction with the ResizeDTDuringRead function, it will allow you  to inform ExtendSim that a data table has changed size from the size  it was in an older version. (This is useful for using the Dynamic data  table function without breaking existing models.)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "GetFileReadVersionString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "GetFileReadVersionString()${1:;}$0"
          	description: "Returns the version of the file being read, or previously read, as a  string. This is similar to the GetFileReadVersion function, with the  difference that the result is a version string, not a real number.  NOTE: This function returns the complete version string, in the  form ‘major version. minor version.bug fix version', unlike the GetFileReadVersion function which just returns the major version. This  function will return an empty string for files earlier than version 4.0."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LegoClose"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LegoClose()${1:;}$0"
          	description: "Stops the communication with the robot."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LegoMotor"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "LegoMotor(${1:@integer aOn}, ${2:@integer aSpeed}, ${3:@integer bOn}, ${4:@integer bSpeed}, ${5:@integer cOn}, ${6:@integer cSpeed})${7:;}$0"
          	description: "aOn, bOn, and cOn specify if the given motor is on or off.  A motor  that is off will lock.  If you want the motor to turn freely, specify that  the motor is on, and specify a zero for the speed of the motor.   aspeed, bSpeed, and cSpeed are the speeds of the three motors.  The  valid values for these range from –8 to +8."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LegoSensorBlock"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "LegoSensorBlock(${1:@integer blockNumber})${2:;}$0"
          	description: "Specifies which block should receive the LEGOSENSOR message.   This message is sent whenever the sensor value is non-zero for each  sensor that is enabled.  By default this block number is set to –1,  which means that each block in the model will receive the message."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LegoSensorOff"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "LegoSensorOff(${1:@integer which})${2:;}$0"
          	description: "Turns off the specified sensor. See LegoSensorOn for more information."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LegoSensorOn"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "LegoSensorOn(${1:@integer which})${2:;}$0"
          	description: "‘Which’ ranges from 0 to 4.  It specifies which sensor is to be turned  on.  Sensor 1, 2 and 3 are the three sensors of the robot.  Sensor 0 is  the ‘Alive’ signal from the robot, and sensor 4 is the battery power  signal. Sensors take monitoring time, you should avoid turning on,  or leaving on, sensors that you don’t need. The sensors can be queried with the LegoSensorRead function, and ExtendSim also sends  the LEGOSENSOR message to specified blocks in the model whenever any active sensor is non-zero."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LegoSensorRead"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LegoSensorRead(${1:@integer which})${2:;}$0"
          	description: "Returns the value of the specified sensor."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LegoSound"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "LegoSound(${1:@integer sound})${2:;}$0"
          	description: "values for sound:  0 : sound off 1 : blip 2 : beep-beep 3 : downward tones 4 : upward tones 5 : low buzz 6 : fast upward tones."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "LegoStart"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "LegoStart()${1:;}$0"
          	description: "Starts the communication with the robot."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_AddRecords"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_AddRecords(${1:@integer ADOApp}, ${2:@string ADO_TableName}, ${3:@integer EX_DBIndex}, ${4:@integer EX_TableIndex})${5:;}$0"
          	description: "Inserts an ExtendSim table into an ADO database table. ADO_TableName - name of the table in the ADO database EX_DBIndex - ExtendSim Database index EX_TableIndex - ExtendSim table index Note 1: The tables must have exactly the same structure. Note 2: This is the fastest way to transfer information."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_CheckCompatibleFieldType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ADO_CheckCompatibleFieldType(${1:@string ADODataType}, ${2:@integer ExtendSimType})${3:;}$0"
          	description: "Returns True (1) if the ADO field type is compatible with the  ExtendSim field type."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_Close"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ADO_Close(${1:@integer ADOAppHandle}, ${2:@integer Force})${3:;}$0"
          	description: "Closes the connection to the ADO DLL. Call when done accessing  the DLL."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_CreateTable"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_CreateTable(${1:@integer ADOApp}, ${2:@string ADO_TableName}, ${3:@string63 ADO_FieldArray[][4]})${4:;}$0"
          	description: "Creates a table in an ADO database. ADO_TableName - name of the table ADO_FieldArray contains the table names, their type, “Is nullable”,  and the number of characters."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_DeleteRecords"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_DeleteRecords(${1:@integer ADOApp}, ${2:@string ADO_TableName}, ${3:@string Criteria})${4:;}$0"
          	description: "Deletes records from an ADO database table. ADO_TableName - name of the table in the ADO database. Criteria - SQL statement indicating which rows to delete. To delete  all rows, leave blank."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_ExecuteNonQuery"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_ExecuteNonQuery(${1:@integer ADOApp}, ${2:@string SQLStr})${3:;}$0"
          	description: "Executes a Non-query SQL statement. SQLStr - SQL statement."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_ExecuteQuery"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_ExecuteQuery(${1:@integer ADOApp}, ${2:@string SQLStr})${3:;}$0"
          	description: "Executes a Query SQL statement. SQLStr - SQL statement."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_GetFields"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_GetFields(${1:@integer ADOApp}, ${2:@String ADO_TableName}, ${3:@string63 ADO_FieldArray[][4]})${4:;}$0"
          	description: "Gets a list of fields in the database. ADO_TableName - name of the table ADO_FieldArray contains the table names, their type, “Is nullable”,  and the number of characters. This is returned by the function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_GetNumFields"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ADO_GetNumFields(${1:@integer ADOApp}, ${2:@string63 ADO_TableName})${3:;}$0"
          	description: "Gets the number of fields in table ADO_TableName. ADO_Tablename - name of the table in the ADO database."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_GetNumRows"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ADO_GetNumRows(${1:@integer ADOApp}, ${2:@string63 ADO_TableName})${3:;}$0"
          	description: "Gets the number of records in table ADO_TableName. ADO_Tablename - name of the table in the ADO database."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_GetNumTables"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ADO_GetNumTables(${1:@integer ADOApp})${2:;}$0"
          	description: "Returns the number of tables in an ADO Database."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_GetTableColumns"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_GetTableColumns(${1:@integer ADOApp}, ${2:@integer EX_DBIndex}, ${3:@integer EX_TableIndex}, ${4:@string ADO_TableName}, ${5:@string63 ADO_Columns[]})${6:;}$0"
          	description: "Transfers a set of columns to an ExtendSim database table. EX_DBIndex - ExtendSim Database index EX_TableIndex - ExtendSim table index ADO_TableName - name of the table in the ADO database ADO_Columns - array containing the column (field names) to  import into the ExtendSim data table Note 1: Allocate records in the ExtendSim table before calling this  function. Note 2: The data types for the fields in the ExtendSim table and the  ADO table must be compatible."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_GetTables"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_GetTables(${1:@integer ADOApp}, ${2:@string63 ADO_FieldArray[]})${3:;}$0"
          	description: "Gets the list of tables in the ADO database. ADO_FieldArray contains the table names, their type, “Is nullable”, and the number of  characters."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_OpenConnection"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ADO_OpenConnection(${1:@string DatabaseType}, ${2:@string FileName}, ${3:@string UserName}, ${4:@string Password}, ${5:@String Server})${6:;}$0"
          	description: "Opens a connection with an ADO database. This is where database  information is specified: DatabaseType - Access, SQLServer, MYSql, or XML Filename - name of the database UserName Password Server - name of the database server (not used in Access or XML)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_SetTableColumns"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_SetTableColumns(${1:@integer ADOApp}, ${2:@string ADO_TableName}, ${3:@string63 ADO_Columns[]}, ${4:@integer EX_DBIndex}, ${5:@integer EX_TableIndex})${6:;}$0"
          	description: "Transfers a set of columns to an ADO database table. ADO_TableName - name of the table in the ADO database ADO_Columns - array containing the column (field names) to  import into the ExtendSim data table EX_DBIndex - ExtendSim Database index EX_TableIndex - ExtendSim table index Note: The data types for the fields in the ExtendSim table and the  ADO table must be compatible."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_Setup"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ADO_Setup()${1:;}$0"
          	description: "Sets up the connection to the ADO DLL. Call before accessing the  DLL Returns the ADO Application Handle - referred to in other  functions as ADOApp."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_SQLServerGetServers"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_SQLServerGetServers(${1:@string63 ServerInfo[][4]})${2:;}$0"
          	description: "Returns a list of SQL Server Servers. ServerInfo - array containing the list of the servers. Allocate this  array before calling the function."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ADO_SQLSserverGetDatabases"
          	leftLabel: "void"
          	rightLabel: "ModL"
          	snippet: "ADO_SQLSserverGetDatabases(${1:@string63 Server}, ${2:@string63 DBArray[][4]})${3:;}$0"
          	description: "Returns a list of SQLServer databases. Server - name of the SQL Server DBArray - returns name, size, description of the SQL Server database. The forth column is unused."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConvertADODataType"
          	leftLabel: "integer"
          	rightLabel: "ModL"
          	snippet: "ConvertADODataType(${1:@string ADODataType})${2:;}$0"
          	description: "Converts an ADO field type to an ExtendSim Constant. ADODataType - string containing the type for the ADO type (float,  string, int ...)."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "ConvertExtendSimDataType"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "ConvertExtendSimDataType(${1:@integer ExtendSimType})${2:;}$0"
          	description: "Converts an ExtendSim constant for data type to SQL string for  data type."
          	descriptionMoreURL: ""
          }
          {
          	type: "function"
          	displayText: "DB_FieldGetTypeString"
          	leftLabel: "string"
          	rightLabel: "ModL"
          	snippet: "DB_FieldGetTypeString(${1:@integer ExtendSimType})${2:;}$0"
          	description: "Returns the string description given an ExtendSim field type."
          	descriptionMoreURL: ""
          }
        ]
